using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace APIProfit.Models
{
    public partial class ProfitAdmin2K12 : DbContext
    {
        public ProfitAdmin2K12()
        {
        }

        public ProfitAdmin2K12(DbContextOptions<ProfitAdmin2K12> options)
            : base(options)
        {
        }

        #region Modelos
        public virtual DbSet<ParEmp> ParEmp { get; set; }
        public virtual DbSet<PvArticuloExt> PvArticuloExt { get; set; }
        public virtual DbSet<PvCaja> PvCaja { get; set; }
        public virtual DbSet<PvCobroExt> PvCobroExt { get; set; }
        public virtual DbSet<PvCobroTprengExt> PvCobroTprengExt { get; set; }
        public virtual DbSet<PvConfigPuntoV> PvConfigPuntoV { get; set; }
        public virtual DbSet<PvConfigPuntoVprecio> PvConfigPuntoVprecio { get; set; }
        public virtual DbSet<PvDenominacionesMoneda> PvDenominacionesMoneda { get; set; }
        public virtual DbSet<PvDevolucionClienteExt> PvDevolucionClienteExt { get; set; }
        public virtual DbSet<PvEtiquetaBalanza> PvEtiquetaBalanza { get; set; }
        public virtual DbSet<PvFacturaVentaExt> PvFacturaVentaExt { get; set; }
        public virtual DbSet<PvMovimientoBancoExt> PvMovimientoBancoExt { get; set; }
        public virtual DbSet<PvMovimientoCajaDevolucionExt> PvMovimientoCajaDevolucionExt { get; set; }
        public virtual DbSet<PvMovimientoCajaExt> PvMovimientoCajaExt { get; set; }
        public virtual DbSet<PvParEmp> PvParEmp { get; set; }
        public virtual DbSet<PvRenglonTicket> PvRenglonTicket { get; set; }
        public virtual DbSet<PvTarjetaCreditoExt> PvTarjetaCreditoExt { get; set; }
        public virtual DbSet<PvTipoTarjeta> PvTipoTarjeta { get; set; }
        public virtual DbSet<PvTurno> PvTurno { get; set; }
        public virtual DbSet<PvTurnoExe> PvTurnoExe { get; set; }
        public virtual DbSet<PvValeAlimentacion> PvValeAlimentacion { get; set; }
        public virtual DbSet<PvValeAlimentacionReng> PvValeAlimentacionReng { get; set; }
        public virtual DbSet<PvVcaja> PvVcaja { get; set; }
        public virtual DbSet<PvvSaSeriesAjpa> PvvSaSeriesAjpa { get; set; }
        public virtual DbSet<PvvSaSeriesCobro> PvvSaSeriesCobro { get; set; }
        public virtual DbSet<PvvSaSeriesMovBanco> PvvSaSeriesMovBanco { get; set; }
        public virtual DbSet<PvvSaSeriesMovCaja> PvvSaSeriesMovCaja { get; set; }
        public virtual DbSet<SaAdiCampo> SaAdiCampo { get; set; }
        public virtual DbSet<SaAdiGrupo> SaAdiGrupo { get; set; }
        public virtual DbSet<SaAjPrecioCostoAuto> SaAjPrecioCostoAuto { get; set; }
        public virtual DbSet<SaAjPrecioCostoM> SaAjPrecioCostoM { get; set; }
        public virtual DbSet<SaAjPrecioCostoReng> SaAjPrecioCostoReng { get; set; }
        public virtual DbSet<SaAjuste> SaAjuste { get; set; }
        public virtual DbSet<SaAjusteReng> SaAjusteReng { get; set; }
        public virtual DbSet<SaAlmacen> SaAlmacen { get; set; }
        public virtual DbSet<SaAreaImpresion> SaAreaImpresion { get; set; }
        public virtual DbSet<SaArtCaracteristica> SaArtCaracteristica { get; set; }
        public virtual DbSet<SaArtCaracteristicaMov> SaArtCaracteristicaMov { get; set; }
        public virtual DbSet<SaArtCompuesto> SaArtCompuesto { get; set; }
        public virtual DbSet<SaArtCompuestoGen> SaArtCompuestoGen { get; set; }
        public virtual DbSet<SaArtCompuestoGenReng> SaArtCompuestoGenReng { get; set; }
        public virtual DbSet<SaArtCompuestoReng> SaArtCompuestoReng { get; set; }
        public virtual DbSet<SaArtCrearAut> SaArtCrearAut { get; set; }
        public virtual DbSet<SaArtIdentificadorReng> SaArtIdentificadorReng { get; set; }
        public virtual DbSet<SaArtImagen> SaArtImagen { get; set; }
        public virtual DbSet<SaArtImportacion> SaArtImportacion { get; set; }
        public virtual DbSet<SaArtMargen> SaArtMargen { get; set; }
        public virtual DbSet<SaArtPrecio> SaArtPrecio { get; set; }
        public virtual DbSet<SaArtProveedorReng> SaArtProveedorReng { get; set; }
        public virtual DbSet<SaArtRelacionadoReng> SaArtRelacionadoReng { get; set; }
        public virtual DbSet<SaArtUbicacion> SaArtUbicacion { get; set; }
        public virtual DbSet<SaArtUnidad> SaArtUnidad { get; set; }
        public virtual DbSet<SaArticulo> SaArticulo { get; set; }
        public virtual DbSet<SaBanco> SaBanco { get; set; }
        public virtual DbSet<SaBeneficiario> SaBeneficiario { get; set; }
        public virtual DbSet<SaCaja> SaCaja { get; set; }
        public virtual DbSet<SaCatArticulo> SaCatArticulo { get; set; }
        public virtual DbSet<SaCheque> SaCheque { get; set; }
        public virtual DbSet<SaChequeDevueltoCompra> SaChequeDevueltoCompra { get; set; }
        public virtual DbSet<SaChequeDevueltoVenta> SaChequeDevueltoVenta { get; set; }
        public virtual DbSet<SaChequera> SaChequera { get; set; }
        public virtual DbSet<SaCliente> SaCliente { get; set; }
        public virtual DbSet<SaClienteExt> SaClienteExt { get; set; }
        public virtual DbSet<SaCobro> SaCobro { get; set; }
        public virtual DbSet<SaCobroDocReng> SaCobroDocReng { get; set; }
        public virtual DbSet<SaCobroRentenReng> SaCobroRentenReng { get; set; }
        public virtual DbSet<SaCobroRetenIvaReng> SaCobroRetenIvaReng { get; set; }
        public virtual DbSet<SaCobroTpreng> SaCobroTpreng { get; set; }
        public virtual DbSet<SaColor> SaColor { get; set; }
        public virtual DbSet<SaComisionGeneracion> SaComisionGeneracion { get; set; }
        public virtual DbSet<SaComisionPrecioArticulo> SaComisionPrecioArticulo { get; set; }
        public virtual DbSet<SaComisionPrecioCategoria> SaComisionPrecioCategoria { get; set; }
        public virtual DbSet<SaComisionPrecioLinea> SaComisionPrecioLinea { get; set; }
        public virtual DbSet<SaComisionRentabArticulo> SaComisionRentabArticulo { get; set; }
        public virtual DbSet<SaComisionRentabCategoria> SaComisionRentabCategoria { get; set; }
        public virtual DbSet<SaComisionRentabLinea> SaComisionRentabLinea { get; set; }
        public virtual DbSet<SaComisionResultado> SaComisionResultado { get; set; }
        public virtual DbSet<SaComisionTipo> SaComisionTipo { get; set; }
        public virtual DbSet<SaConIslr> SaConIslr { get; set; }
        public virtual DbSet<SaConcBanco> SaConcBanco { get; set; }
        public virtual DbSet<SaConciliacionAutoReng> SaConciliacionAutoReng { get; set; }
        public virtual DbSet<SaConciliacionDetalle> SaConciliacionDetalle { get; set; }
        public virtual DbSet<SaCondicionPago> SaCondicionPago { get; set; }
        public virtual DbSet<SaConfigAjuste> SaConfigAjuste { get; set; }
        public virtual DbSet<SaConfigArticulo> SaConfigArticulo { get; set; }
        public virtual DbSet<SaConfigCliente> SaConfigCliente { get; set; }
        public virtual DbSet<SaConfigCobro> SaConfigCobro { get; set; }
        public virtual DbSet<SaConfigCotizacionCliente> SaConfigCotizacionCliente { get; set; }
        public virtual DbSet<SaConfigCotizacionProveedor> SaConfigCotizacionProveedor { get; set; }
        public virtual DbSet<SaConfigDevolucionCliente> SaConfigDevolucionCliente { get; set; }
        public virtual DbSet<SaConfigDevolucionProveedor> SaConfigDevolucionProveedor { get; set; }
        public virtual DbSet<SaConfigDistCosto> SaConfigDistCosto { get; set; }
        public virtual DbSet<SaConfigFacturaCompra> SaConfigFacturaCompra { get; set; }
        public virtual DbSet<SaConfigFacturaVenta> SaConfigFacturaVenta { get; set; }
        public virtual DbSet<SaConfigMovBanco> SaConfigMovBanco { get; set; }
        public virtual DbSet<SaConfigMovCaja> SaConfigMovCaja { get; set; }
        public virtual DbSet<SaConfigNotaDespachoVenta> SaConfigNotaDespachoVenta { get; set; }
        public virtual DbSet<SaConfigNotaEntregaVenta> SaConfigNotaEntregaVenta { get; set; }
        public virtual DbSet<SaConfigNotaRecepcionCompra> SaConfigNotaRecepcionCompra { get; set; }
        public virtual DbSet<SaConfigOrdenCompra> SaConfigOrdenCompra { get; set; }
        public virtual DbSet<SaConfigOrdenPago> SaConfigOrdenPago { get; set; }
        public virtual DbSet<SaConfigPago> SaConfigPago { get; set; }
        public virtual DbSet<SaConfigPedidoVenta> SaConfigPedidoVenta { get; set; }
        public virtual DbSet<SaConfigPlantillaCompra> SaConfigPlantillaCompra { get; set; }
        public virtual DbSet<SaConfigPlantillaVenta> SaConfigPlantillaVenta { get; set; }
        public virtual DbSet<SaConfigProveedor> SaConfigProveedor { get; set; }
        public virtual DbSet<SaConfigTraslado> SaConfigTraslado { get; set; }
        public virtual DbSet<SaConsecutivo> SaConsecutivo { get; set; }
        public virtual DbSet<SaConsecutivoTipo> SaConsecutivoTipo { get; set; }
        public virtual DbSet<SaCostoHistoricoEntrada> SaCostoHistoricoEntrada { get; set; }
        public virtual DbSet<SaCostoHistoricoSalida> SaCostoHistoricoSalida { get; set; }
        public virtual DbSet<SaCotizacionCliente> SaCotizacionCliente { get; set; }
        public virtual DbSet<SaCotizacionClienteReng> SaCotizacionClienteReng { get; set; }
        public virtual DbSet<SaCotizacionProveedor> SaCotizacionProveedor { get; set; }
        public virtual DbSet<SaCotizacionProveedorReng> SaCotizacionProveedorReng { get; set; }
        public virtual DbSet<SaCuentaBancaria> SaCuentaBancaria { get; set; }
        public virtual DbSet<SaCuentaIngEgr> SaCuentaIngEgr { get; set; }
        public virtual DbSet<SaDatosDeImportacion> SaDatosDeImportacion { get; set; }
        public virtual DbSet<SaDepositoBanco> SaDepositoBanco { get; set; }
        public virtual DbSet<SaDepositoBancoReng> SaDepositoBancoReng { get; set; }
        public virtual DbSet<SaDescArticulo> SaDescArticulo { get; set; }
        public virtual DbSet<SaDescCategoria> SaDescCategoria { get; set; }
        public virtual DbSet<SaDescLinea> SaDescLinea { get; set; }
        public virtual DbSet<SaDescProntoPago> SaDescProntoPago { get; set; }
        public virtual DbSet<SaDevolucionCliente> SaDevolucionCliente { get; set; }
        public virtual DbSet<SaDevolucionClienteReng> SaDevolucionClienteReng { get; set; }
        public virtual DbSet<SaDevolucionProveedor> SaDevolucionProveedor { get; set; }
        public virtual DbSet<SaDevolucionProveedorReng> SaDevolucionProveedorReng { get; set; }
        public virtual DbSet<SaDevolucionProveedorRengExt> SaDevolucionProveedorRengExt { get; set; }
        public virtual DbSet<SaDistribCosto> SaDistribCosto { get; set; }
        public virtual DbSet<SaDistribCostoDestinoReng> SaDistribCostoDestinoReng { get; set; }
        public virtual DbSet<SaDistribCostoOrigenReng> SaDistribCostoOrigenReng { get; set; }
        public virtual DbSet<SaDistribCostoRelaReng> SaDistribCostoRelaReng { get; set; }
        public virtual DbSet<SaDocumentoCompra> SaDocumentoCompra { get; set; }
        public virtual DbSet<SaDocumentoCompraReng> SaDocumentoCompraReng { get; set; }
        public virtual DbSet<SaDocumentoElectronico> SaDocumentoElectronico { get; set; }
        public virtual DbSet<SaDocumentoImagen> SaDocumentoImagen { get; set; }
        public virtual DbSet<SaDocumentoVenta> SaDocumentoVenta { get; set; }
        public virtual DbSet<SaDocumentoVentaReng> SaDocumentoVentaReng { get; set; }
        public virtual DbSet<SaFactCompRengCaracteristicasAdic> SaFactCompRengCaracteristicasAdic { get; set; }
        public virtual DbSet<SaFactCompRengPesoVolumen> SaFactCompRengPesoVolumen { get; set; }
        public virtual DbSet<SaFacturaCompra> SaFacturaCompra { get; set; }
        public virtual DbSet<SaFacturaCompraImportacion> SaFacturaCompraImportacion { get; set; }
        public virtual DbSet<SaFacturaCompraReng> SaFacturaCompraReng { get; set; }
        public virtual DbSet<SaFacturaCompraRengExt> SaFacturaCompraRengExt { get; set; }
        public virtual DbSet<SaFacturaVenta> SaFacturaVenta { get; set; }
        public virtual DbSet<SaFacturaVentaReng> SaFacturaVentaReng { get; set; }
        public virtual DbSet<SaGiroCompra> SaGiroCompra { get; set; }
        public virtual DbSet<SaGiroCompraReng> SaGiroCompraReng { get; set; }
        public virtual DbSet<SaGiroVenta> SaGiroVenta { get; set; }
        public virtual DbSet<SaGiroVentaReng> SaGiroVentaReng { get; set; }
        public virtual DbSet<SaHistoricoEstado> SaHistoricoEstado { get; set; }
        public virtual DbSet<SaImpMun> SaImpMun { get; set; }
        public virtual DbSet<SaImpuesto> SaImpuesto { get; set; }
        public virtual DbSet<SaImpuestoReng> SaImpuestoReng { get; set; }
        public virtual DbSet<SaImpuestoSobreVenta> SaImpuestoSobreVenta { get; set; }
        public virtual DbSet<SaImpuestoSobreVentaReng> SaImpuestoSobreVentaReng { get; set; }
        public virtual DbSet<SaIncoterm> SaIncoterm { get; set; }
        public virtual DbSet<SaIntegr> SaIntegr { get; set; }
        public virtual DbSet<SaInventarioFisico> SaInventarioFisico { get; set; }
        public virtual DbSet<SaLineaArticulo> SaLineaArticulo { get; set; }
        public virtual DbSet<SaLoteEntrada> SaLoteEntrada { get; set; }
        public virtual DbSet<SaLoteSalida> SaLoteSalida { get; set; }
        public virtual DbSet<SaMoneda> SaMoneda { get; set; }
        public virtual DbSet<SaMovimientoBanco> SaMovimientoBanco { get; set; }
        public virtual DbSet<SaMovimientoCaja> SaMovimientoCaja { get; set; }
        public virtual DbSet<SaNcfinfoDocCompra> SaNcfinfoDocCompra { get; set; }
        public virtual DbSet<SaNcfinfoDocVenta> SaNcfinfoDocVenta { get; set; }
        public virtual DbSet<SaNotaDespachoVenta> SaNotaDespachoVenta { get; set; }
        public virtual DbSet<SaNotaDespachoVentaReng> SaNotaDespachoVentaReng { get; set; }
        public virtual DbSet<SaNotaEntregaVenta> SaNotaEntregaVenta { get; set; }
        public virtual DbSet<SaNotaEntregaVentaReng> SaNotaEntregaVentaReng { get; set; }
        public virtual DbSet<SaNotaRecepcionCompra> SaNotaRecepcionCompra { get; set; }
        public virtual DbSet<SaNotaRecepcionCompraReng> SaNotaRecepcionCompraReng { get; set; }
        public virtual DbSet<SaOrdenCompra> SaOrdenCompra { get; set; }
        public virtual DbSet<SaOrdenCompraReng> SaOrdenCompraReng { get; set; }
        public virtual DbSet<SaOrdenPago> SaOrdenPago { get; set; }
        public virtual DbSet<SaOrdenPagoReng> SaOrdenPagoReng { get; set; }
        public virtual DbSet<SaPago> SaPago { get; set; }
        public virtual DbSet<SaPagoDocReng> SaPagoDocReng { get; set; }
        public virtual DbSet<SaPagoRentenReng> SaPagoRentenReng { get; set; }
        public virtual DbSet<SaPagoRetenIvaReng> SaPagoRetenIvaReng { get; set; }
        public virtual DbSet<SaPagoTpreng> SaPagoTpreng { get; set; }
        public virtual DbSet<SaPais> SaPais { get; set; }
        public virtual DbSet<SaParametroConc> SaParametroConc { get; set; }
        public virtual DbSet<SaPedidoVenta> SaPedidoVenta { get; set; }
        public virtual DbSet<SaPedidoVentaReng> SaPedidoVentaReng { get; set; }
        public virtual DbSet<SaPista> SaPista { get; set; }
        public virtual DbSet<SaPlanillaFiscal> SaPlanillaFiscal { get; set; }
        public virtual DbSet<SaPlantillaCompra> SaPlantillaCompra { get; set; }
        public virtual DbSet<SaPlantillaCompraReng> SaPlantillaCompraReng { get; set; }
        public virtual DbSet<SaPlantillaCompraReq> SaPlantillaCompraReq { get; set; }
        public virtual DbSet<SaPlantillaCompraReqRelacion> SaPlantillaCompraReqRelacion { get; set; }
        public virtual DbSet<SaPlantillaCompraReqRenglon> SaPlantillaCompraReqRenglon { get; set; }
        public virtual DbSet<SaPlantillaVenta> SaPlantillaVenta { get; set; }
        public virtual DbSet<SaPlantillaVentaReng> SaPlantillaVentaReng { get; set; }
        public virtual DbSet<SaProcedencia> SaProcedencia { get; set; }
        public virtual DbSet<SaProveedor> SaProveedor { get; set; }
        public virtual DbSet<SaProveedorExt> SaProveedorExt { get; set; }
        public virtual DbSet<SaPuntoEmision> SaPuntoEmision { get; set; }
        public virtual DbSet<SaReglaInt> SaReglaInt { get; set; }
        public virtual DbSet<SaResInventario> SaResInventario { get; set; }
        public virtual DbSet<SaResInventarioReng> SaResInventarioReng { get; set; }
        public virtual DbSet<SaSaldoBanco> SaSaldoBanco { get; set; }
        public virtual DbSet<SaSaldoCaja> SaSaldoCaja { get; set; }
        public virtual DbSet<SaSegmento> SaSegmento { get; set; }
        public virtual DbSet<SaSeriales> SaSeriales { get; set; }
        public virtual DbSet<SaSerie> SaSerie { get; set; }
        public virtual DbSet<SaSerieTipo> SaSerieTipo { get; set; }
        public virtual DbSet<SaSerieTipoExt> SaSerieTipoExt { get; set; }
        public virtual DbSet<SaStockAlmacen> SaStockAlmacen { get; set; }
        public virtual DbSet<SaSubLinea> SaSubLinea { get; set; }
        public virtual DbSet<SaSucursal> SaSucursal { get; set; }
        public virtual DbSet<SaTabuladorIslr> SaTabuladorIslr { get; set; }
        public virtual DbSet<SaTabuladorIslrReng> SaTabuladorIslrReng { get; set; }
        public virtual DbSet<SaTarjetaCredito> SaTarjetaCredito { get; set; }
        public virtual DbSet<SaTasa> SaTasa { get; set; }
        public virtual DbSet<SaTax> SaTax { get; set; }
        public virtual DbSet<SaTipoAjuste> SaTipoAjuste { get; set; }
        public virtual DbSet<SaTipoAnulacionVenta> SaTipoAnulacionVenta { get; set; }
        public virtual DbSet<SaTipoCliente> SaTipoCliente { get; set; }
        public virtual DbSet<SaTipoComprobante> SaTipoComprobante { get; set; }
        public virtual DbSet<SaTipoDocumento> SaTipoDocumento { get; set; }
        public virtual DbSet<SaTipoGasto> SaTipoGasto { get; set; }
        public virtual DbSet<SaTipoImagen> SaTipoImagen { get; set; }
        public virtual DbSet<SaTipoPrecio> SaTipoPrecio { get; set; }
        public virtual DbSet<SaTipoProveedor> SaTipoProveedor { get; set; }
        public virtual DbSet<SaTransferenciaEntreCuentas> SaTransferenciaEntreCuentas { get; set; }
        public virtual DbSet<SaTransporte> SaTransporte { get; set; }
        public virtual DbSet<SaTraslado> SaTraslado { get; set; }
        public virtual DbSet<SaTrasladoReng> SaTrasladoReng { get; set; }
        public virtual DbSet<SaUbicacion> SaUbicacion { get; set; }
        public virtual DbSet<SaUnidad> SaUnidad { get; set; }
        public virtual DbSet<SaUnidadTributaria> SaUnidadTributaria { get; set; }
        public virtual DbSet<SaVendedor> SaVendedor { get; set; }
        public virtual DbSet<SaZona> SaZona { get; set; }
        public virtual DbSet<SavArtCaracteristica> SavArtCaracteristica { get; set; }
        public virtual DbSet<SavArtCaracteristicaAjus> SavArtCaracteristicaAjus { get; set; }
        public virtual DbSet<SavArtCaracteristicaComp> SavArtCaracteristicaComp { get; set; }
        public virtual DbSet<SavArtCaracteristicaDcli> SavArtCaracteristicaDcli { get; set; }
        public virtual DbSet<SavArtCaracteristicaDpro> SavArtCaracteristicaDpro { get; set; }
        public virtual DbSet<SavArtCaracteristicaFact> SavArtCaracteristicaFact { get; set; }
        public virtual DbSet<SavArtCaracteristicaGcom> SavArtCaracteristicaGcom { get; set; }
        public virtual DbSet<SavArtCaracteristicaNdes> SavArtCaracteristicaNdes { get; set; }
        public virtual DbSet<SavArtCaracteristicaNent> SavArtCaracteristicaNent { get; set; }
        public virtual DbSet<SavArtCaracteristicaNrec> SavArtCaracteristicaNrec { get; set; }
        public virtual DbSet<SavArtCaracteristicaTras> SavArtCaracteristicaTras { get; set; }
        public virtual DbSet<ScCentro> ScCentro { get; set; }
        public virtual DbSet<ScCuenta> ScCuenta { get; set; }
        public virtual DbSet<ScGastos> ScGastos { get; set; }
        public virtual DbSet<SstockActAjuste> SstockActAjuste { get; set; }
        public virtual DbSet<SstockActCompuesto> SstockActCompuesto { get; set; }
        public virtual DbSet<SstockActCompuestoReng> SstockActCompuestoReng { get; set; }
        public virtual DbSet<SstockActDevolucionProveedor> SstockActDevolucionProveedor { get; set; }
        public virtual DbSet<SstockActDevolucionVenta> SstockActDevolucionVenta { get; set; }
        public virtual DbSet<SstockActFacturaCompra> SstockActFacturaCompra { get; set; }
        public virtual DbSet<SstockActFacturaVenta> SstockActFacturaVenta { get; set; }
        public virtual DbSet<SstockActNotaEntregaVenta> SstockActNotaEntregaVenta { get; set; }
        public virtual DbSet<SstockActNotaRecepcionCompra> SstockActNotaRecepcionCompra { get; set; }
        public virtual DbSet<SstockActTrasladoDest> SstockActTrasladoDest { get; set; }
        public virtual DbSet<SstockActTrasladoOri> SstockActTrasladoOri { get; set; }
        public virtual DbSet<SstockActTrasladoTemp> SstockActTrasladoTemp { get; set; }
        public virtual DbSet<SstockActTrasladoTempS> SstockActTrasladoTempS { get; set; }
        public virtual DbSet<SstockComPedido> SstockComPedido { get; set; }
        public virtual DbSet<SstockDesFacturaVenta> SstockDesFacturaVenta { get; set; }
        public virtual DbSet<SstockLleOrdenCompra> SstockLleOrdenCompra { get; set; }
        public virtual DbSet<StgFactLoteGen> StgFactLoteGen { get; set; }
        public virtual DbSet<StgFacturaVentaExt> StgFacturaVentaExt { get; set; }
        public virtual DbSet<StockActAjuste> StockActAjuste { get; set; }
        public virtual DbSet<StockActAjusteLote> StockActAjusteLote { get; set; }
        public virtual DbSet<StockActArtCompuestoGenLote> StockActArtCompuestoGenLote { get; set; }
        public virtual DbSet<StockActArtCompuestoGenRengLote> StockActArtCompuestoGenRengLote { get; set; }
        public virtual DbSet<StockActCompuesto> StockActCompuesto { get; set; }
        public virtual DbSet<StockActCompuestoReng> StockActCompuestoReng { get; set; }
        public virtual DbSet<StockActDevolucionProveedor> StockActDevolucionProveedor { get; set; }
        public virtual DbSet<StockActDevolucionProveedorLote> StockActDevolucionProveedorLote { get; set; }
        public virtual DbSet<StockActDevolucionVenta> StockActDevolucionVenta { get; set; }
        public virtual DbSet<StockActDevolucionVentaLote> StockActDevolucionVentaLote { get; set; }
        public virtual DbSet<StockActFacturaCompra> StockActFacturaCompra { get; set; }
        public virtual DbSet<StockActFacturaCompraLote> StockActFacturaCompraLote { get; set; }
        public virtual DbSet<StockActFacturaCompraMovInv> StockActFacturaCompraMovInv { get; set; }
        public virtual DbSet<StockActFacturaVenta> StockActFacturaVenta { get; set; }
        public virtual DbSet<StockActFacturaVentaLote> StockActFacturaVentaLote { get; set; }
        public virtual DbSet<StockActFacturaVentaMovInv> StockActFacturaVentaMovInv { get; set; }
        public virtual DbSet<StockActNotaDespachoVentaLote> StockActNotaDespachoVentaLote { get; set; }
        public virtual DbSet<StockActNotaEntregaVenta> StockActNotaEntregaVenta { get; set; }
        public virtual DbSet<StockActNotaEntregaVentaLote> StockActNotaEntregaVentaLote { get; set; }
        public virtual DbSet<StockActNotaRecepcionCompra> StockActNotaRecepcionCompra { get; set; }
        public virtual DbSet<StockActNotaRecepcionCompraLote> StockActNotaRecepcionCompraLote { get; set; }
        public virtual DbSet<StockActTrasladoDest> StockActTrasladoDest { get; set; }
        public virtual DbSet<StockActTrasladoDestLote> StockActTrasladoDestLote { get; set; }
        public virtual DbSet<StockActTrasladoOri> StockActTrasladoOri { get; set; }
        public virtual DbSet<StockActTrasladoOriLote> StockActTrasladoOriLote { get; set; }
        public virtual DbSet<StockActTrasladoTemp> StockActTrasladoTemp { get; set; }
        public virtual DbSet<StockActTrasladoTempLote> StockActTrasladoTempLote { get; set; }
        public virtual DbSet<StockActTrasladoTempS> StockActTrasladoTempS { get; set; }
        public virtual DbSet<StockComPedido> StockComPedido { get; set; }
        public virtual DbSet<StockDesFacturaVenta> StockDesFacturaVenta { get; set; }
        public virtual DbSet<StockLleOrdenCompra> StockLleOrdenCompra { get; set; }
        public virtual DbSet<VSaAjustePrecioA> VSaAjustePrecioA { get; set; }
        public virtual DbSet<VSaAjustePrecioM> VSaAjustePrecioM { get; set; }
        public virtual DbSet<VSaAjustes> VSaAjustes { get; set; }
        public virtual DbSet<VSaAreaImpresion> VSaAreaImpresion { get; set; }
        public virtual DbSet<VSaArtCompuesGen> VSaArtCompuesGen { get; set; }
        public virtual DbSet<VSaArtCompuesto> VSaArtCompuesto { get; set; }
        public virtual DbSet<VSaArtCompuestoSaArticulo> VSaArtCompuestoSaArticulo { get; set; }
        public virtual DbSet<VSaArtPrecioSaTipoPrecio> VSaArtPrecioSaTipoPrecio { get; set; }
        public virtual DbSet<VSaArticuloImagen> VSaArticuloImagen { get; set; }
        public virtual DbSet<VSaArticuloSaArtUnidad> VSaArticuloSaArtUnidad { get; set; }
        public virtual DbSet<VSaArticuloSaArtUnidadSec> VSaArticuloSaArtUnidadSec { get; set; }
        public virtual DbSet<VSaChequeDevuelto> VSaChequeDevuelto { get; set; }
        public virtual DbSet<VSaChequeDevueltoVenta> VSaChequeDevueltoVenta { get; set; }
        public virtual DbSet<VSaCliente> VSaCliente { get; set; }
        public virtual DbSet<VSaClienteSaTipoCliente> VSaClienteSaTipoCliente { get; set; }
        public virtual DbSet<VSaCobroCliente> VSaCobroCliente { get; set; }
        public virtual DbSet<VSaConIslrSaTabuladorIslr> VSaConIslrSaTabuladorIslr { get; set; }
        public virtual DbSet<VSaConfigDistCosto> VSaConfigDistCosto { get; set; }
        public virtual DbSet<VSaConsultaArticulo> VSaConsultaArticulo { get; set; }
        public virtual DbSet<VSaCostoHistoricoEntrada> VSaCostoHistoricoEntrada { get; set; }
        public virtual DbSet<VSaCostoHistoricoSalida> VSaCostoHistoricoSalida { get; set; }
        public virtual DbSet<VSaCotizacionCliente> VSaCotizacionCliente { get; set; }
        public virtual DbSet<VSaCotizacionProveedor> VSaCotizacionProveedor { get; set; }
        public virtual DbSet<VSaDepositoBancario> VSaDepositoBancario { get; set; }
        public virtual DbSet<VSaDevolucionCliente> VSaDevolucionCliente { get; set; }
        public virtual DbSet<VSaDevolucionProveedor> VSaDevolucionProveedor { get; set; }
        public virtual DbSet<VSaDistribCosto> VSaDistribCosto { get; set; }
        public virtual DbSet<VSaDocumentoCompra> VSaDocumentoCompra { get; set; }
        public virtual DbSet<VSaDocumentoElectronico> VSaDocumentoElectronico { get; set; }
        public virtual DbSet<VSaDocumentoImagen> VSaDocumentoImagen { get; set; }
        public virtual DbSet<VSaDocumentoVenta> VSaDocumentoVenta { get; set; }
        public virtual DbSet<VSaFacturaCompra> VSaFacturaCompra { get; set; }
        public virtual DbSet<VSaFacturaVenta> VSaFacturaVenta { get; set; }
        public virtual DbSet<VSaImpMun> VSaImpMun { get; set; }
        public virtual DbSet<VSaIncoterm> VSaIncoterm { get; set; }
        public virtual DbSet<VSaLoteEntrada> VSaLoteEntrada { get; set; }
        public virtual DbSet<VSaMovimientoBanco> VSaMovimientoBanco { get; set; }
        public virtual DbSet<VSaMovimientoBanco1> VSaMovimientoBanco1 { get; set; }
        public virtual DbSet<VSaMovimientoCaja> VSaMovimientoCaja { get; set; }
        public virtual DbSet<VSaNotaDespachoVenta> VSaNotaDespachoVenta { get; set; }
        public virtual DbSet<VSaNotaEntregaVenta> VSaNotaEntregaVenta { get; set; }
        public virtual DbSet<VSaNotaRecepcionCompra> VSaNotaRecepcionCompra { get; set; }
        public virtual DbSet<VSaOrdenCompra> VSaOrdenCompra { get; set; }
        public virtual DbSet<VSaOrdenPago> VSaOrdenPago { get; set; }
        public virtual DbSet<VSaPagoProveedor> VSaPagoProveedor { get; set; }
        public virtual DbSet<VSaPedidoVenta> VSaPedidoVenta { get; set; }
        public virtual DbSet<VSaPlantillaCompra> VSaPlantillaCompra { get; set; }
        public virtual DbSet<VSaPlantillaVenta> VSaPlantillaVenta { get; set; }
        public virtual DbSet<VSaPuntoEmision> VSaPuntoEmision { get; set; }
        public virtual DbSet<VSaResInventario> VSaResInventario { get; set; }
        public virtual DbSet<VSaSeriePorTipo> VSaSeriePorTipo { get; set; }
        public virtual DbSet<VSaSeries> VSaSeries { get; set; }
        public virtual DbSet<VSaSeriesCotizacionCliente> VSaSeriesCotizacionCliente { get; set; }
        public virtual DbSet<VSaSeriesCotizacionProveedor> VSaSeriesCotizacionProveedor { get; set; }
        public virtual DbSet<VSaSeriesDevolucionCliente> VSaSeriesDevolucionCliente { get; set; }
        public virtual DbSet<VSaSeriesDevolucionProveedor> VSaSeriesDevolucionProveedor { get; set; }
        public virtual DbSet<VSaSeriesFacturaCompra> VSaSeriesFacturaCompra { get; set; }
        public virtual DbSet<VSaSeriesFacturaVenta> VSaSeriesFacturaVenta { get; set; }
        public virtual DbSet<VSaSeriesFacturaVentaNroControl> VSaSeriesFacturaVentaNroControl { get; set; }
        public virtual DbSet<VSaSeriesNcf> VSaSeriesNcf { get; set; }
        public virtual DbSet<VSaSeriesNotaCredito> VSaSeriesNotaCredito { get; set; }
        public virtual DbSet<VSaSeriesNotaCreditoNroControl> VSaSeriesNotaCreditoNroControl { get; set; }
        public virtual DbSet<VSaSeriesNotaDespacho> VSaSeriesNotaDespacho { get; set; }
        public virtual DbSet<VSaSeriesNotaEntrega> VSaSeriesNotaEntrega { get; set; }
        public virtual DbSet<VSaSeriesNotaEntregaNroControl> VSaSeriesNotaEntregaNroControl { get; set; }
        public virtual DbSet<VSaSeriesNotaRecepcion> VSaSeriesNotaRecepcion { get; set; }
        public virtual DbSet<VSaSeriesOrdenCompra> VSaSeriesOrdenCompra { get; set; }
        public virtual DbSet<VSaSeriesPedido> VSaSeriesPedido { get; set; }
        public virtual DbSet<VSaSeriesPlantillaCompra> VSaSeriesPlantillaCompra { get; set; }
        public virtual DbSet<VSaSeriesPlantillaVenta> VSaSeriesPlantillaVenta { get; set; }
        public virtual DbSet<VSaStockActual> VSaStockActual { get; set; }
        public virtual DbSet<VSaTipoAnulacionVenta> VSaTipoAnulacionVenta { get; set; }
        public virtual DbSet<VSaTipoComprobante> VSaTipoComprobante { get; set; }
        public virtual DbSet<VSaTipoDocumento> VSaTipoDocumento { get; set; }
        public virtual DbSet<VSaTipoGasto> VSaTipoGasto { get; set; }
        public virtual DbSet<VSaTipoImagen> VSaTipoImagen { get; set; }
        public virtual DbSet<VSaTransferenciaEntreCuentas> VSaTransferenciaEntreCuentas { get; set; }
        public virtual DbSet<VSaTraslado> VSaTraslado { get; set; }
        public virtual DbSet<VStgFactLoteGen> VStgFactLoteGen { get; set; }
        public virtual DbSet<View1> View1 { get; set; } 
        #endregion

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            /*Conexion SQL Server dentro del appsetting.json*/
            /*Microsoft.Extensions.Configuration.Json desde Nuget*/
            /*R.M.: 18/09/2020*/
            IConfigurationRoot configuration = new ConfigurationBuilder()
                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                .AddJsonFile("appsettings.json")
                .Build();


            if (!optionsBuilder.IsConfigured)
            {
                //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                //optionsBuilder.UseSqlServer("Server=DESKTOP-9RKQG9O;Database=DEMOA2K12;User Id=profit;Password=profit;");
                optionsBuilder.UseSqlServer(configuration.GetConnectionString("ProfitAdmin2K12"));
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ParEmp>(entity =>
            {
                entity.HasKey(e => e.CodEmp);

                entity.ToTable("par_emp");

                entity.Property(e => e.CodEmp)
                    .HasColumnName("cod_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la empresa");

                entity.Property(e => e.AreaImp)
                    .HasColumnName("area_imp")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CCoPais)
                    .HasColumnName("c_co_pais")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CCoSeg)
                    .HasColumnName("c_co_seg")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Segmento por defecto para proveedor genérico");

                entity.Property(e => e.CCoZon)
                    .HasColumnName("c_co_zon")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Zona por defecto para proveedor genérico");

                entity.Property(e => e.CCondPago)
                    .HasColumnName("c_cond_pago")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Condicion de pago por defecto para proveedor genérico");

                entity.Property(e => e.CCtaIngEgr)
                    .HasColumnName("c_cta_ing_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuenta de Ingreso y Egreso por defecto para proveedor genérico");

                entity.Property(e => e.CMargenCostoPrecio)
                    .HasColumnName("c_margen_costo_precio")
                    .HasComment("Indica si el margen de ganancia se calcula de costo a precio");

                entity.Property(e => e.CRedondeo)
                    .HasColumnName("c_redondeo")
                    .HasComment("Permite redondeo en las compras");

                entity.Property(e => e.CRetenAuto)
                    .HasColumnName("c_reten_auto")
                    .HasComment("0: No realiza retención automáticamente, 1: Advierte por medio de un mensaje sobre si se realizara retención automáticamente, 2: Realiza la retención automáticamente");

                entity.Property(e => e.CRetenIslrAuto)
                    .HasColumnName("c_retenISLR_auto")
                    .HasComment("0: No realiza retención automáticamente, 1: Advierte por medio de un mensaje sobre si se realizara retención automáticamente, 2: Realiza la retención automáticamente");

                entity.Property(e => e.CTipPro)
                    .HasColumnName("c_tip_pro")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Proveedor por defecto para proveedor genérico");

                entity.Property(e => e.CTipoPer)
                    .HasColumnName("c_tipo_per")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de persona por defecto para proveedor genérico");

                entity.Property(e => e.CTipoRedondeo)
                    .HasColumnName("c_tipo_redondeo")
                    .HasComment("Tipo de redondeo en compras(Equitativo = 0, Superior = 1, Inferior = 2)");

                entity.Property(e => e.CValorRedondeo)
                    .HasColumnName("c_valor_redondeo")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CbCancCompOrdPag)
                    .HasColumnName("cb_canc_comp_ord_pag")
                    .HasComment("Pertenece al modulo Caja y Banco. Indica si se permite cancelar sólo compras y órdenes de pago programadas.");

                entity.Property(e => e.CbImpreFis)
                    .HasColumnName("cb_impre_fis")
                    .HasComment("Pertenece al modulo Caja y Banco. Indica si se activa el manejo de impresoras fiscales.");

                entity.Property(e => e.CbManejImpTran)
                    .HasColumnName("cb_manej_imp_tran")
                    .HasComment("Pertenece al modulo Caja y Banco. Indica si se realiza el manejo del impuesto a las transacciones financieras (I.T.F.)");

                entity.Property(e => e.CbReten)
                    .HasColumnName("cb_reten")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CbSujtReten).HasColumnName("cb_sujt_reten");

                entity.Property(e => e.CoCueAju)
                    .HasColumnName("co_cue_aju")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de ajuste por diferencia");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUniPeso)
                    .HasColumnName("co_uni_peso")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUniVolumen)
                    .HasColumnName("co_uni_volumen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CorreocredencialDef).HasColumnName("correocredencial_def");

                entity.Property(e => e.Correodir)
                    .HasColumnName("correodir")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CorreometodoEnt)
                    .HasColumnName("correometodo_ent")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Correopass)
                    .HasColumnName("correopass")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Correopuerto)
                    .HasColumnName("correopuerto")
                    .HasDefaultValueSql("((25))");

                entity.Property(e => e.Correoservidor)
                    .HasColumnName("correoservidor")
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Correossl).HasColumnName("correossl");

                entity.Property(e => e.CorreotiempoExp)
                    .HasColumnName("correotiempo_exp")
                    .HasDefaultValueSql("((5))");

                entity.Property(e => e.Correousuario)
                    .HasColumnName("correousuario")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.EmpAdm)
                    .HasColumnName("emp_adm")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComment("Camino de la empresa, Integracion Administrativo");

                entity.Property(e => e.EmpCont)
                    .HasColumnName("emp_cont")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComment("Camino de la empresa, Integracion Contabilidad");

                entity.Property(e => e.EmpNom)
                    .HasColumnName("emp_nom")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComment("Camino de la empresa, Integracion Nomina");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecCont)
                    .HasColumnName("fec_cont")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de la última contabilización");

                entity.Property(e => e.FechaRes)
                    .HasColumnName("fecha_res")
                    .HasColumnType("smalldatetime")
                    .HasComment("Compatibilidad con versiones anteriores");

                entity.Property(e => e.Format1)
                    .HasColumnName("format1")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Campos Adicionales");

                entity.Property(e => e.Format2)
                    .HasColumnName("format2")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Campos Adicionales");

                entity.Property(e => e.Format3)
                    .HasColumnName("format3")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Campos Adicionales");

                entity.Property(e => e.Format4)
                    .HasColumnName("format4")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Campos Adicionales");

                entity.Property(e => e.Format5)
                    .HasColumnName("format5")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Campos Adicionales");

                entity.Property(e => e.GAlertaF)
                    .HasColumnName("g_alerta_f")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Declaración de Planilla fiscal (Permitir = 0, mostrar mensaje de advertencia = 1, no permitir = 2)");

                entity.Property(e => e.GMoneda)
                    .IsRequired()
                    .HasColumnName("g_moneda")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Moneda Base del Sistema. Antíguo moneda");

                entity.Property(e => e.GMostrarModelo)
                    .HasColumnName("g_mostrar_modelo")
                    .HasComment("Indica si se va mostrar el campo modelo en los artículos y reportes. (False No mostrar, True Si mostrar). Antíguo p_para1 (obsoleto no se usa)");

                entity.Property(e => e.ICostoInventario)
                    .HasColumnName("i_costo_inventario")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Determina el tipo de costo para inventario. 3-UEPS, 2-PEPS, 1-Costo Promedio y Ultimo Costo");

                entity.Property(e => e.IDecCosto)
                    .HasColumnName("i_dec_costo")
                    .HasDefaultValueSql("((2))")
                    .HasComment("Cantidad de Décimales en Costos. Antíguo dec_cost");

                entity.Property(e => e.IDecPrecio)
                    .HasColumnName("i_dec_precio")
                    .HasDefaultValueSql("((2))")
                    .HasComment("Cantidad de Décimales en Precios. Antíguo dec_prec");

                entity.Property(e => e.IDecStock)
                    .HasColumnName("i_dec_stock")
                    .HasDefaultValueSql("((2))")
                    .HasComment("Cantidad de Décimales en existencia. Antíguo cant_art");

                entity.Property(e => e.ILicores)
                    .HasColumnName("i_licores")
                    .HasComment("Indica si maneja impuesto a licores. (False No manjea, True Si maneja). Antíguo p_licores");

                entity.Property(e => e.IManejaLotesVencidos)
                    .HasColumnName("i_maneja_lotes_vencidos")
                    .HasComment("Indica si maneja lote vencido. (False No maneja, True Si maneja). p_lotefec");

                entity.Property(e => e.IManejoArtComp)
                    .HasColumnName("i_manejo_art_comp")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Permiso para modificar definiciones de artículos compuestos con movimientos (0: Permitir, 1: Advertir, 2: Denegar)");

                entity.Property(e => e.IMonedaArticulo)
                    .HasColumnName("i_moneda_articulo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Moneda adicional para costos/precios. Antíguo mone_art");

                entity.Property(e => e.IMultipleMoneda)
                    .HasColumnName("i_multiple_moneda")
                    .HasComment("Indica si maneja múltiples monedas. (False No maneja, True Si maneja). Antíguo p_cyf_dol");

                entity.Property(e => e.IPermitirFecMenorUltInv).HasColumnName("i_permitir_fec_menor_ult_inv");

                entity.Property(e => e.ISerialesArticulo)
                    .HasColumnName("i_seriales_articulo")
                    .HasComment("No permitir el mismo serial en diferentes artículos. (False No lo permite, True Si lo permite). Antíguo p_ser_art");

                entity.Property(e => e.IStockNegativo)
                    .HasColumnName("i_stock_negativo")
                    .HasComment("Indica si la empresa maneja stock negativo. (False No maneja, True Si maneja). Antíguo p_stock_neg");

                entity.Property(e => e.IStockNegativoAdvertencia).HasColumnName("i_stock_negativo_advertencia");

                entity.Property(e => e.ITipoCostDev)
                    .HasColumnName("i_tipo_cost_dev")
                    .HasComment("Tipo de costo para devoluciones. (0.Tradicional, 1.Afecta Promedio). Antíguo tipcosdev");

                entity.Property(e => e.ImpCaja)
                    .HasColumnName("imp_caja")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpCajero)
                    .HasColumnName("imp_cajero")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpNumfac)
                    .HasColumnName("imp_numfac")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpSuc)
                    .HasColumnName("imp_suc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpTurno)
                    .HasColumnName("imp_turno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpVend)
                    .HasColumnName("imp_vend")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LoginAdmin)
                    .HasColumnName("login_admin")
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Usuario del WebService para la integración con Administrativo");

                entity.Property(e => e.LoginCont)
                    .HasColumnName("login_cont")
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Usuario del WebService para la integración con Contabilidad");

                entity.Property(e => e.LoginNom)
                    .HasColumnName("login_nom")
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Usuario del WebService para la integración con Nomina");

                entity.Property(e => e.Logo)
                    .HasColumnName("logo")
                    .HasComment("Logo");

                entity.Property(e => e.LotesDespacho).HasColumnName("lotes_despacho");

                entity.Property(e => e.NetTcpAdmin)
                    .HasColumnName("netTcp_admin")
                    .HasComment("Indica si el producto administrativo usa el protocolo nettcp para la transmisión de mensajes con el servidor");

                entity.Property(e => e.NetTcpCont)
                    .HasColumnName("netTcp_cont")
                    .HasComment("Indica si el producto contabilidad usa el protocolo nettcp para la transmisión de mensajes con el servidor");

                entity.Property(e => e.NetTcpNom)
                    .HasColumnName("netTcp_nom")
                    .HasComment("Indica si el producto nómina usa el protocolo nettcp para la transmisión de mensajes con el servidor");

                entity.Property(e => e.PDescArt).HasColumnName("p_desc_art");

                entity.Property(e => e.PDescCat).HasColumnName("p_desc_cat");

                entity.Property(e => e.PDescGlo).HasColumnName("p_desc_glo");

                entity.Property(e => e.PDescLin).HasColumnName("p_desc_lin");

                entity.Property(e => e.PasswordAdmin)
                    .HasColumnName("password_admin")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Contraseña del WebService para la integración con Administrativo");

                entity.Property(e => e.PasswordCont)
                    .HasColumnName("password_cont")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Contraseña del WebService para la integración con Contabilidad");

                entity.Property(e => e.PasswordNom)
                    .HasColumnName("password_nom")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Contraseña del WebService para la integración con Nomina");

                entity.Property(e => e.PtoEmision)
                    .HasColumnName("pto_emision")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SerialesDespacho).HasColumnName("seriales_despacho");

                entity.Property(e => e.TabNum)
                    .HasColumnName("tab_num")
                    .HasComment("Compatibilidad con versiones anteriores");

                entity.Property(e => e.TamañoImagen).HasColumnName("tamaño_imagen");

                entity.Property(e => e.TempChar1)
                    .HasColumnName("temp_char1")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Parametros Especiales Valor 1");

                entity.Property(e => e.TempChar2)
                    .HasColumnName("temp_char2")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Parametros Especiales Valor 2");

                entity.Property(e => e.TempChar3)
                    .HasColumnName("temp_char3")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Parametros Especiales Valor3");

                entity.Property(e => e.TempChar4)
                    .HasColumnName("temp_char4")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Parametros Especiales Valor 4");

                entity.Property(e => e.TempChar5)
                    .HasColumnName("temp_char5")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Parametros Especiales Valor 5");

                entity.Property(e => e.TempChar6)
                    .HasColumnName("temp_char6")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Parametros Especiales Valor 6");

                entity.Property(e => e.TempChar7)
                    .HasColumnName("temp_char7")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Parametros Especiales Valor 7");

                entity.Property(e => e.TempChar8)
                    .HasColumnName("temp_char8")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Parametros Especiales Valor 8");

                entity.Property(e => e.TempFech)
                    .HasColumnName("temp_fech")
                    .HasColumnType("smalldatetime")
                    .HasComment("Parametros Especiales Fecha");

                entity.Property(e => e.TempNum)
                    .HasColumnName("temp_num")
                    .HasComment("Parametros Especiales Correlativo");

                entity.Property(e => e.Tempor1)
                    .HasColumnName("tempor1")
                    .HasComment("*");

                entity.Property(e => e.TipoImagen)
                    .HasColumnName("tipo_imagen")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoImpProvExt)
                    .HasColumnName("tipo_imp_prov_ext")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Proveedor Extranjero (Tipo de I.V.A.)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.UrlservidorwebAdmin)
                    .HasColumnName("urlservidorweb_admin")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Dirección URL de Sistema Administrativo al cual se va a integrar");

                entity.Property(e => e.UrlservidorwebCont)
                    .HasColumnName("urlservidorweb_cont")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Dirección URL de Sistema de Contabilidad al cual se va a integrar");

                entity.Property(e => e.UrlservidorwebNom)
                    .HasColumnName("urlservidorweb_nom")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Dirección URL de Sistema de Nomina al cual se va a integrar");

                entity.Property(e => e.VCoPais)
                    .HasColumnName("v_co_pais")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VCoSeg)
                    .HasColumnName("v_co_seg")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del segmento por defecto para cliente generico");

                entity.Property(e => e.VCoVen)
                    .HasColumnName("v_co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del Vendedor por defecto para cliente generico");

                entity.Property(e => e.VCoZon)
                    .HasColumnName("v_co_zon")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("codigo de la Zona por defecto para cliente generico");

                entity.Property(e => e.VConceptoDespacho).HasColumnName("v_concepto_despacho");

                entity.Property(e => e.VCondPago)
                    .HasColumnName("v_cond_pago")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la condicion de pago por defecto para cliente generico");

                entity.Property(e => e.VCtaIngEgr)
                    .HasColumnName("v_cta_ing_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuenta de ingreso egreso por defecto para cliente generico");

                entity.Property(e => e.VManejaNcf).HasColumnName("v_maneja_ncf");

                entity.Property(e => e.VManejaSucursales)
                    .HasColumnName("v_maneja_sucursales")
                    .HasComment("Indica si la empresa maneja sucursales  (False No maneja, True Si maneja). Antíguo p_sucursal");

                entity.Property(e => e.VManejoDireccionEntrega).HasColumnName("v_manejo_direccion_entrega");

                entity.Property(e => e.VMaxReng)
                    .HasColumnName("v_max_reng")
                    .HasComment("Cantidad de renglones por factura");

                entity.Property(e => e.VMaxRengTodos)
                    .HasColumnName("v_max_reng_todos")
                    .HasComment("Verificar para todos los documentos cantidad de renglones por factura");

                entity.Property(e => e.VReconv).HasColumnName("v_reconv");

                entity.Property(e => e.VRedondeo)
                    .HasColumnName("v_redondeo")
                    .HasComment("Permite redondeo en las ventas");

                entity.Property(e => e.VTipCli)
                    .HasColumnName("v_tip_cli")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Cliente por defecto para cliente generico");

                entity.Property(e => e.VTipoPer)
                    .HasColumnName("v_tipo_per")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de persona por defecto para cliente generico");

                entity.Property(e => e.VTipoRedondeo)
                    .HasColumnName("v_tipo_redondeo")
                    .HasComment("Tiop de redondeo en ventas (Equitativo = 0, Superior = 1, Inferior = 2)");

                entity.Property(e => e.VValorRedondeo)
                    .HasColumnName("v_valor_redondeo")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CCoSegNavigation)
                    .WithMany(p => p.ParEmpCCoSegNavigation)
                    .HasForeignKey(d => d.CCoSeg)
                    .HasConstraintName("FK_par_emp_saSegmento_C");

                entity.HasOne(d => d.CCoZonNavigation)
                    .WithMany(p => p.ParEmpCCoZonNavigation)
                    .HasForeignKey(d => d.CCoZon)
                    .HasConstraintName("FK_par_emp_saZona_C");

                entity.HasOne(d => d.CCondPagoNavigation)
                    .WithMany(p => p.ParEmpCCondPagoNavigation)
                    .HasForeignKey(d => d.CCondPago)
                    .HasConstraintName("FK_par_emp_saCondicionPago_C");

                entity.HasOne(d => d.CCtaIngEgrNavigation)
                    .WithMany(p => p.ParEmpCCtaIngEgrNavigation)
                    .HasForeignKey(d => d.CCtaIngEgr)
                    .HasConstraintName("FK_par_emp_saCuentaIngEgr_C");

                entity.HasOne(d => d.CTipProNavigation)
                    .WithMany(p => p.ParEmp)
                    .HasForeignKey(d => d.CTipPro)
                    .HasConstraintName("FK_par_emp_saTipoProveedor");

                entity.HasOne(d => d.CoUniPesoNavigation)
                    .WithMany(p => p.ParEmpCoUniPesoNavigation)
                    .HasForeignKey(d => d.CoUniPeso)
                    .HasConstraintName("FK_par_emp_saUnidadPeso");

                entity.HasOne(d => d.CoUniVolumenNavigation)
                    .WithMany(p => p.ParEmpCoUniVolumenNavigation)
                    .HasForeignKey(d => d.CoUniVolumen)
                    .HasConstraintName("FK_par_emp_saUnidadVolumen");

                entity.HasOne(d => d.VCoSegNavigation)
                    .WithMany(p => p.ParEmpVCoSegNavigation)
                    .HasForeignKey(d => d.VCoSeg)
                    .HasConstraintName("FK_par_emp_saSegmento_V");

                entity.HasOne(d => d.VCoVenNavigation)
                    .WithMany(p => p.ParEmp)
                    .HasForeignKey(d => d.VCoVen)
                    .HasConstraintName("FK_par_emp_saVendedor");

                entity.HasOne(d => d.VCoZonNavigation)
                    .WithMany(p => p.ParEmpVCoZonNavigation)
                    .HasForeignKey(d => d.VCoZon)
                    .HasConstraintName("FK_par_emp_saZona_V");

                entity.HasOne(d => d.VCondPagoNavigation)
                    .WithMany(p => p.ParEmpVCondPagoNavigation)
                    .HasForeignKey(d => d.VCondPago)
                    .HasConstraintName("FK_par_emp_saCondicionPago_V");

                entity.HasOne(d => d.VCtaIngEgrNavigation)
                    .WithMany(p => p.ParEmpVCtaIngEgrNavigation)
                    .HasForeignKey(d => d.VCtaIngEgr)
                    .HasConstraintName("FK_par_emp_saCuentaIngEgr_V");

                entity.HasOne(d => d.VTipCliNavigation)
                    .WithMany(p => p.ParEmp)
                    .HasForeignKey(d => d.VTipCli)
                    .HasConstraintName("FK_par_emp_saTipoCliente");
            });

            modelBuilder.Entity<PvArticuloExt>(entity =>
            {
                entity.ToTable("pvArticuloExt");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campoobligatorio).HasColumnName("campoobligatorio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descriprenglon)
                    .HasColumnName("descriprenglon")
                    .HasComment("Indica si Posee Descripcion Adicional");

                entity.Property(e => e.Descriprenglontxt)
                    .IsRequired()
                    .HasColumnName("descriprenglontxt")
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasComment("Descripción del Comentario Adicional si posee");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.PvArticuloExt)
                    .HasPrincipalKey<SaArticulo>(p => p.Rowguid)
                    .HasForeignKey<PvArticuloExt>(d => d.Id)
                    .HasConstraintName("FK_pvArticuloExt_saArticulo");
            });

            modelBuilder.Entity<PvCaja>(entity =>
            {
                entity.HasKey(e => e.CodCaja);

                entity.ToTable("pvCaja");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_pvCaja");

                entity.Property(e => e.CodCaja)
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Caja");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Gavetaser)
                    .HasColumnName("gavetaser")
                    .HasComment("Existe gaveta");

                entity.Property(e => e.Mvisa).HasColumnName("mvisa");

                entity.Property(e => e.Puerto)
                    .HasColumnName("puerto")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Puerto para impresora");

                entity.Property(e => e.Puerto2)
                    .HasColumnName("puerto2")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Puerto para display");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Sidisplay)
                    .HasColumnName("sidisplay")
                    .HasComment("Existe display");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Vpostipo)
                    .HasColumnName("vpostipo")
                    .HasComment("Tipo de VPos (Megasoft, Creditcard, Novared)");

                entity.HasOne(d => d.CodCajaNavigation)
                    .WithOne(p => p.PvCaja)
                    .HasForeignKey<PvCaja>(d => d.CodCaja)
                    .HasConstraintName("FK_saCaja_pvCaja");
            });

            modelBuilder.Entity<PvCobroExt>(entity =>
            {
                entity.HasKey(e => e.RowguidCobNum);

                entity.ToTable("pvCobroExt");

                entity.Property(e => e.RowguidCobNum)
                    .HasColumnName("rowguid_cob_num")
                    .HasComment("Identificador único (Tabla saCobro)")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidNumTurno)
                    .HasColumnName("rowguid_num_turno")
                    .HasComment("Identificador único (Tabla pvTurnoExe)");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidCobNumNavigation)
                    .WithOne(p => p.PvCobroExt)
                    .HasPrincipalKey<SaCobro>(p => p.Rowguid)
                    .HasForeignKey<PvCobroExt>(d => d.RowguidCobNum)
                    .HasConstraintName("FK_pvCobroExt_saCobro");

                entity.HasOne(d => d.RowguidNumTurnoNavigation)
                    .WithMany(p => p.PvCobroExt)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidNumTurno)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvCobroExt_pvTurnoExe");
            });

            modelBuilder.Entity<PvCobroTprengExt>(entity =>
            {
                entity.HasKey(e => e.RowguidCobNum);

                entity.ToTable("pvCobroTPRengExt");

                entity.Property(e => e.RowguidCobNum)
                    .HasColumnName("rowguid_cob_num")
                    .HasComment("Numero de Cobro asociado ")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Observacion)
                    .HasColumnName("observacion")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("Observación");

                entity.Property(e => e.PuntoClave)
                    .HasColumnName("puntoClave")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("Información Adicional en los Reglones de Tipo de PaGO- en Tarjeta");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidCobNumNavigation)
                    .WithOne(p => p.PvCobroTprengExt)
                    .HasPrincipalKey<SaCobroTpreng>(p => p.Rowguid)
                    .HasForeignKey<PvCobroTprengExt>(d => d.RowguidCobNum)
                    .HasConstraintName("FK_pvCobroTPRengExt_saCobroTPReng");
            });

            modelBuilder.Entity<PvConfigPuntoV>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("pvConfigPuntoV");

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_pvConfigPuntoV")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la configuración de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del mapa al que aplica la configuración");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario al que aplica la configuración");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la configuración de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Único");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuración de reglas de negocio de pantallas (Formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<PvConfigPuntoVprecio>(entity =>
            {
                entity.HasKey(e => new { e.CoConfig, e.CoPrecio });

                entity.ToTable("pvConfigPuntoVPrecio");

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identificador único (Tabla pvConfigPuntoV)");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identificador único (Tabla saTipoPrecio)");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Idenfiticador Único");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoConfigNavigation)
                    .WithMany(p => p.PvConfigPuntoVprecio)
                    .HasForeignKey(d => d.CoConfig)
                    .HasConstraintName("FK_pvConfigPuntoVPrecio_pvConfigPuntoV");

                entity.HasOne(d => d.CoPrecioNavigation)
                    .WithMany(p => p.PvConfigPuntoVprecio)
                    .HasForeignKey(d => d.CoPrecio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvConfigPuntoVPrecio_saTipoPrecio");
            });

            modelBuilder.Entity<PvDenominacionesMoneda>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pvDenominacionesMoneda");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Inactivo)
                    .IsRequired()
                    .HasColumnName("inactivo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identifica si esta Inactivo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Valor)
                    .HasColumnName("valor")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Valor de la Moneda");
            });

            modelBuilder.Entity<PvDevolucionClienteExt>(entity =>
            {
                entity.HasKey(e => e.RowguidDocNum);

                entity.ToTable("pvDevolucionClienteExt");

                entity.Property(e => e.RowguidDocNum)
                    .HasColumnName("rowguid_doc_num")
                    .HasComment("Identificador único (Tabla saDevolucionCliente)")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidNumTurno)
                    .HasColumnName("rowguid_num_turno")
                    .HasComment("Identificador único (Tabla pvTurnoExe)");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidDocNumNavigation)
                    .WithOne(p => p.PvDevolucionClienteExt)
                    .HasPrincipalKey<SaDevolucionCliente>(p => p.Rowguid)
                    .HasForeignKey<PvDevolucionClienteExt>(d => d.RowguidDocNum)
                    .HasConstraintName("FK_pvDevolucionClienteExt_saDevolucionCliente");

                entity.HasOne(d => d.RowguidNumTurnoNavigation)
                    .WithMany(p => p.PvDevolucionClienteExt)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidNumTurno)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvDevolucionClienteExt_pvTurnoExe");
            });

            modelBuilder.Entity<PvEtiquetaBalanza>(entity =>
            {
                entity.HasKey(e => e.CoEtiqueta);

                entity.ToTable("pvEtiquetaBalanza");

                entity.Property(e => e.CoEtiqueta)
                    .HasColumnName("co_etiqueta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la etiqueta");

                entity.Property(e => e.Activo)
                    .HasColumnName("activo")
                    .HasComment("Identifica si esta Activo");

                entity.Property(e => e.Adic)
                    .HasColumnName("adic")
                    .HasComment("Número de dígitos adicionales de la etiqueta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.Cod)
                    .HasColumnName("cod")
                    .HasComment("Número de dígitos del código de la etiqueta");

                entity.Property(e => e.Dec)
                    .HasColumnName("dec")
                    .HasComment("Número de dígitos decimales de la etiqueta");

                entity.Property(e => e.DesEtiqueta)
                    .IsRequired()
                    .HasColumnName("des_etiqueta")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Decripción de la etiqueta");

                entity.Property(e => e.Ent)
                    .HasColumnName("ent")
                    .HasComment("Número de dígitos enteros de la etiqueta");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Pre)
                    .HasColumnName("pre")
                    .HasComment("Número de dígitos del prefijo de la etiqueta");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.Suf)
                    .HasColumnName("suf")
                    .HasComment("Número de dígitos del sufijo de la etiqueta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PvFacturaVentaExt>(entity =>
            {
                entity.HasKey(e => e.RowguidDocNum);

                entity.ToTable("pvFacturaVentaExt");

                entity.HasIndex(e => new { e.Estado, e.RowguidDocNum, e.RowguidNumTurno })
                    .HasName("UK_pvFacturaVentaExt");

                entity.Property(e => e.RowguidDocNum)
                    .HasColumnName("rowguid_doc_num")
                    .HasComment("Identificador único (Tabla saFacturaVenta)")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasColumnName("estado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("'E' = En espera, 'N', = No Procesado, 'P' = 'Procesado'");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.RowguidNumTurno)
                    .HasColumnName("rowguid_num_turno")
                    .HasComment("Identificador único (Tabla pvTurnoExe)");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidDocNumNavigation)
                    .WithOne(p => p.PvFacturaVentaExt)
                    .HasPrincipalKey<SaFacturaVenta>(p => p.Rowguid)
                    .HasForeignKey<PvFacturaVentaExt>(d => d.RowguidDocNum)
                    .HasConstraintName("FK_pvFacturaVentaExt_saFacturaVenta");

                entity.HasOne(d => d.RowguidNumTurnoNavigation)
                    .WithMany(p => p.PvFacturaVentaExt)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidNumTurno)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvFacturaVentaExt_pvTurnoExe");
            });

            modelBuilder.Entity<PvMovimientoBancoExt>(entity =>
            {
                entity.HasKey(e => e.RowguidMovNum);

                entity.ToTable("pvMovimientoBancoExt");

                entity.HasIndex(e => e.RowguidMovNum)
                    .HasName("UK_pvMovimientoBancoExt")
                    .IsUnique();

                entity.Property(e => e.RowguidMovNum)
                    .HasColumnName("rowguid_mov_num")
                    .HasComment("Indicador único (Tabla saMovimientoCaja)")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.RowguidNumTurno)
                    .HasColumnName("rowguid_num_turno")
                    .HasComment("Indicador único (Tabla pvTurnoExe)");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidMovNumNavigation)
                    .WithOne(p => p.PvMovimientoBancoExt)
                    .HasPrincipalKey<SaMovimientoBanco>(p => p.Rowguid)
                    .HasForeignKey<PvMovimientoBancoExt>(d => d.RowguidMovNum)
                    .HasConstraintName("FK_pvMovimientoBancoExt_saMovimientoBanco");
            });

            modelBuilder.Entity<PvMovimientoCajaDevolucionExt>(entity =>
            {
                entity.HasKey(e => e.Rowguid);

                entity.ToTable("pvMovimientoCajaDevolucionExt");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.RowguidMovNum)
                    .HasColumnName("rowguid_mov_num")
                    .HasComment("Indicador único (Tabla saMovimientoCaja)");

                entity.Property(e => e.RowguidNroDoc)
                    .HasColumnName("rowguid_nro_doc")
                    .HasComment("Indicador único (Tabla saDocumentoVenta)");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidMovNumNavigation)
                    .WithMany(p => p.PvMovimientoCajaDevolucionExt)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidMovNum)
                    .HasConstraintName("FK_pvMovimientoCajaDevolucionExt_saMovimientoCaja");

                entity.HasOne(d => d.RowguidNroDocNavigation)
                    .WithMany(p => p.PvMovimientoCajaDevolucionExt)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidNroDoc)
                    .HasConstraintName("FK_pvMovimientoCajaDevolucionExt_saDocumentoVenta");
            });

            modelBuilder.Entity<PvMovimientoCajaExt>(entity =>
            {
                entity.HasKey(e => e.RowguidMovNum);

                entity.ToTable("pvMovimientoCajaExt");

                entity.Property(e => e.RowguidMovNum)
                    .HasColumnName("rowguid_mov_num")
                    .HasComment("Indicador único (Tabla saMovimientoCaja)")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.RowguidMovCajGen).HasColumnName("rowguid_mov_caj_gen");

                entity.Property(e => e.RowguidNumTurno)
                    .HasColumnName("rowguid_num_turno")
                    .HasComment("Indicador único (Tabla pvTurnoExe)");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidMovNumNavigation)
                    .WithOne(p => p.PvMovimientoCajaExt)
                    .HasPrincipalKey<SaMovimientoCaja>(p => p.Rowguid)
                    .HasForeignKey<PvMovimientoCajaExt>(d => d.RowguidMovNum)
                    .HasConstraintName("FK_pvMovimientoCajaExt_saMovimientoCaja");

                entity.HasOne(d => d.RowguidNumTurnoNavigation)
                    .WithMany(p => p.PvMovimientoCajaExt)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidNumTurno)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvMovimientoCajaExt_pvTurnoExe");
            });

            modelBuilder.Entity<PvParEmp>(entity =>
            {
                entity.HasKey(e => e.CodEmp)
                    .HasName("PK_pv_Par_Emp_A");

                entity.ToTable("pvParEmp");

                entity.Property(e => e.CodEmp)
                    .HasColumnName("cod_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la empresa");

                entity.Property(e => e.AutorizaDevEfect)
                    .HasColumnName("autoriza_dev_efect")
                    .HasComment("Solicitar autorización para devoluciones de dinero en efectivo");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de ingreso/egreso a transferir (Tabla saCuentaIngEgr)");

                entity.Property(e => e.CoCtaIngrEgrBanco)
                    .HasColumnName("co_cta_ingr_egr_banco")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCtaIngrEgrFacDev)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr_FacDev")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de ingreso/egreso a Factura y Devolución");

                entity.Property(e => e.CoImagen)
                    .HasColumnName("co_imagen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la imagen");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.CodCaja)
                    .IsRequired()
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código caja principal a transferir");

                entity.Property(e => e.CodUsu)
                    .IsRequired()
                    .HasColumnName("cod_usu")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código Superusuario");

                entity.Property(e => e.DescripImagen)
                    .HasColumnName("descrip_imagen")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Menor resolución de la imagen");

                entity.Property(e => e.DevCheque)
                    .HasColumnName("dev_cheque")
                    .HasComment("Permitir devolución de dinero con cobros hechos en cheque");

                entity.Property(e => e.DevEfectivo)
                    .HasColumnName("dev_efectivo")
                    .HasComment("Permitir devolución de dinero con cobros hechos en efectivo");

                entity.Property(e => e.DevNcr)
                    .HasColumnName("dev_ncr")
                    .HasComment("Permitir devolución de dinero con cobros hechos con notas de cédito");

                entity.Property(e => e.DevTarjeta)
                    .HasColumnName("dev_tarjeta")
                    .HasComment("Permitir devolución de dinero con cobros hechos con tarjetas");

                entity.Property(e => e.DevVale)
                    .HasColumnName("dev_vale")
                    .HasComment("Permitir devolución de dinero con cobros hechos con vales de alimentación");

                entity.Property(e => e.DiasMaxDev)
                    .HasColumnName("dias_max_dev")
                    .HasComment("Días máximos para devolución");

                entity.Property(e => e.EtiquetaImpuesto)
                    .HasColumnName("etiqueta_impuesto")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasComment("Identificación del nombre del impuesto a mostrar, dependiendo de la configuración regional de la aplicación");

                entity.Property(e => e.ExpreRegEmailEjm)
                    .HasColumnName("expre_reg_email_ejm")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasComment("ejemplo de expresion regular para email");

                entity.Property(e => e.ExpreRegEmailVal)
                    .HasColumnName("expre_reg_email_val")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Indica la expresion regular usada para el campo email");

                entity.Property(e => e.ExpreRegTelefEjm)
                    .HasColumnName("expre_reg_telef_ejm")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasComment("ejemplo de expresion regular para telefono");

                entity.Property(e => e.ExpreRegTelefVal)
                    .HasColumnName("expre_reg_telef_val")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Indica la expresion regular usada para el campo teléfono");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.FpCheque)
                    .HasColumnName("fp_cheque")
                    .HasComment("Permitir cheque como forma de pago");

                entity.Property(e => e.FpDeposito).HasColumnName("fp_deposito");

                entity.Property(e => e.FpEfectivo)
                    .HasColumnName("fp_efectivo")
                    .HasComment("Permitir efectivo como forma de paGO-");

                entity.Property(e => e.FpTarjc)
                    .HasColumnName("fp_tarjc")
                    .HasComment("Permitir tarjeta de crédito como forma de pago");

                entity.Property(e => e.FpTarjd)
                    .HasColumnName("fp_tarjd")
                    .HasComment("Permitir tarjeta de débito como forma de pago");

                entity.Property(e => e.FpTransferencia).HasColumnName("fp_transferencia");

                entity.Property(e => e.FpVale)
                    .HasColumnName("fp_vale")
                    .HasComment("Permitir vale de alimentación como forma de pago");

                entity.Property(e => e.LogoEmpresa)
                    .HasColumnName("logo_empresa")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Logo Empresa");

                entity.Property(e => e.ManTurno)
                    .HasColumnName("man_turno")
                    .HasComment("Punto de Venta Maneja turno");

                entity.Property(e => e.ManejoIdentificadores)
                    .HasColumnName("manejo_identificadores")
                    .HasComment("Permitir manejo de identificadores");

                entity.Property(e => e.MontoMaxDev)
                    .HasColumnName("monto_max_dev")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto máximo en devoluciones");

                entity.Property(e => e.MontoMaxVuelto)
                    .HasColumnName("monto_max_vuelto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto máximo para el vuelto");

                entity.Property(e => e.MontoMinCheque)
                    .HasColumnName("monto_min_cheque")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto mínimo aceptado para pagos efectuados con cheque");

                entity.Property(e => e.MontoMinDeposito)
                    .HasColumnName("monto_min_deposito")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoMinDev)
                    .HasColumnName("monto_min_dev")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto mínimo en devoluciones");

                entity.Property(e => e.MontoMinTarjc)
                    .HasColumnName("monto_min_tarjc")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto mínimo aceptado para pagos efectuados con tarjeta de crédito");

                entity.Property(e => e.MontoMinTarjd)
                    .HasColumnName("monto_min_tarjd")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto mínimo aceptado para pagos efectuados con tarjeta de débito");

                entity.Property(e => e.MontoMinTransferencia)
                    .HasColumnName("monto_min_transferencia")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.TfCaja)
                    .HasColumnName("tf_caja")
                    .HasComment("Mostrar configuración Caja");

                entity.Property(e => e.TfCajero)
                    .HasColumnName("tf_cajero")
                    .HasComment("Mostrar configuración Cajero");

                entity.Property(e => e.TfConsecutivos)
                    .HasColumnName("tf_consecutivos")
                    .HasComment("Mostrar configuración Consecutivos");

                entity.Property(e => e.TfNumItems)
                    .HasColumnName("tf_num_items")
                    .HasComment("Mostrar número de items");

                entity.Property(e => e.TfNumTurno)
                    .HasColumnName("tf_num_turno")
                    .HasComment("Mostrar configuración Número de Turno");

                entity.Property(e => e.TfSucursal)
                    .HasColumnName("tf_sucursal")
                    .HasComment("Mostrar configuración Sucursal");

                entity.Property(e => e.TfVendedor)
                    .HasColumnName("tf_vendedor")
                    .HasComment("Mostrar configuración Vendedor");

                entity.Property(e => e.TipoCliente)
                    .IsRequired()
                    .HasColumnName("tipo_cliente")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de cliente usado como referencia para la consulta de precios");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.UsoNcr)
                    .HasColumnName("uso_ncr")
                    .HasComment("Permitir uso de notas de crédito");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.PvParEmpCoCtaIngrEgrNavigation)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvParEmpA_saCuentaIngEgr");

                entity.HasOne(d => d.CoCtaIngrEgrFacDevNavigation)
                    .WithMany(p => p.PvParEmpCoCtaIngrEgrFacDevNavigation)
                    .HasForeignKey(d => d.CoCtaIngrEgrFacDev)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvParEmp_saCuentaIngEgrFacDev");

                entity.HasOne(d => d.CodCajaNavigation)
                    .WithMany(p => p.PvParEmp)
                    .HasForeignKey(d => d.CodCaja)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvParEmpA_saCaja");
            });

            modelBuilder.Entity<PvRenglonTicket>(entity =>
            {
                entity.HasKey(e => new { e.CobNum, e.RengNum, e.RengNumVale, e.CoVale });

                entity.ToTable("pvRenglonTicket");

                entity.Property(e => e.CobNum)
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identificador del cobro (Tabla saCobro)");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Número de renglón del cobro asociado");

                entity.Property(e => e.RengNumVale)
                    .HasColumnName("reng_num_vale")
                    .HasComment("Renglón del tipo de cestaticket (Tabla pvValeAlimentacionReng)");

                entity.Property(e => e.CoVale)
                    .HasColumnName("co_vale")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identificador de Cestaticket (Tabla pvValeAlimentacionReng)");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasComment("Cantidad de cestatickets");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SaCobroTpreng)
                    .WithMany(p => p.PvRenglonTicket)
                    .HasForeignKey(d => new { d.RengNum, d.CobNum })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvRenglonTicket_saCobroTPReng");

                entity.HasOne(d => d.PvValeAlimentacionReng)
                    .WithMany(p => p.PvRenglonTicket)
                    .HasForeignKey(d => new { d.RengNumVale, d.CoVale })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvRenglonTicket_pvValeAlimentacionReng");
            });

            modelBuilder.Entity<PvTarjetaCreditoExt>(entity =>
            {
                entity.HasKey(e => e.RowguidCoTar);

                entity.ToTable("pvTarjetaCreditoExt");

                entity.Property(e => e.RowguidCoTar)
                    .HasColumnName("rowguid_co_tar")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Codigo de Tarjeta asociado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.RowguidCoTipoTar)
                    .HasColumnName("rowguid_co_tipo_tar")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Codigo Tipo de Tarjeta");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidCoTarNavigation)
                    .WithOne(p => p.PvTarjetaCreditoExt)
                    .HasPrincipalKey<SaTarjetaCredito>(p => p.Rowguid)
                    .HasForeignKey<PvTarjetaCreditoExt>(d => d.RowguidCoTar)
                    .HasConstraintName("FK_pvTarjetaCreditoExt_saTarjetaCredito");

                entity.HasOne(d => d.RowguidCoTipoTarNavigation)
                    .WithMany(p => p.PvTarjetaCreditoExt)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidCoTipoTar)
                    .HasConstraintName("FK_pvTarjetaCreditoExt_pvTipoTarjeta");
            });

            modelBuilder.Entity<PvTipoTarjeta>(entity =>
            {
                entity.HasKey(e => e.TipoTarjeta);

                entity.ToTable("pvTipoTarjeta");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_pvTipoTarjeta")
                    .IsUnique();

                entity.Property(e => e.TipoTarjeta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("Codigo del Tipo de Tarjeta para Vpos");

                entity.Property(e => e.DescripcionTipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Descripcion del Tipo de Tarjeta para Vpos");

                entity.Property(e => e.Rowguid)
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");
            });

            modelBuilder.Entity<PvTurno>(entity =>
            {
                entity.HasKey(e => e.CoTurno);

                entity.ToTable("pvTurno");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_pvTurno_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoTurno)
                    .HasColumnName("co_turno")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del turno");

                entity.Property(e => e.AmpmFin)
                    .IsRequired()
                    .HasColumnName("ampm_fin")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("AM/PM finalización");

                entity.Property(e => e.AmpmIni)
                    .IsRequired()
                    .HasColumnName("ampm_ini")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("AM/PM inicio");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.DesTurno)
                    .IsRequired()
                    .HasColumnName("des_turno")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del turno");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.HoraFin)
                    .HasColumnName("hora_fin")
                    .HasComment("Hora de finalización");

                entity.Property(e => e.HoraIni)
                    .HasColumnName("hora_ini")
                    .HasComment("Hora de inicio");

                entity.Property(e => e.MinuFin)
                    .HasColumnName("minu_fin")
                    .HasComment("Minuto de finalización");

                entity.Property(e => e.MinuIni)
                    .HasColumnName("minu_ini")
                    .HasComment("Minuto de inicio");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PvTurnoExe>(entity =>
            {
                entity.HasKey(e => new { e.NumTurno, e.CoTurno });

                entity.ToTable("pvTurnoExe");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saTurnoExe_rowguid")
                    .IsUnique();

                entity.Property(e => e.NumTurno)
                    .HasColumnName("num_turno")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de Turno");

                entity.Property(e => e.CoTurno)
                    .HasColumnName("co_turno")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del turno asociado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.CodCaja)
                    .IsRequired()
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la caja asociada");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.FechaFin)
                    .HasColumnName("fecha_fin")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de finalización");

                entity.Property(e => e.FechaIni)
                    .HasColumnName("fecha_ini")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de inicio ");

                entity.Property(e => e.Restringe)
                    .HasColumnName("restringe")
                    .HasComment("Restringir el turno por horario");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Saldo del turno");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("C-->Cerrado / A-->Activo / E--> En espera / N-->No usado");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.UserCaj)
                    .IsRequired()
                    .HasColumnName("user_caj")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código usuario Cajero");

                entity.Property(e => e.UserSup)
                    .IsRequired()
                    .HasColumnName("user_sup")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código usuario Supervisor");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoTurnoNavigation)
                    .WithMany(p => p.PvTurnoExe)
                    .HasForeignKey(d => d.CoTurno)
                    .HasConstraintName("FK_pvTurnoExe_pvTurno");

                entity.HasOne(d => d.CodCajaNavigation)
                    .WithMany(p => p.PvTurnoExe)
                    .HasForeignKey(d => d.CodCaja)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pvTurnoExe_saCaja");
            });

            modelBuilder.Entity<PvValeAlimentacion>(entity =>
            {
                entity.HasKey(e => e.CoVale);

                entity.ToTable("pvValeAlimentacion");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_pvValeAlimentacion_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoVale)
                    .HasColumnName("co_vale")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Vale Alimentación ");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.Comision)
                    .HasColumnName("comision")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de Comisión del Vale Alimentacion");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Imagen)
                    .HasColumnName("imagen")
                    .HasComment("Imagen");

                entity.Property(e => e.Impuesto)
                    .HasColumnName("impuesto")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de Impuesto del Vale Alimentacion");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indicativo de registro inactivo");

                entity.Property(e => e.Recargo)
                    .HasColumnName("recargo")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de recargo del Vale Alimentacion");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para el sistema");

                entity.Property(e => e.ValeDescrip)
                    .IsRequired()
                    .HasColumnName("vale_descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Vale Alimentación");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado para el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PvValeAlimentacionReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.CoVale })
                    .IsClustered(false);

                entity.ToTable("pvValeAlimentacionReng");

                entity.HasIndex(e => e.CoVale);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_pvValeAlimentacionReng_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Valor);

                entity.HasIndex(e => new { e.CoVale, e.Valor })
                    .HasName("UK_pvValeAlimentacionReng")
                    .IsUnique();

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Número del renglón");

                entity.Property(e => e.CoVale)
                    .HasColumnName("co_vale")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código Vale Alimentación");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de última modificación del registro");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indica si la denominacion del CestaTicket se encuentra o no activa");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado para el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Valor)
                    .HasColumnName("valor")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Valor del Vale Alimentación");

                entity.HasOne(d => d.CoValeNavigation)
                    .WithMany(p => p.PvValeAlimentacionReng)
                    .HasForeignKey(d => d.CoVale)
                    .HasConstraintName("FK_pvValeAlimentacionReng_pvValeAlimentacion");
            });

            modelBuilder.Entity<PvVcaja>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("pvVCaja");

                entity.Property(e => e.AuxImp01)
                    .HasColumnName("aux_imp01")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AuxImp02)
                    .HasColumnName("aux_imp02")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCaja)
                    .IsRequired()
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .IsRequired()
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Gavetaser).HasColumnName("gavetaser");

                entity.Property(e => e.Inactivo).HasColumnName("inactivo");

                entity.Property(e => e.MesIni)
                    .HasColumnName("mes_ini")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Mvisa).HasColumnName("mvisa");

                entity.Property(e => e.Numcom).HasColumnName("numcom");

                entity.Property(e => e.Puerto)
                    .HasColumnName("puerto")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Puerto2)
                    .HasColumnName("puerto2")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Sidisplay).HasColumnName("sidisplay");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Vpostipo).HasColumnName("vpostipo");
            });

            modelBuilder.Entity<PvvSaSeriesAjpa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("pvv_saSeriesAJPA");

                entity.Property(e => e.CoConsecutivo)
                    .IsRequired()
                    .HasColumnName("co_consecutivo")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PvvSaSeriesCobro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("pvv_saSeriesCobro");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PvvSaSeriesMovBanco>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("pvv_saSeriesMovBanco");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PvvSaSeriesMovCaja>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("pvv_saSeriesMovCaja");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SaAdiCampo>(entity =>
            {
                entity.HasKey(e => new { e.CoAdigrupo, e.CoAdicampo });

                entity.ToTable("saAdiCampo");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saAdiCampo_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoAdigrupo)
                    .HasColumnName("co_adigrupo")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de grupo de campos adicionales");

                entity.Property(e => e.CoAdicampo)
                    .HasColumnName("co_adicampo")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de campo adicional");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesAdicampo)
                    .HasColumnName("des_adicampo")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de campo adicional");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Fijo)
                    .HasColumnName("fijo")
                    .HasComment("Registro del sistema");

                entity.Property(e => e.Observacion)
                    .HasColumnName("observacion")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("Observacion");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Tipo)
                    .HasColumnName("tipo")
                    .HasComment("Tipo de dato 1: Alfanumerico, 2: Fecha, 3: Numerico, 4: Entero (fijo=TDA)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.ValDecimal)
                    .HasColumnName("val_decimal")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Valor tipo decimal");

                entity.Property(e => e.ValEntero)
                    .HasColumnName("val_entero")
                    .HasComment("Valor tipo entero");

                entity.Property(e => e.ValFecha)
                    .HasColumnName("val_fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Valor tipo fecha");

                entity.Property(e => e.ValStr)
                    .HasColumnName("val_str")
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasComment("Valor tipo alfanumerico (string)");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAdigrupoNavigation)
                    .WithMany(p => p.SaAdiCampo)
                    .HasForeignKey(d => d.CoAdigrupo)
                    .HasConstraintName("FK_saAdiCampo_saAdiGrupo");
            });

            modelBuilder.Entity<SaAdiGrupo>(entity =>
            {
                entity.HasKey(e => e.CoAdigrupo);

                entity.ToTable("saAdiGrupo");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saAdiGrupo_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoAdigrupo)
                    .HasColumnName("co_adigrupo")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de grupo de campos adicionales");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesAdigrupo)
                    .HasColumnName("des_adigrupo")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de grupo de campos adicionales");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaAjPrecioCostoAuto>(entity =>
            {
                entity.HasKey(e => e.CodAjuste);

                entity.ToTable("saAjPrecioCostoAuto");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saAjPrecioCostoAuto_rowguid")
                    .IsUnique();

                entity.Property(e => e.CodAjuste)
                    .HasColumnName("cod_ajuste")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del ajuste de precio/costo");

                entity.Property(e => e.BasadoEn)
                    .HasColumnName("basado_en")
                    .HasComment("Indica si se actualizan los precios del artículo o rango de artículos tomando como base un tipo de costo en específico a determinada fecha y/o en un almacén en particular.");

                entity.Property(e => e.BasadoEnCoAlma)
                    .HasColumnName("basado_en_co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Almacén a considerar para el cálculo del costo del artículo o rando de artículos");

                entity.Property(e => e.BasadoEnCosto)
                    .HasColumnName("basado_en_costo")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de costo en el cual se basa el ajuste del precio");

                entity.Property(e => e.BasadoEnFecha)
                    .HasColumnName("basado_en_fecha")
                    .HasColumnType("datetime")
                    .HasComment("Fecha a la cual se realizará el cálculo de costo del artículo o rango de artículos");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArtDesde)
                    .HasColumnName("co_art_desde")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArtHasta)
                    .HasColumnName("co_art_hasta")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCatDesde)
                    .HasColumnName("co_cat_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCatHasta)
                    .HasColumnName("co_cat_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLinDesde)
                    .HasColumnName("co_lin_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLinHasta)
                    .HasColumnName("co_lin_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProvDesde)
                    .HasColumnName("co_prov_desde")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProvHasta)
                    .HasColumnName("co_prov_hasta")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSublDesde)
                    .HasColumnName("co_subl_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSublHasta)
                    .HasColumnName("co_subl_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Condicion1)
                    .HasColumnName("condicion1")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Condicion2)
                    .HasColumnName("condicion2")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesAjuste)
                    .HasColumnName("des_ajuste")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion del ajuste de precio/costo");

                entity.Property(e => e.Factor)
                    .HasColumnName("factor")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemDesde)
                    .HasColumnName("item_desde")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ItemHasta)
                    .HasColumnName("item_hasta")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MargenInferior)
                    .HasColumnName("margen_inferior")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("1: Tomar el margen de ganancia mínimo, 2: No tomar en cuenta el mínimo de ganancia, 3: No realizar ajuste");

                entity.Property(e => e.MargenSuperior)
                    .HasColumnName("margen_superior")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("1: Tomar el margen de ganancia máximo, 2: No tomar en cuenta el máximo de ganancia, 3: No realizar ajuste");

                entity.Property(e => e.Metodo)
                    .HasColumnName("metodo")
                    .HasComment("1: incremento, 2: disminucion, 3: reemplazo");

                entity.Property(e => e.OperadorLogico)
                    .HasColumnName("operador_logico")
                    .HasComment("1: Y, 0: O");

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Redondeo).HasColumnName("redondeo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoAjuste)
                    .HasColumnName("tipo_ajuste")
                    .HasComment("Tipo de Ajuste 0: Precio, 1: Costo");

                entity.Property(e => e.TipoAjusteCosto)
                    .HasColumnName("tipo_ajuste_costo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoAjustePrecio)
                    .HasColumnName("tipo_ajuste_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCalculo)
                    .HasColumnName("tipo_calculo")
                    .HasComment("1: Monto, 2: Porcentaje, 3: Margen ganancia min, 4: Margen ganancia max");

                entity.Property(e => e.TipoRedondeo)
                    .HasColumnName("tipo_redondeo")
                    .HasComment("1: Equitativo, 2: Superior, 3: Inferior");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Valor)
                    .HasColumnName("valor")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValorCondicion1)
                    .HasColumnName("valor_condicion1")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValorCondicion2)
                    .HasColumnName("valor_condicion2")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValorRedondeo)
                    .HasColumnName("valor_redondeo")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VigenciaDesde)
                    .HasColumnName("vigencia_desde")
                    .HasColumnType("datetime");

                entity.Property(e => e.VigenciaHasta)
                    .HasColumnName("vigencia_hasta")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.BasadoEnCoAlmaNavigation)
                    .WithMany(p => p.SaAjPrecioCostoAuto)
                    .HasForeignKey(d => d.BasadoEnCoAlma)
                    .HasConstraintName("FK_saAjPrecioCostoAuto_saAlmacen");
            });

            modelBuilder.Entity<SaAjPrecioCostoM>(entity =>
            {
                entity.HasKey(e => e.CodAjuste);

                entity.ToTable("saAjPrecioCostoM");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saAjPrecioCostoM_rowguid")
                    .IsUnique();

                entity.Property(e => e.CodAjuste)
                    .HasColumnName("cod_ajuste")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del ajuste de precio/costo");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArtDesde)
                    .HasColumnName("co_art_desde")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArtHasta)
                    .HasColumnName("co_art_hasta")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCat)
                    .HasColumnName("co_cat")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Categoria");

                entity.Property(e => e.CoLin)
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Linea");

                entity.Property(e => e.CoProv)
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSubl)
                    .HasColumnName("co_subl")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Sub Linea");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesAjuste)
                    .HasColumnName("des_ajuste")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion del ajuste de precio/costo");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.Item)
                    .HasColumnName("item")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MargenInferior)
                    .HasColumnName("margen_inferior")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("");

                entity.Property(e => e.MargenSuperior)
                    .HasColumnName("margen_superior")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("");

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoAjuste)
                    .HasColumnName("tipo_ajuste")
                    .HasComment("Tipo de Ajuste 0: Precio, 1: Costo");

                entity.Property(e => e.TipoAjusteCosto)
                    .HasColumnName("tipo_ajuste_costo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoAjustePrecio)
                    .HasColumnName("tipo_ajuste_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaAjPrecioCostoReng>(entity =>
            {
                entity.HasKey(e => new { e.CodAjuste, e.RengNum });

                entity.ToTable("saAjPrecioCostoReng");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saAjPrecioCostoReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.CodAjuste)
                    .HasColumnName("cod_ajuste")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del ajuste de precio/costo");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Desde)
                    .HasColumnName("desde")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Hasta)
                    .HasColumnName("hasta")
                    .HasColumnType("datetime");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CodAjusteNavigation)
                    .WithMany(p => p.SaAjPrecioCostoReng)
                    .HasForeignKey(d => d.CodAjuste)
                    .HasConstraintName("FK_saAjPrecioCostoRenglon_saAjPrecioCostotM");
            });

            modelBuilder.Entity<SaAjuste>(entity =>
            {
                entity.HasKey(e => e.AjueNum);

                entity.ToTable("saAjuste");

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saAjuste_moneda");

                entity.HasIndex(e => e.Fecha);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saAjuste_rowguid");

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saAjuste_contabilidad");

                entity.Property(e => e.AjueNum)
                    .HasColumnName("ajue_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de Ajuste");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Aux01)
                    .HasColumnName("aux01")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Aux02)
                    .HasColumnName("aux02")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoInvfisico)
                    .HasColumnName("co_invfisico")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Inventario Fisico");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Ajuste");

                entity.Property(e => e.Motivo)
                    .HasColumnName("motivo")
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasComment("Motivo del Ajuste");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SerialesE)
                    .HasColumnName("seriales_e")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoInvfisicoNavigation)
                    .WithMany(p => p.SaAjuste)
                    .HasForeignKey(d => d.CoInvfisico)
                    .HasConstraintName("FK_saAjuste_saInventarioFisico");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaAjuste)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saAjuste_saMoneda");
            });

            modelBuilder.Entity<SaAjusteReng>(entity =>
            {
                entity.HasKey(e => new { e.AjueNum, e.RengNum });

                entity.ToTable("saAjusteReng");

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saAjusteReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.AjueNum)
                    .HasColumnName("ajue_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("No. de Ajuste");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipo)
                    .IsRequired()
                    .HasColumnName("co_tipo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de proveedor");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio unitario");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Ultimo costo Otra moneda");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Promedio Otra Moneda");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.AjueNumNavigation)
                    .WithMany(p => p.SaAjusteReng)
                    .HasForeignKey(d => d.AjueNum)
                    .HasConstraintName("FK_saAjusteReng_saAjuste");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaAjusteReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saAjusteReng_saAlmacen");

                entity.HasOne(d => d.CoTipoNavigation)
                    .WithMany(p => p.SaAjusteReng)
                    .HasForeignKey(d => d.CoTipo)
                    .HasConstraintName("FK_saAjusteReng_saTipoAjuste");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaAjusteRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saAjusteReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaAjusteRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saAjusteReng_saArtUnidadSec");
            });

            modelBuilder.Entity<SaAlmacen>(entity =>
            {
                entity.HasKey(e => e.CoAlma);

                entity.ToTable("saAlmacen");

                entity.HasIndex(e => e.CoSucur);

                entity.HasIndex(e => e.DesAlma);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saAlmacen_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.AlmTemp)
                    .HasColumnName("alm_temp")
                    .HasComment("Seleccionable en almacenes temporales de traslado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoSucur)
                    .IsRequired()
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal a la que pertenece");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesAlma)
                    .IsRequired()
                    .HasColumnName("des_alma")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Almacén");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Materiales)
                    .HasColumnName("materiales")
                    .HasComment("Reservado par futuras implementaciones");

                entity.Property(e => e.Nocompra)
                    .HasColumnName("nocompra")
                    .HasComment("Restringir para modulo de compras");

                entity.Property(e => e.Noventa)
                    .HasColumnName("noventa")
                    .HasComment("Restringir para modulo de ventas");

                entity.Property(e => e.Produccion)
                    .HasColumnName("produccion")
                    .HasComment("Reservado par futuras implementaciones");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoSucurNavigation)
                    .WithMany(p => p.SaAlmacen)
                    .HasForeignKey(d => d.CoSucur)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saAlmacen_saSucursal");
            });

            modelBuilder.Entity<SaAreaImpresion>(entity =>
            {
                entity.HasKey(e => e.CoAreaImp);

                entity.ToTable("saAreaImpresion");

                entity.Property(e => e.CoAreaImp)
                    .HasColumnName("co_area_imp")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesAreaImp)
                    .IsRequired()
                    .HasColumnName("des_area_imp")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaArtCaracteristica>(entity =>
            {
                entity.HasKey(e => e.CoArt)
                    .HasName("PK_saArtCaracteristicas");

                entity.ToTable("saArtCaracteristica");

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoLin01)
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Primera linea adicional de un articulo");

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Segunda linea adicional de un articulo");

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tercera linea adicional de un articulo");

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuarta  linea  adicional de un articulo");

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Quinta  linea  adicional de un articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CreditoFiscal)
                    .HasColumnName("credito_fiscal")
                    .HasComment("Indica el tipo de crédito fiscal para un determinado artículo (0: No Deducible, 1: Totalmente Deducible, 2: Sujeto a Prorrateo, 3: Ninguno de los Anteriores)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SinDerCreFis)
                    .HasColumnName("sin_der_cre_fis")
                    .HasComment("Sin derecho a credito fiscal");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoArtNavigation)
                    .WithOne(p => p.SaArtCaracteristica)
                    .HasForeignKey<SaArtCaracteristica>(d => d.CoArt)
                    .HasConstraintName("FK_saArtCaracteristicas_saArticulo");

                entity.HasOne(d => d.CoLin01Navigation)
                    .WithMany(p => p.SaArtCaracteristicaCoLin01Navigation)
                    .HasForeignKey(d => d.CoLin01)
                    .HasConstraintName("FK_saArtCaracteristica_saLineaArticulo01");

                entity.HasOne(d => d.CoLin02Navigation)
                    .WithMany(p => p.SaArtCaracteristicaCoLin02Navigation)
                    .HasForeignKey(d => d.CoLin02)
                    .HasConstraintName("FK_saArtCaracteristica_saLineaArticulo02");

                entity.HasOne(d => d.CoLin03Navigation)
                    .WithMany(p => p.SaArtCaracteristicaCoLin03Navigation)
                    .HasForeignKey(d => d.CoLin03)
                    .HasConstraintName("FK_saArtCaracteristica_saLineaArticulo03");

                entity.HasOne(d => d.CoLin04Navigation)
                    .WithMany(p => p.SaArtCaracteristicaCoLin04Navigation)
                    .HasForeignKey(d => d.CoLin04)
                    .HasConstraintName("FK_saArtCaracteristica_saLineaArticulo04");

                entity.HasOne(d => d.CoLin05Navigation)
                    .WithMany(p => p.SaArtCaracteristicaCoLin05Navigation)
                    .HasForeignKey(d => d.CoLin05)
                    .HasConstraintName("FK_saArtCaracteristica_saLineaArticulo05");
            });

            modelBuilder.Entity<SaArtCaracteristicaMov>(entity =>
            {
                entity.HasKey(e => e.Rowguid);

                entity.ToTable("saArtCaracteristicaMov");

                entity.HasIndex(e => new { e.RowguidDoc, e.TipoDoc })
                    .HasName("IX_saArtCaracteristicaMov");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico ");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("cantidad de articulos");

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Primera linea adicional de un articulo");

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Segunda  linea  adicional de un articulo");

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tercera  linea  adicional de un articulo");

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuarta   linea  adicional de un articulo");

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Quinta  linea  adicional de un articulo");

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Primera sublinea adicional de un articulo");

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Segunda sublinea adicional de un articulo");

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tercera  sublinea adicional de un articulo");

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Ciuarta sublinea adicional de un articulo");

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Quinta sublinea adicional de un articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.RowguidDoc)
                    .HasColumnName("rowguidDoc")
                    .HasComment("Rowguid del documento que origina el movimiento");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de documento que origina el movimiento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaArtCaracteristicaMovCo)
                    .HasForeignKey(d => new { d.CoLin01, d.CoSubl01 })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCaracteristicaMov_saSubLinea01");

                entity.HasOne(d => d.CoNavigation)
                    .WithMany(p => p.SaArtCaracteristicaMovCoNavigation)
                    .HasForeignKey(d => new { d.CoLin02, d.CoSubl02 })
                    .HasConstraintName("FK_saArtCaracteristicaMov_saSubLinea02");

                entity.HasOne(d => d.Co1)
                    .WithMany(p => p.SaArtCaracteristicaMovCo1)
                    .HasForeignKey(d => new { d.CoLin03, d.CoSubl03 })
                    .HasConstraintName("FK_saArtCaracteristicaMov_saSubLinea03");

                entity.HasOne(d => d.Co2)
                    .WithMany(p => p.SaArtCaracteristicaMovCo2)
                    .HasForeignKey(d => new { d.CoLin04, d.CoSubl04 })
                    .HasConstraintName("FK_saArtCaracteristicaMov_saSubLinea04");

                entity.HasOne(d => d.Co3)
                    .WithMany(p => p.SaArtCaracteristicaMovCo3)
                    .HasForeignKey(d => new { d.CoLin05, d.CoSubl05 })
                    .HasConstraintName("FK_saArtCaracteristicaMov_saSubLinea05");
            });

            modelBuilder.Entity<SaArtCompuesto>(entity =>
            {
                entity.HasKey(e => e.CoArtc);

                entity.ToTable("saArtCompuesto");

                entity.HasIndex(e => e.CoArt)
                    .HasName("UK_saArtCompuesto_co_art")
                    .IsUnique();

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saArtCompuesto_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoArtc)
                    .HasColumnName("co_artc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del compuesto");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Compuesto");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaArtCompuesto)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCompuesto_saArtUnidad");
            });

            modelBuilder.Entity<SaArtCompuestoGen>(entity =>
            {
                entity.HasKey(e => e.GeneNum);

                entity.ToTable("saArtCompuestoGen");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saArtCompuestoGen_moneda");

                entity.HasIndex(e => e.Fecha);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saArtCompuestoGen_rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saArtCompuestoGen_contabilidad");

                entity.Property(e => e.GeneNum)
                    .HasColumnName("gene_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de la Generación");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CostoTot)
                    .HasColumnName("costo_tot")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo total de la operación");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Movimiento");

                entity.Property(e => e.GeneArt)
                    .HasColumnName("gene_art")
                    .HasComment("Indica si el articulo generico fue generado");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaArtCompuestoGen)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCompuestoGen_saAlmacen");

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaArtCompuestoGen)
                    .HasPrincipalKey(p => p.CoArt)
                    .HasForeignKey(d => d.CoArt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCompuestoGen_saArtCompuesto");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaArtCompuestoGen)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCompuestoGen_saMoneda");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaArtCompuestoGen)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCompuestoGen_saArtUnidad");
            });

            modelBuilder.Entity<SaArtCompuestoGenReng>(entity =>
            {
                entity.HasKey(e => new { e.GeneNum, e.RengNum });

                entity.ToTable("saArtCompuestoGenReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.GeneNum);

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saArtCompuestoGenReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.GeneNum)
                    .HasColumnName("gene_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de la Generación");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostUnitOm)
                    .HasColumnName("cost_unit_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario en otra moneda (reservado para futuras implementaciones)");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio unitario");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Ultimo costo Otra moneda");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Promedio Otra Moneda");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaArtCompuestoGenReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCompuestoGenReng_saAlmacen");

                entity.HasOne(d => d.GeneNumNavigation)
                    .WithMany(p => p.SaArtCompuestoGenReng)
                    .HasForeignKey(d => d.GeneNum)
                    .HasConstraintName("FK_saArtCompuestoGenReng_saArtCompuestoGen");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaArtCompuestoGenReng)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCompuestoGenReng_saArtUnidad");
            });

            modelBuilder.Entity<SaArtCompuestoReng>(entity =>
            {
                entity.HasKey(e => new { e.CoArtc, e.RengNum });

                entity.ToTable("saArtCompuestoReng");

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.CoArtc);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saArtCompuestoReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoArtc)
                    .HasColumnName("co_artc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del compuesto");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoArtcNavigation)
                    .WithMany(p => p.SaArtCompuestoReng)
                    .HasForeignKey(d => d.CoArtc)
                    .HasConstraintName("FK_saArtCompuestoReng_saArtCompuesto");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaArtCompuestoReng)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCompuestoReng_saArtUnidad");
            });

            modelBuilder.Entity<SaArtCrearAut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("saArtCrearAut");

                entity.Property(e => e.ArtCrearAutDes)
                    .HasColumnName("ArtCrearAut_des")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.ArtDes)
                    .HasColumnName("art_des")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Artcampo1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Artcampo2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Artcampo3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Artcampo4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Artcampo5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Artcampo6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Artcampo7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Artcampo8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArtCrearAut)
                    .IsRequired()
                    .HasColumnName("co_artCrearAut")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCatDesde)
                    .HasColumnName("co_cat_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCatHasta)
                    .HasColumnName("co_cat_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoColorDesde)
                    .HasColumnName("co_color_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoColorHasta)
                    .HasColumnName("co_color_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLinDesde)
                    .HasColumnName("co_lin_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLinHasta)
                    .HasColumnName("co_lin_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProcDesde)
                    .HasColumnName("co_proc_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProcHasta)
                    .HasColumnName("co_proc_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoReten)
                    .HasColumnName("co_reten")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSublDesde)
                    .HasColumnName("co_subl_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSublHasta)
                    .HasColumnName("co_subl_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUbicacionDesde)
                    .HasColumnName("co_ubicacion_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUbicacionHasta)
                    .HasColumnName("co_ubicacion_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false);

                entity.Property(e => e.DescArtLibre).HasColumnName("desc_art_libre");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Garantia)
                    .HasColumnName("garantia")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDesde)
                    .HasColumnName("item_desde")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ItemHasta)
                    .HasColumnName("item_hasta")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LongCodArtCat).HasColumnName("Long_Cod_artCat");

                entity.Property(e => e.LongCodArtColor).HasColumnName("Long_Cod_artColor");

                entity.Property(e => e.LongCodArtItem).HasColumnName("Long_Cod_artItem");

                entity.Property(e => e.LongCodArtLin).HasColumnName("Long_Cod_artLin");

                entity.Property(e => e.LongCodArtProc).HasColumnName("Long_Cod_artProc");

                entity.Property(e => e.LongCodArtSubl).HasColumnName("Long_Cod_artSubl");

                entity.Property(e => e.LongCodArtUbicacion).HasColumnName("Long_Cod_artUbicacion");

                entity.Property(e => e.ManejaLote).HasColumnName("maneja_lote");

                entity.Property(e => e.ManejaLoteVenc).HasColumnName("maneja_lote_venc");

                entity.Property(e => e.ManejaSerial).HasColumnName("maneja_serial");

                entity.Property(e => e.OrdenCodArtCat).HasColumnName("Orden_Cod_artCat");

                entity.Property(e => e.OrdenCodArtColor).HasColumnName("Orden_Cod_artColor");

                entity.Property(e => e.OrdenCodArtItem).HasColumnName("Orden_Cod_artItem");

                entity.Property(e => e.OrdenCodArtLin).HasColumnName("Orden_Cod_artLin");

                entity.Property(e => e.OrdenCodArtProc).HasColumnName("Orden_Cod_artProc");

                entity.Property(e => e.OrdenCodArtSubl).HasColumnName("Orden_Cod_artSubl");

                entity.Property(e => e.OrdenCodArtUbicacion).HasColumnName("Orden_Cod_artUbicacion");

                entity.Property(e => e.Peso)
                    .HasColumnName("peso")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PrecOm).HasColumnName("prec_om");

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.RetenIvaTercero)
                    .HasColumnName("reten_iva_tercero")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.StockMax)
                    .HasColumnName("stock_max")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockMin)
                    .HasColumnName("stock_min")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockPedido)
                    .HasColumnName("stock_pedido")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("tipo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCos)
                    .HasColumnName("tipo_cos")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoImp)
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UsarCodArtCat).HasColumnName("usar_Cod_artCat");

                entity.Property(e => e.UsarCodArtColor).HasColumnName("usar_Cod_artColor");

                entity.Property(e => e.UsarCodArtItem).HasColumnName("usar_Cod_artItem");

                entity.Property(e => e.UsarCodArtLin).HasColumnName("usar_Cod_artLin");

                entity.Property(e => e.UsarCodArtProc).HasColumnName("usar_Cod_artProc");

                entity.Property(e => e.UsarCodArtSubl).HasColumnName("usar_Cod_artSubl");

                entity.Property(e => e.UsarCodArtUbicacion).HasColumnName("usar_Cod_artUbicacion");

                entity.Property(e => e.Validador)
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Volumen)
                    .HasColumnName("volumen")
                    .HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoAlma)
                    .HasConstraintName("FK_saArtCrearAut_Alma");

                entity.HasOne(d => d.CoCatDesdeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoCatDesde)
                    .HasConstraintName("FK_saArtCrearAut_saCatArticulo");

                entity.HasOne(d => d.CoCatHastaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoCatHasta)
                    .HasConstraintName("FK_saArtCrearAut_saCatArticulo_Hasta");

                entity.HasOne(d => d.CoColorDesdeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoColorDesde)
                    .HasConstraintName("FK_saArtCrearAut_saColor_Desde");

                entity.HasOne(d => d.CoColorHastaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoColorHasta)
                    .HasConstraintName("FK_saArtCrearAut_saColor_Hasta");

                entity.HasOne(d => d.CoProcDesdeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoProcDesde)
                    .HasConstraintName("FK_saArtCrearAut_saProcedencia_Desde");

                entity.HasOne(d => d.CoProcHastaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoProcHasta)
                    .HasConstraintName("FK_saArtCrearAut_saProcedencia_Hasta");

                entity.HasOne(d => d.CoRetenNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoReten)
                    .HasConstraintName("FK_saArtCrearAut_saConISLR");

                entity.HasOne(d => d.CoUbicacionDesdeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoUbicacionDesde)
                    .HasConstraintName("FK_saArtCrearAut_saUbicacion_Desde");

                entity.HasOne(d => d.CoUbicacionHastaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoUbicacionHasta)
                    .HasConstraintName("FK_saArtCrearAut_saUbicacion_Hasta");

                entity.HasOne(d => d.CoUniNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CoUni)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtCrearAut_Uni");

                entity.HasOne(d => d.RetenIvaTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.RetenIvaTercero)
                    .HasConstraintName("FK_saArtCrearAut_saProveedor");

                entity.HasOne(d => d.Co)
                    .WithMany()
                    .HasForeignKey(d => new { d.CoLinDesde, d.CoSublDesde })
                    .HasConstraintName("FK_saArtCrearAut_saSubLinea_Desde");

                entity.HasOne(d => d.CoNavigation)
                    .WithMany()
                    .HasForeignKey(d => new { d.CoLinHasta, d.CoSublHasta })
                    .HasConstraintName("FK_saArtCrearAut_saSubLinea_Hasta");
            });

            modelBuilder.Entity<SaArtIdentificadorReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.CoArt });

                entity.ToTable("saArtIdentificadorReng");

                entity.HasIndex(e => e.CoIden)
                    .HasName("UK_saArtIdentificadorReng")
                    .IsUnique();

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad equivalente del identificador auxiliar con respecto al articulo");

                entity.Property(e => e.CoIden)
                    .IsRequired()
                    .HasColumnName("co_iden")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo identificador auxiliar de articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Unidad equivalente del identificador auxiliar con respecto al articulo");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesIden)
                    .IsRequired()
                    .HasColumnName("des_iden")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion identificador auxiliar de articulo");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaArtIdentificadorReng)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .HasConstraintName("FK_saArtIdentificadorReng_saArtUnidad");
            });

            modelBuilder.Entity<SaArtImagen>(entity =>
            {
                entity.HasKey(e => new { e.CoArt, e.Tip });

                entity.ToTable("saArtImagen");

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.Tip)
                    .HasColumnName("tip")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la imagen");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.ImagenDes)
                    .HasColumnName("imagen_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la imagen");

                entity.Property(e => e.Picture)
                    .HasColumnName("picture")
                    .HasComment("Imagen");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaArtImagen)
                    .HasForeignKey(d => d.CoArt)
                    .HasConstraintName("FK_saArtImagen_saArticulo");
            });

            modelBuilder.Entity<SaArtImportacion>(entity =>
            {
                entity.HasKey(e => e.Rowguid);

                entity.ToTable("saArtImportacion");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Calculo)
                    .HasColumnName("calculo")
                    .HasComment("Indice de los Option");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Rowguid de saArticulo");

                entity.Property(e => e.CoIncoterm)
                    .HasColumnName("co_incoterm")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de saIncotrem");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Tasa");

                entity.Property(e => e.TipoImp)
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tasa de Nacionalización");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaArtImportacion)
                    .HasForeignKey(d => d.CoArt)
                    .HasConstraintName("FK_saArtImportacion_saArticulo");

                entity.HasOne(d => d.CoIncotermNavigation)
                    .WithMany(p => p.SaArtImportacion)
                    .HasForeignKey(d => d.CoIncoterm)
                    .HasConstraintName("FK_saArtImportacion_saIncoterm");
            });

            modelBuilder.Entity<SaArtMargen>(entity =>
            {
                entity.HasKey(e => new { e.CoArt, e.CoPrecio });

                entity.ToTable("saArtMargen");

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.MontoMax)
                    .HasColumnName("monto_max")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje maximo");

                entity.Property(e => e.MontoMin)
                    .HasColumnName("monto_min")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje minimo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaArtMargen)
                    .HasForeignKey(d => d.CoArt)
                    .HasConstraintName("FK_saArtMargen_saArticulo");

                entity.HasOne(d => d.CoPrecioNavigation)
                    .WithMany(p => p.SaArtMargen)
                    .HasForeignKey(d => d.CoPrecio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtMargen_saTipoPrecio");
            });

            modelBuilder.Entity<SaArtPrecio>(entity =>
            {
                entity.HasKey(e => new { e.CoArt, e.CoPrecio, e.CoAlmaCalculado, e.Desde });

                entity.ToTable("saArtPrecio");

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoAlmaCalculado)
                    .HasColumnName("co_alma_calculado")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen o TODOS cuando aplica a todos los almacenes (Campo calculado)")
                    .HasComputedColumnSql("(isnull([co_alma],'TODOS'))");

                entity.Property(e => e.Desde)
                    .HasColumnName("desde")
                    .HasColumnType("datetime")
                    .HasComment("Fecha inicial de vigencia del precio");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen (null equivale a todos los almacenes)");

                entity.Property(e => e.CoMone)
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Hasta)
                    .HasColumnName("hasta")
                    .HasColumnType("datetime")
                    .HasComment("Fecha final de vigencia de precio");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del precio");

                entity.Property(e => e.Montoadi1)
                    .HasColumnName("montoadi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Montoadi2)
                    .HasColumnName("montoadi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Montoadi3)
                    .HasColumnName("montoadi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Montoadi4)
                    .HasColumnName("montoadi4")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Montoadi5)
                    .HasColumnName("montoadi5")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.PrecioOm)
                    .HasColumnName("precioOm")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaArtPrecio)
                    .HasForeignKey(d => d.CoAlma)
                    .HasConstraintName("FK_saArtPrecio_saAlmacen");

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaArtPrecio)
                    .HasForeignKey(d => d.CoArt)
                    .HasConstraintName("FK_saArtPrecio_saArticulo");

                entity.HasOne(d => d.CoPrecioNavigation)
                    .WithMany(p => p.SaArtPrecio)
                    .HasForeignKey(d => d.CoPrecio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtPrecio_saTipoPrecio");
            });

            modelBuilder.Entity<SaArtProveedorReng>(entity =>
            {
                entity.HasKey(e => new { e.CoArt, e.RengNum });

                entity.ToTable("saArtProveedorReng");

                entity.HasIndex(e => new { e.CoArt, e.CoProv })
                    .HasName("UK_saArtProveedorReng")
                    .IsUnique();

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.Observacion)
                    .HasColumnName("observacion")
                    .IsUnicode(false)
                    .HasComment("Información adicional u observaciones sobre el proveedor");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaArtProveedorReng)
                    .HasForeignKey(d => d.CoArt)
                    .HasConstraintName("FK_saArtProveedorReng_saArticulo");

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaArtProveedorReng)
                    .HasForeignKey(d => d.CoProv)
                    .HasConstraintName("FK_saArtProveedorReng_saProveedor");
            });

            modelBuilder.Entity<SaArtRelacionadoReng>(entity =>
            {
                entity.HasKey(e => new { e.CoArt, e.RengNum });

                entity.ToTable("saArtRelacionadoReng");

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => new { e.CoArt, e.CodRelac })
                    .HasName("UK_saArtRelacionadoReng")
                    .IsUnique();

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.Aux01)
                    .HasColumnName("aux01")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Aux02)
                    .HasColumnName("aux02")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CodRelac)
                    .IsRequired()
                    .HasColumnName("cod_relac")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del artículo relacionado");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaArtRelacionadoRengCoArtNavigation)
                    .HasForeignKey(d => d.CoArt)
                    .HasConstraintName("FK_saArtRelacionadoReng_saArticulo");

                entity.HasOne(d => d.CodRelacNavigation)
                    .WithMany(p => p.SaArtRelacionadoRengCodRelacNavigation)
                    .HasForeignKey(d => d.CodRelac)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtRelacionadoReng_saArticulo1");
            });

            modelBuilder.Entity<SaArtUbicacion>(entity =>
            {
                entity.HasKey(e => new { e.CoArt, e.CoAlma, e.CoUbicacion, e.CoUbicacion2Calculado, e.CoUbicacion3Calculado, e.Orden });

                entity.ToTable("saArtUbicacion");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saArtUbicacion_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del artículo");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del almacén");

                entity.Property(e => e.CoUbicacion)
                    .HasColumnName("co_ubicacion")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la ubicación principal");

                entity.Property(e => e.CoUbicacion2Calculado)
                    .HasColumnName("co_ubicacion2_calculado")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de ubicación2 o NOTAPPLY cuando no aplica para ninguna ubicación (Campo calculado)")
                    .HasComputedColumnSql("(isnull([co_ubicacion2],'NOTAPPLY'))");

                entity.Property(e => e.CoUbicacion3Calculado)
                    .HasColumnName("co_ubicacion3_calculado")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de ubicación3 o NOTAPPLY cuando no aplica para ninguna ubicación (Campo calculado)")
                    .HasComputedColumnSql("(isnull([co_ubicacion3],'NOTAPPLY'))");

                entity.Property(e => e.Orden)
                    .HasColumnName("orden")
                    .HasComment("Orden del artículo en referencia a la ubicación dentro de almacén");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUbicacion2)
                    .HasColumnName("co_ubicacion2")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la ubicación respecto a la ubicación principal");

                entity.Property(e => e.CoUbicacion3)
                    .HasColumnName("co_ubicacion3")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la ubicación respecto a co_ubicacion2");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.DesUbicacion)
                    .HasColumnName("des_ubicacion")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripción de la ubicación del artículo");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Único");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaArtUbicacion)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtUbicacion_saAlmacen");

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaArtUbicacion)
                    .HasForeignKey(d => d.CoArt)
                    .HasConstraintName("FK_saArtUbicacion_saArticulo");

                entity.HasOne(d => d.CoUbicacionNavigation)
                    .WithMany(p => p.SaArtUbicacionCoUbicacionNavigation)
                    .HasForeignKey(d => d.CoUbicacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtUbicacion_saUbicacion");

                entity.HasOne(d => d.CoUbicacion2Navigation)
                    .WithMany(p => p.SaArtUbicacionCoUbicacion2Navigation)
                    .HasForeignKey(d => d.CoUbicacion2)
                    .HasConstraintName("FK_saArtUbicacion_saUbicacion_2");

                entity.HasOne(d => d.CoUbicacion3Navigation)
                    .WithMany(p => p.SaArtUbicacionCoUbicacion3Navigation)
                    .HasForeignKey(d => d.CoUbicacion3)
                    .HasConstraintName("FK_saArtUbicacion_saUbicacion_3");
            });

            modelBuilder.Entity<SaArtUnidad>(entity =>
            {
                entity.HasKey(e => new { e.CoArt, e.CoUni });

                entity.ToTable("saArtUnidad");

                entity.HasIndex(e => e.CoArt)
                    .HasName("IX_saArtUnidad_CoArt");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saArtUnidad_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoUni)
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Equivalencia)
                    .HasColumnName("equivalencia")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("factor de equivalencia entre unidad alterna y base");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.NumDecimales).HasColumnName("num_decimales");

                entity.Property(e => e.Relacion)
                    .HasColumnName("relacion")
                    .HasComment("True: relacion directa entre base y alterna, False: la relacion de quivalencia es inversa (divide)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.UniPrincipal)
                    .HasColumnName("uni_principal")
                    .HasComment("Unidad principal base");

                entity.Property(e => e.UniSecundaria)
                    .HasColumnName("uni_secundaria")
                    .HasComment("Unidad secundaria base");

                entity.Property(e => e.UsoCompra)
                    .HasColumnName("uso_compra")
                    .HasComment("Unidad empleada en compra");

                entity.Property(e => e.UsoNumDecimales).HasColumnName("uso_numDecimales");

                entity.Property(e => e.UsoPrincipal)
                    .HasColumnName("uso_principal")
                    .HasComment("Unidad principal alterna");

                entity.Property(e => e.UsoSecundaria)
                    .HasColumnName("uso_secundaria")
                    .HasComment("Unidad secundaria alterna");

                entity.Property(e => e.UsoVenta)
                    .HasColumnName("uso_venta")
                    .HasComment("Unidad empleada en venta");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaArtUnidad)
                    .HasForeignKey(d => d.CoArt)
                    .HasConstraintName("FK_saArtUnidad_saArticulo");

                entity.HasOne(d => d.CoUniNavigation)
                    .WithMany(p => p.SaArtUnidad)
                    .HasForeignKey(d => d.CoUni)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArtUnidad_saUnidad");
            });

            modelBuilder.Entity<SaArticulo>(entity =>
            {
                entity.HasKey(e => e.CoArt);

                entity.ToTable("saArticulo");

                entity.HasIndex(e => e.ArtDes);

                entity.HasIndex(e => e.CoCat);

                entity.HasIndex(e => e.CoColor);

                entity.HasIndex(e => e.CoLin);

                entity.HasIndex(e => e.Item)
                    .HasName("IX_saArticulo_Item");

                entity.HasIndex(e => e.Modelo)
                    .HasName("IX_saArticulo_Modelo");

                entity.HasIndex(e => e.Ref)
                    .HasName("IX_saArticulo_Ref");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saArticulo_RowGuid")
                    .IsUnique();

                entity.HasIndex(e => e.TipoImp);

                entity.HasIndex(e => new { e.CoSubl, e.CoLin })
                    .HasName("IX_saArticulo_co_subl");

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.ArtDes)
                    .IsRequired()
                    .HasColumnName("art_des")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion del artículo");

                entity.Property(e => e.AuxImp01)
                    .HasColumnName("aux_imp01")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Aux usodo en migracion para traer ultimo costo");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCat)
                    .IsRequired()
                    .HasColumnName("co_cat")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Categoria");

                entity.Property(e => e.CoColor)
                    .IsRequired()
                    .HasColumnName("co_color")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del color relacionado con el artículo");

                entity.Property(e => e.CoLin)
                    .IsRequired()
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Linea");

                entity.Property(e => e.CoReten)
                    .HasColumnName("co_reten")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de concepto de I.S.L.R.");

                entity.Property(e => e.CoSubl)
                    .IsRequired()
                    .HasColumnName("co_subl")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Sub Linea");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUbicacion)
                    .IsRequired()
                    .HasColumnName("co_ubicacion")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Ubicación del Artículo");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CodProc)
                    .HasColumnName("cod_proc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de procedencia");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.FechaInac)
                    .HasColumnName("fecha_inac")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha en la que fue inhabilitado el producto");

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha en que se registra la información");

                entity.Property(e => e.Garantia)
                    .IsRequired()
                    .HasColumnName("garantia")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Garantia");

                entity.Property(e => e.Generico)
                    .HasColumnName("generico")
                    .HasComment("Indica si el articulo es generico");

                entity.Property(e => e.Item)
                    .HasColumnName("item")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Item del Artículo, representa un correlativo para la clasificación al cual pertenece el artículo");

                entity.Property(e => e.LicCapacidad)
                    .HasColumnName("lic_capacidad")
                    .HasColumnType("decimal(18, 3)")
                    .HasComment("Capacidad del licor");

                entity.Property(e => e.LicGradoAl)
                    .HasColumnName("lic_grado_al")
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("Grado alcoholico");

                entity.Property(e => e.LicMonIlc)
                    .HasColumnName("lic_mon_ilc")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del impuesto sobre licores");

                entity.Property(e => e.LicTipo)
                    .HasColumnName("lic_tipo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de  Licor");

                entity.Property(e => e.ManejaLote)
                    .HasColumnName("maneja_lote")
                    .HasComment("Lote");

                entity.Property(e => e.ManejaLoteVenc)
                    .HasColumnName("maneja_lote_venc")
                    .HasComment("Maneja lotes con vencimiento");

                entity.Property(e => e.ManejaSerial)
                    .HasColumnName("maneja_serial")
                    .HasComment("Indica si maneja Seriales");

                entity.Property(e => e.MargenMax)
                    .HasColumnName("margen_max")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje del margen máximo");

                entity.Property(e => e.MargenMin)
                    .HasColumnName("margen_min")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje del margen mínimo");

                entity.Property(e => e.Modelo)
                    .HasColumnName("modelo")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Modelo, aqui  se puede guardar otra codificación para el artículo.");

                entity.Property(e => e.MontComi)
                    .HasColumnName("mont_comi")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto comisión");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Peso)
                    .HasColumnName("peso")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Peso");

                entity.Property(e => e.PorcArancel)
                    .HasColumnName("porc_arancel")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de arancel");

                entity.Property(e => e.PorcMargenMaximo)
                    .HasColumnName("porc_margen_maximo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PorcMargenMinimo)
                    .HasColumnName("porc_margen_minimo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto comisión");

                entity.Property(e => e.PrecOm)
                    .HasColumnName("prec_om")
                    .HasComment("Indica si los precios se manejan en otra moneda.");

                entity.Property(e => e.PuntCli)
                    .HasColumnName("punt_cli")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Puntajes para el cliente");

                entity.Property(e => e.PuntVen)
                    .HasColumnName("punt_ven")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Puntajes para el vendedor");

                entity.Property(e => e.Ref)
                    .HasColumnName("ref")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Referencia, aqui  se puede guardar otra codificación para el artículo.");

                entity.Property(e => e.RelacUnidad)
                    .HasColumnName("relac_unidad")
                    .HasComment("Indica el tipo de manejo de unidad que tiene el articulo. 0= Maneja una o multiples unidades (con relación); 1= Maneja dos unidades sin relacion");

                entity.Property(e => e.RetenIvaTercero)
                    .HasColumnName("reten_iva_tercero")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del proveedor al cual se le va a aplicar la retencion del iva a terceros");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.StockMax)
                    .HasColumnName("stock_max")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Stock máximo a mantener");

                entity.Property(e => e.StockMin)
                    .HasColumnName("stock_min")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Stock mínimo a mantener");

                entity.Property(e => e.StockPedido)
                    .HasColumnName("stock_pedido")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Punto del Stock para hacer reposiciones");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("tipo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("V: Venta, C: Consumo, S: Servicio, F: Fabricacion, M: Materia Prima, N: Material de envase, E: Material de empaque (fijo=ART)");

                entity.Property(e => e.TipoCos)
                    .HasColumnName("tipo_cos")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de costo que se utiliza para calcular el margen con respecto a los precios.  1: Ultimo Costo, 2: Costo Promedio, 3: Ultimo Costo, OM 4: Costo Promedio, OM 5: Reposicion, 6: Proveedor (fijo=TPC) ");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado. 1: Tasa General, 2: Tasa A1, 3: Tasa A2, 4: Tasa A3, 5: Ventas Exentas, 6: Compras Exentas, 7: Exentos (fijo=ISV)");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado. 1: Tasa General, 2: Tasa A1, 3: Tasa A2, 4: Tasa A3, 5: Ventas Exentas, 6: Compras Exentas, 7: Exentos (fijo=ISV)");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado. 1: Tasa General, 2: Tasa A1, 3: Tasa A2, 4: Tasa A3, 5: Ventas Exentas, 6: Compras Exentas, 7: Exentos (fijo=ISV)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Volumen)
                    .HasColumnName("volumen")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Volumen");

                entity.HasOne(d => d.CoCatNavigation)
                    .WithMany(p => p.SaArticulo)
                    .HasForeignKey(d => d.CoCat)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArticulo_saCatArticulo");

                entity.HasOne(d => d.CoColorNavigation)
                    .WithMany(p => p.SaArticulo)
                    .HasForeignKey(d => d.CoColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArticulo_saColor");

                entity.HasOne(d => d.CoRetenNavigation)
                    .WithMany(p => p.SaArticulo)
                    .HasForeignKey(d => d.CoReten)
                    .HasConstraintName("FK_saArticulo_saConISLR");

                entity.HasOne(d => d.CoUbicacionNavigation)
                    .WithMany(p => p.SaArticulo)
                    .HasForeignKey(d => d.CoUbicacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArticulo_saUbicacion");

                entity.HasOne(d => d.CodProcNavigation)
                    .WithMany(p => p.SaArticulo)
                    .HasForeignKey(d => d.CodProc)
                    .HasConstraintName("FK_saArticulo_saProcedencia");

                entity.HasOne(d => d.RetenIvaTerceroNavigation)
                    .WithMany(p => p.SaArticulo)
                    .HasForeignKey(d => d.RetenIvaTercero)
                    .HasConstraintName("FK_saArticulo_saProveedor");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaArticulo)
                    .HasForeignKey(d => new { d.CoLin, d.CoSubl })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saArticulo_saSubLinea");
            });

            modelBuilder.Entity<SaBanco>(entity =>
            {
                entity.HasKey(e => e.CoBan);

                entity.ToTable("saBanco");

                entity.HasIndex(e => e.DesBan)
                    .HasName("IX_saBanco_Des_Can");

                entity.Property(e => e.CoBan)
                    .HasColumnName("co_ban")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del banco asociado al documento");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.ComisMismoBanco)
                    .HasColumnName("comisMismoBanco")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ComisOtrosBancos)
                    .HasColumnName("comisOtrosBancos")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DesBan)
                    .IsRequired()
                    .HasColumnName("des_ban")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion del banco");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Plazo1)
                    .HasColumnName("plazo1")
                    .HasComment("Días de diferimiento para cheques del mismo banco y misma plaza ");

                entity.Property(e => e.Plazo2)
                    .HasColumnName("plazo2")
                    .HasComment("Días de diferimiento para cheques del mismo banco y diferente plaza");

                entity.Property(e => e.Plazo3)
                    .HasColumnName("plazo3")
                    .HasComment("Días de diferimiento para cheques de diferente banco y misma plaza");

                entity.Property(e => e.Plazo4)
                    .HasColumnName("plazo4")
                    .HasComment("Días de diferimiento para cheques de diferente banco y diferente plaza");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Telefonos)
                    .HasColumnName("telefonos")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Información de los numeros telefonicos");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaBeneficiario>(entity =>
            {
                entity.HasKey(e => e.CodBen);

                entity.ToTable("saBeneficiario");

                entity.HasIndex(e => e.BenDes);

                entity.HasIndex(e => e.CoTab);

                entity.Property(e => e.CodBen)
                    .HasColumnName("cod_ben")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del beneficiario relacionado");

                entity.Property(e => e.BenDes)
                    .IsRequired()
                    .HasColumnName("ben_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Beneficiario");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTab)
                    .HasColumnName("co_tab")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código Tabulador del I.S.L.R.");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Direc1)
                    .HasColumnName("direc1")
                    .IsUnicode(false)
                    .HasComment("Dirección");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indicativo de registro inactivo");

                entity.Property(e => e.Nit)
                    .HasColumnName("nit")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasComment("Número de Información Tributaria");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rif)
                    .HasColumnName("rif")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasComment("Registro de Información Fiscal");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Telefonos)
                    .HasColumnName("telefonos")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Teléfono");

                entity.Property(e => e.TipoPer)
                    .IsRequired()
                    .HasColumnName("tipo_per")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Persona");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SaTabuladorIslr)
                    .WithMany(p => p.SaBeneficiario)
                    .HasPrincipalKey(p => new { p.CoTab, p.TipoPer })
                    .HasForeignKey(d => new { d.CoTab, d.TipoPer })
                    .HasConstraintName("FK_saBeneficiario_saTabuladorIslr");
            });

            modelBuilder.Entity<SaCaja>(entity =>
            {
                entity.HasKey(e => e.CodCaja);

                entity.ToTable("saCaja");

                entity.HasIndex(e => e.Descrip)
                    .HasName("IX_saCaja_Descrip");

                entity.Property(e => e.CodCaja)
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Caja");

                entity.Property(e => e.AuxImp01)
                    .HasColumnName("aux_imp01")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AuxImp02)
                    .HasColumnName("aux_imp02")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Descrip)
                    .IsRequired()
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indicativo de registro inactivo");

                entity.Property(e => e.MesIni)
                    .HasColumnName("mes_ini")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de inicio");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaCaja)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCaja_saMoneda");
            });

            modelBuilder.Entity<SaCatArticulo>(entity =>
            {
                entity.HasKey(e => e.CoCat);

                entity.ToTable("saCatArticulo");

                entity.HasIndex(e => e.CatDes)
                    .HasName("IX_saCatArticulo_Cat_des");

                entity.Property(e => e.CoCat)
                    .HasColumnName("co_cat")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Categoria");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CatDes)
                    .IsRequired()
                    .HasColumnName("cat_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la categoría");

                entity.Property(e => e.CoImun)
                    .HasColumnName("co_imun")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del impuesto municipal");

                entity.Property(e => e.CoReten)
                    .HasColumnName("co_reten")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de concepto de I.S.L.R.");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Movil)
                    .HasColumnName("movil")
                    .HasComment("Registro proveniente de Profit Móvil");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoRetenNavigation)
                    .WithMany(p => p.SaCatArticulo)
                    .HasForeignKey(d => d.CoReten)
                    .HasConstraintName("FK_saCatArticulo_saConISLR");
            });

            modelBuilder.Entity<SaCheque>(entity =>
            {
                entity.HasKey(e => new { e.CoCheq, e.CoChra });

                entity.ToTable("saCheque");

                entity.Property(e => e.CoCheq)
                    .HasColumnName("co_cheq")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del cheque");

                entity.Property(e => e.CoChra)
                    .HasColumnName("co_chra")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la chequera");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_In")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("descripcion");

                entity.Property(e => e.EntregA)
                    .HasColumnName("entreg_a")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Indica a quien fue entregado");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecEnt)
                    .HasColumnName("fec_ent")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de entrega");

                entity.Property(e => e.MovNum)
                    .HasColumnName("mov_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de movimiento de banco");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Estado del cheque. 'DIS'=Disponible; 'EMI'=Emitido; 'ANU'=Anulado;");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoChraNavigation)
                    .WithMany(p => p.SaCheque)
                    .HasForeignKey(d => d.CoChra)
                    .HasConstraintName("FK_saCheque_saChequera");

                entity.HasOne(d => d.MovNumNavigation)
                    .WithMany(p => p.SaCheque)
                    .HasForeignKey(d => d.MovNum)
                    .HasConstraintName("FK_saCheque_saMovimientoBanco");
            });

            modelBuilder.Entity<SaChequeDevueltoCompra>(entity =>
            {
                entity.HasKey(e => e.CoCheqDev);

                entity.ToTable("saChequeDevueltoCompra");

                entity.Property(e => e.CoCheqDev)
                    .HasColumnName("co_cheq_dev")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoBan)
                    .IsRequired()
                    .HasColumnName("co_ban")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CodCta)
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesCheqDev)
                    .HasColumnName("des_cheq_dev")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecCheq)
                    .HasColumnName("fec_cheq")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IncluyeImp).HasColumnName("incluye_imp");

                entity.Property(e => e.MontDoc)
                    .HasColumnName("mont_doc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipImp)
                    .HasColumnName("tip_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaChequeDevueltoCompra)
                    .HasForeignKey(d => d.CoProv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saChequeDevueltoCompra_saProveedor");

                entity.HasOne(d => d.SaDocumentoCompra)
                    .WithMany(p => p.SaChequeDevueltoCompra)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .HasConstraintName("FK_saChequeDevueltoCompra_saDocumentoCompra");
            });

            modelBuilder.Entity<SaChequeDevueltoVenta>(entity =>
            {
                entity.HasKey(e => e.CoCheqDev);

                entity.ToTable("saChequeDevueltoVenta");

                entity.Property(e => e.CoCheqDev)
                    .HasColumnName("co_cheq_dev")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Automatico)
                    .IsRequired()
                    .HasColumnName("automatico")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0 para Manual, 1 para Automatico");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoBan)
                    .HasColumnName("co_ban")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCaja)
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCta)
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesCheqDev)
                    .HasColumnName("des_cheq_dev")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecCheq)
                    .HasColumnName("fec_cheq")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IncluyeImp).HasColumnName("incluye_imp");

                entity.Property(e => e.MontDoc)
                    .HasColumnName("mont_doc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipImp)
                    .HasColumnName("tip_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaChequeDevueltoVenta)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saChequeDevueltoVenta_saCliente");

                entity.HasOne(d => d.SaDocumentoVenta)
                    .WithMany(p => p.SaChequeDevueltoVenta)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .HasConstraintName("FK_saChequeDevueltoVenta_saChequeDevueltoVenta");
            });

            modelBuilder.Entity<SaChequera>(entity =>
            {
                entity.HasKey(e => e.CoChra);

                entity.ToTable("saChequera");

                entity.Property(e => e.CoChra)
                    .HasColumnName("co_chra")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la chequera");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.ChraDes)
                    .IsRequired()
                    .HasColumnName("chra_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la chequera");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CodCta)
                    .IsRequired()
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la cuenta bancaria");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaRe)
                    .HasColumnName("fecha_re")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de recepcion");

                entity.Property(e => e.LimUsoRe)
                    .HasColumnName("limUsoRe")
                    .HasComment("Indica si la chequera esta limitado su uso al responsable");

                entity.Property(e => e.NumCh)
                    .HasColumnName("num_ch")
                    .HasComment("Numero de cheques");

                entity.Property(e => e.Respons)
                    .HasColumnName("respons")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Responsable de la chequera");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Estado de la chequera. 'ACT'=Activa; 'INA'=Inactiva; 'USA'=Usada; 'SUS'=Suspendida.");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodCtaNavigation)
                    .WithMany(p => p.SaChequera)
                    .HasForeignKey(d => d.CodCta)
                    .HasConstraintName("FK_saChequera_saCuentaBancaria");
            });

            modelBuilder.Entity<SaCliente>(entity =>
            {
                entity.HasKey(e => e.CoCli);

                entity.ToTable("saCliente");

                entity.HasIndex(e => e.CliDes)
                    .HasName("IX_saCliente_Cli_des");

                entity.HasIndex(e => e.CoSeg)
                    .HasName("IX_saCliente_Co_Seg");

                entity.HasIndex(e => e.CoVen)
                    .HasName("IX_saCliente_Co_Ven");

                entity.HasIndex(e => e.CoZon)
                    .HasName("IX_saCliente_Co_Zon");

                entity.HasIndex(e => e.TipCli)
                    .HasName("IX_saCliente_Tip_Cli");

                entity.Property(e => e.CoCli)
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Cliente");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Ciudad)
                    .HasColumnName("ciudad")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Ciudad");

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("Nombre de cliente");

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de ingreso/egreso asignada");

                entity.Property(e => e.CoMone)
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoPais)
                    .HasColumnName("co_pais")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Pais");

                entity.Property(e => e.CoSeg)
                    .IsRequired()
                    .HasColumnName("co_seg")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Segmento");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTab)
                    .HasColumnName("co_tab")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código Tabulador del I.S.L.R.");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.CoZon)
                    .IsRequired()
                    .HasColumnName("co_zon")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la Zona");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.CondPag)
                    .HasColumnName("cond_pag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de condicion de pago");

                entity.Property(e => e.Contrib)
                    .HasColumnName("contrib")
                    .HasComment("Contribuyente especial (Sujeto objeto a retencion)");

                entity.Property(e => e.ContribuE)
                    .HasColumnName("contribu_e")
                    .HasComment("Contribuyente especial (Sujeto objeto a retencion)");

                entity.Property(e => e.DescGlob)
                    .HasColumnName("desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Descuento Global");

                entity.Property(e => e.DescPpago)
                    .HasColumnName("desc_ppago")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de descuento por Pronto pago");

                entity.Property(e => e.DirEnt2)
                    .HasColumnName("dir_ent2")
                    .IsUnicode(false)
                    .HasComment("Dirección de entrega");

                entity.Property(e => e.Direc1)
                    .HasColumnName("direc1")
                    .IsUnicode(false)
                    .HasComment("Dirección");

                entity.Property(e => e.Direc2)
                    .HasColumnName("direc2")
                    .IsUnicode(false)
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.Domingo)
                    .HasColumnName("domingo")
                    .HasComment("Indica si este día es de  visita");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Correo electronico");

                entity.Property(e => e.EmailAlterno)
                    .HasColumnName("email_alterno")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Email alterno para documentos electrónicos");

                entity.Property(e => e.Estado)
                    .HasColumnName("estado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Información sobre el fax");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha en que se registra la información");

                entity.Property(e => e.FrecuVist)
                    .HasColumnName("frecu_vist")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Frecuencia de visita");

                entity.Property(e => e.HorarCaja)
                    .HasColumnName("horar_caja")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Horario de Caja");

                entity.Property(e => e.Id).HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indicativo de registro inactivo");

                entity.Property(e => e.Jueves)
                    .HasColumnName("jueves")
                    .HasComment("Indica si este día es de  visita");

                entity.Property(e => e.Juridico)
                    .HasColumnName("juridico")
                    .HasComment("Si es o no cliente jurídico");

                entity.Property(e => e.Login)
                    .HasColumnName("login")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Login");

                entity.Property(e => e.Lunes)
                    .HasColumnName("lunes")
                    .HasComment("Indica si este día es de  visita");

                entity.Property(e => e.Martes)
                    .HasColumnName("martes")
                    .HasComment("Indica si este día es de  visita");

                entity.Property(e => e.Matriz)
                    .HasColumnName("matriz")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de cliente casa matriz");

                entity.Property(e => e.Miercoles)
                    .HasColumnName("miercoles")
                    .HasComment("Indica si este día es de  visita");

                entity.Property(e => e.MontCre)
                    .HasColumnName("mont_cre")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Limite de Credito");

                entity.Property(e => e.Nit)
                    .HasColumnName("nit")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasComment("Número de Información Tributaria");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Password)
                    .HasColumnName("password")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Contrasena");

                entity.Property(e => e.PlazPag)
                    .HasColumnName("plaz_pag")
                    .HasComment("Días de credito");

                entity.Property(e => e.PorcEsp)
                    .HasColumnName("porc_esp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de retencion");

                entity.Property(e => e.Puntaje)
                    .HasColumnName("puntaje")
                    .HasComment("Puntaje acumulado");

                entity.Property(e => e.Respons)
                    .HasColumnName("respons")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Responsable");

                entity.Property(e => e.ReteRegisDoc)
                    .HasColumnName("rete_regis_doc")
                    .HasComment("Retener al registrar el documento");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rif)
                    .HasColumnName("rif")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasComment("Registro de Información Fiscal");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Sabado)
                    .HasColumnName("sabado")
                    .HasComment("Indica si este día es de  visita");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Serialp)
                    .HasColumnName("serialp")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Sincredito)
                    .HasColumnName("sincredito")
                    .HasComment("Posee credito");

                entity.Property(e => e.Telefonos)
                    .HasColumnName("telefonos")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Información de los numeros telefonicos");

                entity.Property(e => e.TipCli)
                    .IsRequired()
                    .HasColumnName("tip_cli")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de cliente");

                entity.Property(e => e.TipoAdi)
                    .HasColumnName("tipo_adi")
                    .HasComment("Clasificación  1: Normal, 2: Matriz, 3: Sucursal");

                entity.Property(e => e.TipoPer)
                    .HasColumnName("tipo_per")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("1: Natural Residente, 2: Natural No Residente, 3: Juridica Domiciliada, 4: Juridica No Domiciliada, 5: Exenta, 6: Tesoreria Nacional, 7: Otros , 8: Otros 2 (fijo=TPE)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Valido)
                    .HasColumnName("valido")
                    .HasComment("Valido");

                entity.Property(e => e.Viernes)
                    .HasColumnName("viernes")
                    .HasComment("Indica si este día es de  visita");

                entity.Property(e => e.Website)
                    .HasColumnName("website")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("Indica el web site del cliente");

                entity.Property(e => e.Zip)
                    .HasColumnName("zip")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Código Postal");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaCliente)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCliente_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaCliente)
                    .HasForeignKey(d => d.CoMone)
                    .HasConstraintName("FK_saCliente_saMoneda");

                entity.HasOne(d => d.CoPaisNavigation)
                    .WithMany(p => p.SaCliente)
                    .HasForeignKey(d => d.CoPais)
                    .HasConstraintName("FK_saCliente_saPais");

                entity.HasOne(d => d.CoSegNavigation)
                    .WithMany(p => p.SaCliente)
                    .HasForeignKey(d => d.CoSeg)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCliente_saSegmento");

                entity.HasOne(d => d.CoTabNavigation)
                    .WithMany(p => p.SaCliente)
                    .HasForeignKey(d => d.CoTab)
                    .HasConstraintName("FK_saCliente_saTabuladorIslr");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaCliente)
                    .HasForeignKey(d => d.CoVen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCliente_saVendedor");

                entity.HasOne(d => d.CoZonNavigation)
                    .WithMany(p => p.SaCliente)
                    .HasForeignKey(d => d.CoZon)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCliente_saZona");

                entity.HasOne(d => d.CondPagNavigation)
                    .WithMany(p => p.SaCliente)
                    .HasForeignKey(d => d.CondPag)
                    .HasConstraintName("FK_saCliente_saCondicionPago");

                entity.HasOne(d => d.MatrizNavigation)
                    .WithMany(p => p.InverseMatrizNavigation)
                    .HasForeignKey(d => d.Matriz)
                    .HasConstraintName("FK_saCliente_saClienteCasaMatriz");

                entity.HasOne(d => d.TipCliNavigation)
                    .WithMany(p => p.SaCliente)
                    .HasForeignKey(d => d.TipCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCliente_saTipoCliente");
            });

            modelBuilder.Entity<SaClienteExt>(entity =>
            {
                entity.HasKey(e => e.RowguidCli);

                entity.ToTable("saClienteExt");

                entity.Property(e => e.RowguidCli)
                    .HasColumnName("rowguid_cli")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.NCr)
                    .HasColumnName("n_cr")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NDb)
                    .HasColumnName("n_db")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.TComp)
                    .HasColumnName("tComp")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NCrNavigation)
                    .WithMany(p => p.SaClienteExtNCrNavigation)
                    .HasForeignKey(d => d.NCr)
                    .HasConstraintName("FK_saClienteExt_saTipoComprobante1");

                entity.HasOne(d => d.NDbNavigation)
                    .WithMany(p => p.SaClienteExtNDbNavigation)
                    .HasForeignKey(d => d.NDb)
                    .HasConstraintName("FK_saClienteExt_saTipoComprobante2");

                entity.HasOne(d => d.TCompNavigation)
                    .WithMany(p => p.SaClienteExtTCompNavigation)
                    .HasForeignKey(d => d.TComp)
                    .HasConstraintName("FK_saClienteExt_saTipoComprobante");
            });

            modelBuilder.Entity<SaCobro>(entity =>
            {
                entity.HasKey(e => e.CobNum);

                entity.ToTable("saCobro");

                entity.HasIndex(e => e.CoCli);

                entity.HasIndex(e => e.CoMone);

                entity.HasIndex(e => e.Fecha);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saCobro_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.Feccom, e.Numcom });

                entity.Property(e => e.CobNum)
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Numcom).HasColumnName("numcom");

                entity.Property(e => e.Recibo)
                    .HasColumnName("recibo")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaCobro)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCobro_saCliente");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaCobro)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCobro_saMoneda");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaCobro)
                    .HasForeignKey(d => d.CoVen)
                    .HasConstraintName("FK_saCobro_saVendedor");
            });

            modelBuilder.Entity<SaCobroDocReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.CobNum });

                entity.ToTable("saCobroDocReng");

                entity.HasIndex(e => e.CoTipoDoc);

                entity.HasIndex(e => e.NroDoc);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saCobroDocReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.CobNum)
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DpcobroMonto)
                    .HasColumnName("dpcobro_monto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DpcobroPorcDesc)
                    .HasColumnName("dpcobro_porc_desc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.GenOrigen)
                    .HasColumnName("gen_origen")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MontCob)
                    .HasColumnName("mont_cob")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoRetencion)
                    .HasColumnName("monto_retencion")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoRetencionIva)
                    .HasColumnName("monto_retencion_iva")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NroDoc)
                    .IsRequired()
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RetenTerceroRowguidOri).HasColumnName("reten_tercero_rowguid_ori");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.RowguidRengOri).HasColumnName("rowguid_reng_ori");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoOrigen).HasColumnName("tipo_origen");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CobNumNavigation)
                    .WithMany(p => p.SaCobroDocReng)
                    .HasForeignKey(d => d.CobNum)
                    .HasConstraintName("FK_saCobroDocReng_saCobro");

                entity.HasOne(d => d.RetenTerceroRowguidOriNavigation)
                    .WithMany(p => p.SaCobroDocReng)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RetenTerceroRowguidOri)
                    .HasConstraintName("FK_saCobroDocReng_saFacturaVentaReng");

                entity.HasOne(d => d.RowguidRengOriNavigation)
                    .WithMany(p => p.InverseRowguidRengOriNavigation)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidRengOri)
                    .HasConstraintName("FK_saCobroDocReng_saCobroDocRengOri");

                entity.HasOne(d => d.SaDocumentoVenta)
                    .WithMany(p => p.SaCobroDocReng)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCobroDocReng_saDocumentoVenta");
            });

            modelBuilder.Entity<SaCobroRentenReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.RowguidRengCob });

                entity.ToTable("saCobroRentenReng");

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.RowguidRengCob).HasColumnName("rowguid_reng_cob");

                entity.Property(e => e.Automatica).HasColumnName("automatica");

                entity.Property(e => e.CoIslr)
                    .IsRequired()
                    .HasColumnName("co_islr")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoObj)
                    .HasColumnName("monto_obj")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoReten)
                    .HasColumnName("monto_reten")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcRetn)
                    .HasColumnName("porc_retn")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.RowguidFact)
                    .HasColumnName("rowguid_fact")
                    .HasComment("Cuando la retencion es global indica el rowguid de la primera factura del grupo. Este campo se utiliza para consultas posteriores, reportes y el xml de ISLR");

                entity.Property(e => e.Sustraendo)
                    .HasColumnName("sustraendo")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CoIslrNavigation)
                    .WithMany(p => p.SaCobroRentenReng)
                    .HasForeignKey(d => d.CoIslr)
                    .HasConstraintName("FK_saCobroRentenReng_saConISLR");

                entity.HasOne(d => d.RowguidRengCobNavigation)
                    .WithMany(p => p.SaCobroRentenReng)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidRengCob)
                    .HasConstraintName("FK_saCobroRentenReng_saCobroDocReng");
            });

            modelBuilder.Entity<SaCobroRetenIvaReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.RowguidRengCob });

                entity.ToTable("saCobroRetenIvaReng");

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.RowguidRengCob).HasColumnName("rowguid_reng_cob");

                entity.Property(e => e.Alicuota)
                    .HasColumnName("alicuota")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.BaseImponible)
                    .HasColumnName("base_imponible")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaDocumento)
                    .HasColumnName("fecha_documento")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MontoDocumento)
                    .HasColumnName("monto_documento")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.MontoExcento)
                    .HasColumnName("monto_excento")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.MontoRetImp)
                    .HasColumnName("monto_ret_imp")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.NumComprobante)
                    .IsRequired()
                    .HasColumnName("num_comprobante")
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroControlDocumento)
                    .HasColumnName("numero_control_documento")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroDocumento)
                    .HasColumnName("numero_documento")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroDocumentoAfectado)
                    .IsRequired()
                    .HasColumnName("numero_documento_afectado")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroExpediente)
                    .IsRequired()
                    .HasColumnName("numero_expediente")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PeriodoImpositivo)
                    .HasColumnName("periodo_impositivo")
                    .HasColumnType("decimal(6, 0)");

                entity.Property(e => e.RetenTercero).HasColumnName("reten_tercero");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RifComprador)
                    .IsRequired()
                    .HasColumnName("rif_comprador")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RifContribuyente)
                    .IsRequired()
                    .HasColumnName("rif_contribuyente")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasColumnName("tipo_documento")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoOperacion)
                    .IsRequired()
                    .HasColumnName("tipo_operacion")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.RowguidRengCobNavigation)
                    .WithMany(p => p.SaCobroRetenIvaReng)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidRengCob)
                    .HasConstraintName("FK_saCobroRetenIvaReng_saCobroDocReng");
            });

            modelBuilder.Entity<SaCobroTpreng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.CobNum });

                entity.ToTable("saCobroTPReng");

                entity.HasIndex(e => e.CobNum);

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saCobroTPReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.CobNum)
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoBan)
                    .HasColumnName("co_ban")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTar)
                    .HasColumnName("co_tar")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVale)
                    .HasColumnName("co_vale")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del vale alimentacion");

                entity.Property(e => e.CodCaja)
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCta)
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Devuelto).HasColumnName("devuelto");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaChe)
                    .HasColumnName("fecha_che")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FormaPag)
                    .IsRequired()
                    .HasColumnName("forma_pag")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MontDoc)
                    .HasColumnName("mont_doc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MovNumB)
                    .HasColumnName("mov_num_b")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MovNumC)
                    .HasColumnName("mov_num_c")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CoBanNavigation)
                    .WithMany(p => p.SaCobroTpreng)
                    .HasForeignKey(d => d.CoBan)
                    .HasConstraintName("FK_saCobroTPReng_saBanco");

                entity.HasOne(d => d.CoTarNavigation)
                    .WithMany(p => p.SaCobroTpreng)
                    .HasForeignKey(d => d.CoTar)
                    .HasConstraintName("FK_saCobroTPReng_saTarjetaCredito");

                entity.HasOne(d => d.CoValeNavigation)
                    .WithMany(p => p.SaCobroTpreng)
                    .HasForeignKey(d => d.CoVale)
                    .HasConstraintName("FK_saCobroTPReng_pvValeAlimentacion");

                entity.HasOne(d => d.CobNumNavigation)
                    .WithMany(p => p.SaCobroTpreng)
                    .HasForeignKey(d => d.CobNum)
                    .HasConstraintName("FK_saCobroTPReng_saCobro");

                entity.HasOne(d => d.CodCajaNavigation)
                    .WithMany(p => p.SaCobroTpreng)
                    .HasForeignKey(d => d.CodCaja)
                    .HasConstraintName("FK_saCobroTPReng_saCaja");

                entity.HasOne(d => d.CodCtaNavigation)
                    .WithMany(p => p.SaCobroTpreng)
                    .HasForeignKey(d => d.CodCta)
                    .HasConstraintName("FK_saCobroTPReng_saCuentaBancaria");

                entity.HasOne(d => d.MovNumBNavigation)
                    .WithMany(p => p.SaCobroTpreng)
                    .HasForeignKey(d => d.MovNumB)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_saCobroTPReng_saMovimientoBanco");

                entity.HasOne(d => d.MovNumCNavigation)
                    .WithMany(p => p.SaCobroTpreng)
                    .HasForeignKey(d => d.MovNumC)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_saCobroTPReng_saMovimientoCaja");
            });

            modelBuilder.Entity<SaColor>(entity =>
            {
                entity.HasKey(e => e.CoColor);

                entity.ToTable("saColor");

                entity.HasIndex(e => e.DesColor)
                    .HasName("IX_saColor_Des_Color");

                entity.Property(e => e.CoColor)
                    .HasColumnName("co_color")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Color");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CampoAdic)
                    .HasColumnName("campo_Adic")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesColor)
                    .IsRequired()
                    .HasColumnName("des_color")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Color");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaComisionGeneracion>(entity =>
            {
                entity.HasKey(e => e.CoGeneracion);

                entity.ToTable("saComisionGeneracion");

                entity.Property(e => e.CoGeneracion)
                    .HasColumnName("co_generacion")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador de la generacion de comision");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoArtDesde)
                    .HasColumnName("co_art_desde")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArtHasta)
                    .HasColumnName("co_art_hasta")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCatDesde)
                    .HasColumnName("co_cat_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCatHasta)
                    .HasColumnName("co_cat_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoComi)
                    .IsRequired()
                    .HasColumnName("co_comi")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de comision relacionada a la generacion");

                entity.Property(e => e.CoLinDesde)
                    .HasColumnName("co_lin_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLinHasta)
                    .HasColumnName("co_lin_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVenDesde)
                    .HasColumnName("co_ven_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVenHasta)
                    .HasColumnName("co_ven_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentarios");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ejecucion de la generacion de comision");

                entity.Property(e => e.FechaDesde)
                    .HasColumnName("fecha_desde")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaHasta)
                    .HasColumnName("fecha_hasta")
                    .HasColumnType("datetime");

                entity.Property(e => e.PAdicional)
                    .HasColumnName("p_adicional")
                    .IsUnicode(false)
                    .HasComment("Parametro adicional. Comunmente empleado para anotar los filtros adicionales emlpeados en el calculo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoVenDesde)
                    .HasColumnName("tipo_ven_desde")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoVenHasta)
                    .HasColumnName("tipo_ven_hasta")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoArtDesdeNavigation)
                    .WithMany(p => p.SaComisionGeneracionCoArtDesdeNavigation)
                    .HasForeignKey(d => d.CoArtDesde)
                    .HasConstraintName("FK_saComisionGeneracion_saArticulo_desde");

                entity.HasOne(d => d.CoArtHastaNavigation)
                    .WithMany(p => p.SaComisionGeneracionCoArtHastaNavigation)
                    .HasForeignKey(d => d.CoArtHasta)
                    .HasConstraintName("FK_saComisionGeneracion_saArticulo_hasta");

                entity.HasOne(d => d.CoCatDesdeNavigation)
                    .WithMany(p => p.SaComisionGeneracionCoCatDesdeNavigation)
                    .HasForeignKey(d => d.CoCatDesde)
                    .HasConstraintName("FK_saComisionGeneracion_saCatArticulo_desde");

                entity.HasOne(d => d.CoCatHastaNavigation)
                    .WithMany(p => p.SaComisionGeneracionCoCatHastaNavigation)
                    .HasForeignKey(d => d.CoCatHasta)
                    .HasConstraintName("FK_saComisionGeneracion_saCatArticulo_hasta");

                entity.HasOne(d => d.CoComiNavigation)
                    .WithMany(p => p.SaComisionGeneracion)
                    .HasForeignKey(d => d.CoComi)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saComisionGeneracion_saComisionTipo");

                entity.HasOne(d => d.CoLinDesdeNavigation)
                    .WithMany(p => p.SaComisionGeneracionCoLinDesdeNavigation)
                    .HasForeignKey(d => d.CoLinDesde)
                    .HasConstraintName("FK_saComisionGeneracion_saLineaArticulo_desde");

                entity.HasOne(d => d.CoLinHastaNavigation)
                    .WithMany(p => p.SaComisionGeneracionCoLinHastaNavigation)
                    .HasForeignKey(d => d.CoLinHasta)
                    .HasConstraintName("FK_saComisionGeneracion_saLineaArticulo_hasta");

                entity.HasOne(d => d.CoVenDesdeNavigation)
                    .WithMany(p => p.SaComisionGeneracionCoVenDesdeNavigation)
                    .HasForeignKey(d => d.CoVenDesde)
                    .HasConstraintName("FK_saComisionGeneracion_saVendedor_desde");

                entity.HasOne(d => d.CoVenHastaNavigation)
                    .WithMany(p => p.SaComisionGeneracionCoVenHastaNavigation)
                    .HasForeignKey(d => d.CoVenHasta)
                    .HasConstraintName("FK_saComisionGeneracion_saVendedor_hasta");
            });

            modelBuilder.Entity<SaComisionPrecioArticulo>(entity =>
            {
                entity.HasKey(e => e.CoComip);

                entity.ToTable("saComisionPrecioArticulo");

                entity.HasIndex(e => new { e.CoArt, e.CoPrecio, e.TipoVen, e.AplicaEn })
                    .HasName("UK_saComisionPrecioArticulo")
                    .IsUnique();

                entity.Property(e => e.CoComip)
                    .HasColumnName("co_comip")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la comisision por nivel de precio");

                entity.Property(e => e.AplicaEn)
                    .IsRequired()
                    .HasColumnName("aplica_en")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesComip)
                    .HasColumnName("des_comip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la comisision por nivel de precio");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 2");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 3");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 4");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 5");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 1");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 2");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 3");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 4");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 5");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 6");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoVen)
                    .IsRequired()
                    .HasColumnName("tipo_ven")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Vendedor. A: Tipo A, B: Tipo B, C: Tipo C, D: Tipo D, E: Tipo E, F: Tipo F, G: Tipo G, H: Tipo H, I: Tipo I, J: Tipo J (fijo = VTI)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaComisionPrecioArticulo)
                    .HasForeignKey(d => d.CoArt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saComisionPrecioArticulo_saArticulo");

                entity.HasOne(d => d.CoPrecioNavigation)
                    .WithMany(p => p.SaComisionPrecioArticulo)
                    .HasForeignKey(d => d.CoPrecio)
                    .HasConstraintName("FK_saComisionPrecioArticulo_saTipoPrecio");
            });

            modelBuilder.Entity<SaComisionPrecioCategoria>(entity =>
            {
                entity.HasKey(e => e.CoComip);

                entity.ToTable("saComisionPrecioCategoria");

                entity.HasIndex(e => new { e.CoCat, e.CoPrecio, e.TipoVen, e.AplicaEn })
                    .HasName("UK_saComisionPrecioCategoria")
                    .IsUnique();

                entity.Property(e => e.CoComip)
                    .HasColumnName("co_comip")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la comisision por nivel de precio");

                entity.Property(e => e.AplicaEn)
                    .IsRequired()
                    .HasColumnName("aplica_en")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCat)
                    .IsRequired()
                    .HasColumnName("co_cat")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Categoria");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesComip)
                    .HasColumnName("des_comip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la comisision por nivel de precio");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 2");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 3");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 4");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 5");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 1");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 2");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 3");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 4");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 5");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 6");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoVen)
                    .IsRequired()
                    .HasColumnName("tipo_ven")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Vendedor. A: Tipo A, B: Tipo B, C: Tipo C, D: Tipo D, E: Tipo E, F: Tipo F, G: Tipo G, H: Tipo H, I: Tipo I, J: Tipo J (fijo = VTI)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCatNavigation)
                    .WithMany(p => p.SaComisionPrecioCategoria)
                    .HasForeignKey(d => d.CoCat)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saComisionPrecioCategoria_saCatArticulo");

                entity.HasOne(d => d.CoPrecioNavigation)
                    .WithMany(p => p.SaComisionPrecioCategoria)
                    .HasForeignKey(d => d.CoPrecio)
                    .HasConstraintName("FK_saComisionPrecioCategoria_saTipoPrecio");
            });

            modelBuilder.Entity<SaComisionPrecioLinea>(entity =>
            {
                entity.HasKey(e => e.CoComip);

                entity.ToTable("saComisionPrecioLinea");

                entity.HasIndex(e => new { e.CoLin, e.CoPrecio, e.TipoVen, e.AplicaEn })
                    .HasName("UK_saComisionPrecioLinea")
                    .IsUnique();

                entity.Property(e => e.CoComip)
                    .HasColumnName("co_comip")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la comisision por nivel de precio");

                entity.Property(e => e.AplicaEn)
                    .IsRequired()
                    .HasColumnName("aplica_en")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoLin)
                    .IsRequired()
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Linea");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesComip)
                    .HasColumnName("des_comip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la comisision por nivel de precio");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 2");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 3");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 4");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 5");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 1");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 2");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 3");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 4");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 5");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 6");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoVen)
                    .IsRequired()
                    .HasColumnName("tipo_ven")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Vendedor. A: Tipo A, B: Tipo B, C: Tipo C, D: Tipo D, E: Tipo E, F: Tipo F, G: Tipo G, H: Tipo H, I: Tipo I, J: Tipo J (fijo = VTI)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoLinNavigation)
                    .WithMany(p => p.SaComisionPrecioLinea)
                    .HasForeignKey(d => d.CoLin)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saComisionPrecioLinea_saLineaArticulo");

                entity.HasOne(d => d.CoPrecioNavigation)
                    .WithMany(p => p.SaComisionPrecioLinea)
                    .HasForeignKey(d => d.CoPrecio)
                    .HasConstraintName("FK_saComisionPrecioLinea_saTipoPrecio");
            });

            modelBuilder.Entity<SaComisionRentabArticulo>(entity =>
            {
                entity.HasKey(e => e.CoComir);

                entity.ToTable("saComisionRentabArticulo");

                entity.HasIndex(e => new { e.CoArt, e.TipoVen, e.AplicaEn })
                    .HasName("UK_saComisionRentabArticulo")
                    .IsUnique();

                entity.Property(e => e.CoComir)
                    .HasColumnName("co_comir")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de comision por rentabilidad");

                entity.Property(e => e.AplicaEn)
                    .IsRequired()
                    .HasColumnName("aplica_en")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Aplica en Venta o Cobro");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesComir)
                    .HasColumnName("des_comir")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de comision por rentabilidad");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 2");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 3");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 4");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 5");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 1");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 2");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 3");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 4");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 5");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 6");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoVen)
                    .IsRequired()
                    .HasColumnName("tipo_ven")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Vendedor. A: Tipo A, B: Tipo B, C: Tipo C, D: Tipo D, E: Tipo E, F: Tipo F, G: Tipo G, H: Tipo H, I: Tipo I, J: Tipo J (fijo = VTI)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaComisionRentabArticulo)
                    .HasForeignKey(d => d.CoArt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saComisionRentabArticulo_saArticulo");
            });

            modelBuilder.Entity<SaComisionRentabCategoria>(entity =>
            {
                entity.HasKey(e => e.CoComir);

                entity.ToTable("saComisionRentabCategoria");

                entity.HasIndex(e => new { e.CoCat, e.TipoVen, e.AplicaEn })
                    .HasName("UK_saComisionRentabCategoria")
                    .IsUnique();

                entity.Property(e => e.CoComir)
                    .HasColumnName("co_comir")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de comision por rentabilidad");

                entity.Property(e => e.AplicaEn)
                    .IsRequired()
                    .HasColumnName("aplica_en")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCat)
                    .IsRequired()
                    .HasColumnName("co_cat")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Categoria");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesComir)
                    .HasColumnName("des_comir")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de comision por rentabilidad");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 2");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 3");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 4");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 5");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 1");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 2");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 3");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 4");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 5");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 6");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoVen)
                    .IsRequired()
                    .HasColumnName("tipo_ven")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Vendedor. A: Tipo A, B: Tipo B, C: Tipo C, D: Tipo D, E: Tipo E, F: Tipo F, G: Tipo G, H: Tipo H, I: Tipo I, J: Tipo J (fijo = VTI)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCatNavigation)
                    .WithMany(p => p.SaComisionRentabCategoria)
                    .HasForeignKey(d => d.CoCat)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saComisionRentabCategoria_saCatArticulo");
            });

            modelBuilder.Entity<SaComisionRentabLinea>(entity =>
            {
                entity.HasKey(e => e.CoComir);

                entity.ToTable("saComisionRentabLinea");

                entity.HasIndex(e => new { e.CoLin, e.TipoVen, e.AplicaEn })
                    .HasName("UK_saComisionRentabLinea")
                    .IsUnique();

                entity.Property(e => e.CoComir)
                    .HasColumnName("co_comir")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de comision por rentabilidad");

                entity.Property(e => e.AplicaEn)
                    .IsRequired()
                    .HasColumnName("aplica_en")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoLin)
                    .IsRequired()
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Linea");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesComir)
                    .HasColumnName("des_comir")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de comision por rentabilidad");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 2");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 3");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 4");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de rentabilidad nivel 5");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 1");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 2");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 3");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 4");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 5");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comision nivel 6");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoVen)
                    .IsRequired()
                    .HasColumnName("tipo_ven")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Vendedor. A: Tipo A, B: Tipo B, C: Tipo C, D: Tipo D, E: Tipo E, F: Tipo F, G: Tipo G, H: Tipo H, I: Tipo I, J: Tipo J (fijo = VTI)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoLinNavigation)
                    .WithMany(p => p.SaComisionRentabLinea)
                    .HasForeignKey(d => d.CoLin)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saComisionRentabLinea_saLineaArticulo");
            });

            modelBuilder.Entity<SaComisionResultado>(entity =>
            {
                entity.HasKey(e => e.CoComiresult)
                    .HasName("PK_saComision");

                entity.ToTable("saComisionResultado");

                entity.Property(e => e.CoComiresult)
                    .HasColumnName("co_comiresult")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Aux01)
                    .HasColumnName("Aux_01")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Aux02)
                    .HasColumnName("Aux_02")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Aux03)
                    .HasColumnName("Aux_03")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Aux04)
                    .HasColumnName("Aux_04")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Aux05)
                    .HasColumnName("Aux_05")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CoGeneracion)
                    .IsRequired()
                    .HasColumnName("co_generacion")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha01)
                    .HasColumnName("fecha_01")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha02)
                    .HasColumnName("fecha_02")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha03)
                    .HasColumnName("fecha_03")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha04)
                    .HasColumnName("fecha_04")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha05)
                    .HasColumnName("fecha_05")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdOri).HasComment("Identificador unico del registro en la tabla de origen");

                entity.Property(e => e.Monto01)
                    .HasColumnName("Monto_01")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Monto02)
                    .HasColumnName("Monto_02")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Monto03)
                    .HasColumnName("Monto_03")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Monto04)
                    .HasColumnName("Monto_04")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Monto05)
                    .HasColumnName("Monto_05")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Monto06)
                    .HasColumnName("Monto_06")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Monto07)
                    .HasColumnName("Monto_07")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Monto08)
                    .HasColumnName("Monto_08")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Monto09)
                    .HasColumnName("Monto_09")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Monto10)
                    .HasColumnName("Monto_10")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TablaOri)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.CoGeneracionNavigation)
                    .WithMany(p => p.SaComisionResultado)
                    .HasForeignKey(d => d.CoGeneracion)
                    .HasConstraintName("FK_saComisionResultado_saComisionGeneracion");
            });

            modelBuilder.Entity<SaComisionTipo>(entity =>
            {
                entity.HasKey(e => e.CoComi);

                entity.ToTable("saComisionTipo");

                entity.Property(e => e.CoComi)
                    .HasColumnName("co_comi")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de comision");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesComi)
                    .IsRequired()
                    .HasColumnName("des_comi")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion del tipo de comision");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Tipo de comision inactiva");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaConIslr>(entity =>
            {
                entity.HasKey(e => e.CoIslr);

                entity.ToTable("saConISLR");

                entity.HasIndex(e => e.IslrDes);

                entity.Property(e => e.CoIslr)
                    .HasColumnName("co_islr")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del concepto de ISLR");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.IslrDes)
                    .IsRequired()
                    .HasColumnName("islr_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del concepto de ISLR");

                entity.Property(e => e.IslrDeslarga)
                    .HasColumnName("islr_deslarga")
                    .IsUnicode(false)
                    .HasComment("Descripción larga del concepto de ISLR");

                entity.Property(e => e.Literal)
                    .HasColumnName("literal")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Literal de la Ley del Impuesto Sobre La renta");

                entity.Property(e => e.Numeral)
                    .HasColumnName("numeral")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numeral de la Ley del Impuesto Sobre La renta");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaConcBanco>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.MovNum, e.CoAutoCon });

                entity.ToTable("saConcBanco");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon de conciliacion (FK)");

                entity.Property(e => e.MovNum)
                    .HasColumnName("mov_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de movimiento de bancario");

                entity.Property(e => e.CoAutoCon)
                    .HasColumnName("co_auto_con")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la conciliacion automatica");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.ConAuto)
                    .HasColumnName("con_auto")
                    .HasComment("Indica si fue conciliado de forma automatica");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecConc)
                    .HasColumnName("fec_conc")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la conciliacion bancaria");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.MovNumNavigation)
                    .WithMany(p => p.SaConcBanco)
                    .HasForeignKey(d => d.MovNum)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saConcBanco_saMovimientoBanco");

                entity.HasOne(d => d.SaConciliacionDetalle)
                    .WithMany(p => p.SaConcBanco)
                    .HasForeignKey(d => new { d.RengNum, d.CoAutoCon })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saConcBanco_saConciliacionDetalle");
            });

            modelBuilder.Entity<SaConciliacionAutoReng>(entity =>
            {
                entity.HasKey(e => e.CoAutoCon);

                entity.ToTable("saConciliacionAutoReng");

                entity.Property(e => e.CoAutoCon)
                    .HasColumnName("co_auto_con")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la conciliacion automatica");

                entity.Property(e => e.AnoArchivo)
                    .HasColumnName("anoArchivo")
                    .HasComment("Ano de la conciliacion");

                entity.Property(e => e.Archivo)
                    .HasColumnName("archivo")
                    .HasComment("Binario del archivo importado");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CodCta)
                    .IsRequired()
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la cuenta bancaria");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecImpor)
                    .HasColumnName("fecImpor")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de importacion del archivo");

                entity.Property(e => e.MesArchivo)
                    .HasColumnName("mesArchivo")
                    .HasComment("Mes de la conciliacion");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SaldoEc)
                    .HasColumnName("saldoEc")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("");

                entity.Property(e => e.TamanoPaquete).HasColumnName("tamanoPaquete");

                entity.Property(e => e.TotalCon)
                    .HasColumnName("totalCon")
                    .HasComment("Total de movimientos vonciliados");

                entity.Property(e => e.TotalMov)
                    .HasColumnName("totalMov")
                    .HasComment("Total de Movimientos Cargados");

                entity.Property(e => e.TotalRep)
                    .HasColumnName("totalRep")
                    .HasComment("Total de movimientos repetidos");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CodCtaNavigation)
                    .WithMany(p => p.SaConciliacionAutoReng)
                    .HasForeignKey(d => d.CodCta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saConciliacionAutoReng_saCuentaBancaria");
            });

            modelBuilder.Entity<SaConciliacionDetalle>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.CoAutoCon });

                entity.ToTable("saConciliacionDetalle");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAutoCon)
                    .HasColumnName("co_auto_con")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la conciliacion automatica");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DepCon)
                    .HasColumnName("dep_con")
                    .HasComment("indica si esta conciliado");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la operacion");

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecMov)
                    .HasColumnName("fec_mov")
                    .HasColumnType("datetime")
                    .HasComment("Fecha en que se realizo el movimiento");

                entity.Property(e => e.Idb)
                    .HasColumnName("idb")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Impuesto al debito bancario");

                entity.Property(e => e.MontoD)
                    .HasColumnName("monto_d")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del debe");

                entity.Property(e => e.MontoH)
                    .HasColumnName("monto_h")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del  Haber");

                entity.Property(e => e.Origen)
                    .HasColumnName("origen")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("*");

                entity.Property(e => e.Repetido)
                    .HasColumnName("repetido")
                    .HasComment("Indica si el movimiento esta repetido (cargado mas de una vez desde el banco)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoOp)
                    .HasColumnName("tipo_op")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("tipo de operacion");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAutoConNavigation)
                    .WithMany(p => p.SaConciliacionDetalle)
                    .HasForeignKey(d => d.CoAutoCon)
                    .HasConstraintName("FK_saConciliacionDetalle_saConciliacionAutoReng");
            });

            modelBuilder.Entity<SaCondicionPago>(entity =>
            {
                entity.HasKey(e => e.CoCond);

                entity.ToTable("saCondicionPago");

                entity.HasIndex(e => e.CondDes)
                    .HasName("IX_saCondicionPago_Cond_Des");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CondDes)
                    .IsRequired()
                    .HasColumnName("cond_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la condición de pago");

                entity.Property(e => e.DiasCred)
                    .HasColumnName("dias_cred")
                    .HasComment("Dias de credito permitido");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaConfigAjuste>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigAjuste");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigAjuste_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigAjuste")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigArticulo>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigArticulo");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigArticulo_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigArticulo")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigCliente>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigCliente");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigCliente_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigCliente")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigCobro>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigCobro");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigCobro_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigCobro")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigCotizacionCliente>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigCotizacionCliente");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigCotizacionCliente_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigCotizacionCliente")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigCotizacionProveedor>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigCotizacionProveedor");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigCotizacionProveedor_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoUsuario, e.CoMapa })
                    .HasName("UK_saConfigCotizacionProveedor")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigDevolucionCliente>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigDevolucionCliente");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigDevolucionCliente_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoUsuario, e.CoMapa })
                    .HasName("UK_saConfigDevolucionCliente")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigDevolucionProveedor>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigDevolucionProveedor");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigDevolucionProveedor_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoUsuario, e.CoMapa })
                    .HasName("UK_saConfigDevolucionProveedor")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigDistCosto>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigDistCosto");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigDistCosto_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigDistCosto")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigFacturaCompra>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigFacturaCompra");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigFacturaCompra_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoUsuario, e.CoMapa })
                    .HasName("UK_saConfigFacturaCompra")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigFacturaVenta>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigFacturaVenta");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigFacturaVenta_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigFacturaVenta")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigMovBanco>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigMovBanco");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigMovBanco_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigMovBanco")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigMovCaja>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigMovCaja");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigMovCaja_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigMovCaja")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigNotaDespachoVenta>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigNotaDespachoVenta");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigNotaDespachoVenta_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoUsuario, e.CoMapa })
                    .HasName("UK_saConfigNotaDespachoVenta")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigNotaEntregaVenta>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigNotaEntregaVenta");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigNotaEntregaVenta_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigNotaEntregaVenta")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigNotaRecepcionCompra>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigNotaRecepcionCompra");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigNotaRecepcionCompra__Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoUsuario, e.CoMapa })
                    .HasName("UK_saConfigNotaRecepcionCompra")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigOrdenCompra>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigOrdenCompra");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigOrdenCompra_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoUsuario, e.CoMapa })
                    .HasName("UK_saConfigOrdenCompra")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigOrdenPago>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigOrdenPago");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigOrdenPago_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigOrdenPago")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigPago>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigPago");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigPago_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigPago")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigPedidoVenta>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigPedidoVenta");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigPedidoVenta_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigPedidoVenta")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigPlantillaCompra>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigPlantillaCompra");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigPlantillaCompra_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoUsuario, e.CoMapa })
                    .HasName("UK_saConfigPlantillaCompra")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigPlantillaVenta>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigPlantillaVenta");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigPlantillaVenta_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoUsuario, e.CoMapa })
                    .HasName("UK_saConfigPlantillaVenta")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigProveedor>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigProveedor");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigProveedor_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigProveedor")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConfigTraslado>(entity =>
            {
                entity.HasKey(e => e.CoConfig);

                entity.ToTable("saConfigTraslado");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saConfigTraslado_Rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.CoMapa, e.CoUsuario })
                    .HasName("UK_saConfigTraslado")
                    .IsUnique();

                entity.Property(e => e.CoConfig)
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la configuracion de pantalla");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del mapa al que aplica la configuracion");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario al que aplica la configuracion");

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la configuracion de pantalla");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de controles (formato XML)");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml")
                    .HasComment("Almacena reglas de configuracion de reglas de negocio de pantallas (formato XML)");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml")
                    .HasComment("Reservado para futuras implementaciones");
            });

            modelBuilder.Entity<SaConsecutivo>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.CoConsecutivo });

                entity.ToTable("saConsecutivo");

                entity.Property(e => e.Codigo)
                    .HasColumnName("codigo")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del consecutivo (campo calculado = igual al de sucursal o al de la empresa)")
                    .HasComputedColumnSql("(isnull(isnull([co_emp],[co_sucur]),' '))");

                entity.Property(e => e.CoConsecutivo)
                    .HasColumnName("co_consecutivo")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la serie (consecutivo)");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la empresa");

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Valor del ultimo cosecutivo almacenado para un campo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoConsecutivoNavigation)
                    .WithMany(p => p.SaConsecutivo)
                    .HasForeignKey(d => d.CoConsecutivo)
                    .HasConstraintName("FK_saConsecutivo_saConsecutivoTipo");

                entity.HasOne(d => d.CoEmpNavigation)
                    .WithMany(p => p.SaConsecutivo)
                    .HasForeignKey(d => d.CoEmp)
                    .HasConstraintName("FK_saConsecutivo_par_emp");

                entity.HasOne(d => d.CoSerieNavigation)
                    .WithMany(p => p.SaConsecutivo)
                    .HasPrincipalKey(p => p.CoSerie)
                    .HasForeignKey(d => d.CoSerie)
                    .HasConstraintName("FK_saConsecutivo_saSerie");

                entity.HasOne(d => d.CoSucurNavigation)
                    .WithMany(p => p.SaConsecutivo)
                    .HasForeignKey(d => d.CoSucur)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_saConsecutivo_saSucursal");
            });

            modelBuilder.Entity<SaConsecutivoTipo>(entity =>
            {
                entity.HasKey(e => e.CoConsecutivo);

                entity.ToTable("saConsecutivoTipo");

                entity.Property(e => e.CoConsecutivo)
                    .HasColumnName("co_consecutivo")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la serie (consecutivo)");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesConsecutivo)
                    .IsRequired()
                    .HasColumnName("des_consecutivo")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion de la serie (consecutivo)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Modulo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("I: Inventario, Venta y CxC, C: Caja y Banco, Compra y CxP, T: Tablas Básicas");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Tabla)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("nombre de la tabla relacionada a la serie");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.UsoEmpresa)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Indica si la serie es aplicada a nivel de empresa");

                entity.Property(e => e.UsoSucursal).HasComment("Indica si la serie es aplicada a nivel de sucursal");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaCostoHistoricoEntrada>(entity =>
            {
                entity.HasKey(e => e.CodCostoHistoricoEntrada);

                entity.ToTable("saCostoHistoricoEntrada");

                entity.HasIndex(e => new { e.CodArticuloRowguid, e.CodAlmacen })
                    .HasName("IX_saCostoHistoricoEntrada_Articulo");

                entity.HasIndex(e => new { e.DocOrig, e.TipoDoc })
                    .HasName("IX_saCostoHistoricoEntrada_Documento");

                entity.HasIndex(e => new { e.FechaEmision, e.FechaRegistro, e.RengNum, e.TipoDoc })
                    .HasName("IX_saCostoHistoricoEntrada_UEPSPEPS");

                entity.Property(e => e.CodCostoHistoricoEntrada)
                    .HasColumnName("cod_costo_historico_entrada")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador unico del registro de entrada de costo");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad de articulos relacionados a la entrada de costo");

                entity.Property(e => e.CantidadUsada)
                    .HasColumnName("cantidad_usada")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad de ariculos relacionados en historico de salida  (UEPS, PEPS) ");

                entity.Property(e => e.CodAlmacen)
                    .IsRequired()
                    .HasColumnName("cod_almacen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CodArticuloRowguid)
                    .HasColumnName("cod_articulo_rowguid")
                    .HasComment("Identificador unico del articulo relacionado (saArticulo.rowguid)");

                entity.Property(e => e.CodCostoHistoricoSalidaOrig).HasColumnName("cod_costo_historico_salida_orig");

                entity.Property(e => e.Costo)
                    .HasColumnName("costo")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo del articulo");

                entity.Property(e => e.CostoPro)
                    .HasColumnName("costo_pro")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio");

                entity.Property(e => e.DocOrig)
                    .HasColumnName("doc_orig")
                    .HasComment("Identificador unico del registro del cual procede (saNombreTabla.rowguid)");

                entity.Property(e => e.FechaEmision)
                    .HasColumnName("fecha_emision")
                    .HasColumnType("datetime")
                    .HasComment("Fecha del documento asociado a la entrada de costo");

                entity.Property(e => e.FechaRecepcion)
                    .HasColumnName("fecha_recepcion")
                    .HasColumnType("datetime")
                    .HasComment("Reservado para implementaciones futuras");

                entity.Property(e => e.FechaRegistro)
                    .HasColumnName("fecha_registro")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de registro fisico en la base de datos del registro (Generalmente fe_us_in)");

                entity.Property(e => e.RengNum).HasColumnName("rengNum");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodAlmacenNavigation)
                    .WithMany(p => p.SaCostoHistoricoEntrada)
                    .HasForeignKey(d => d.CodAlmacen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCostoHistoricoEntrada_saAlmacen");

                entity.HasOne(d => d.CodArticuloRowgu)
                    .WithMany(p => p.SaCostoHistoricoEntrada)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.CodArticuloRowguid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCostoHistoricoEntrada_saArticulo");

                entity.HasOne(d => d.CodCostoHistoricoSalidaOrigNavigation)
                    .WithMany(p => p.SaCostoHistoricoEntrada)
                    .HasForeignKey(d => d.CodCostoHistoricoSalidaOrig)
                    .HasConstraintName("FK_saCostoHistoricoEntrada_saCostoHistoricoSalida");
            });

            modelBuilder.Entity<SaCostoHistoricoSalida>(entity =>
            {
                entity.HasKey(e => e.CodCostoHistoricoSalida);

                entity.ToTable("saCostoHistoricoSalida");

                entity.HasIndex(e => e.CodCostoHistoricoEntrada)
                    .HasName("IX_saCostoHistoricoSalida_Entrada");

                entity.HasIndex(e => new { e.DocOrig, e.TipoDoc })
                    .HasName("IX_saCostoHistoricoSalida_Documento");

                entity.Property(e => e.CodCostoHistoricoSalida)
                    .HasColumnName("cod_costo_historico_salida")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador unico del registro de salida de costo");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad de articulos");

                entity.Property(e => e.CodAlmacen)
                    .IsRequired()
                    .HasColumnName("cod_almacen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CodArticuloRowguid)
                    .HasColumnName("cod_articulo_rowguid")
                    .HasComment("Identificador unico del articulo relacionado (saArticulo.rowguid)");

                entity.Property(e => e.CodCostoHistoricoEntrada).HasColumnName("cod_costo_historico_entrada");

                entity.Property(e => e.CostoPro)
                    .HasColumnName("costo_pro")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio");

                entity.Property(e => e.DocOrig)
                    .HasColumnName("doc_orig")
                    .HasComment("Identificador unico del registro del cual procede (saNombreTabla.rowguid)");

                entity.Property(e => e.FechaEmision)
                    .HasColumnName("fecha_emision")
                    .HasColumnType("datetime")
                    .HasComment("Fecha del documento asociado a la salida");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodAlmacenNavigation)
                    .WithMany(p => p.SaCostoHistoricoSalida)
                    .HasForeignKey(d => d.CodAlmacen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCostoHistoricoSalida_saAlmacen");

                entity.HasOne(d => d.CodArticuloRowgu)
                    .WithMany(p => p.SaCostoHistoricoSalida)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.CodArticuloRowguid)
                    .HasConstraintName("FK_saCostoHistoricoSalida_saArticulo");

                entity.HasOne(d => d.CodCostoHistoricoEntradaNavigation)
                    .WithMany(p => p.SaCostoHistoricoSalida)
                    .HasForeignKey(d => d.CodCostoHistoricoEntrada)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_saCostoHistoricoSalida_saCostoHistoricoEntrada");
            });

            modelBuilder.Entity<SaCotizacionCliente>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saCotizacionCliente");

                entity.HasIndex(e => e.CoCli);

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saCotizacionCliente_moneda");

                entity.HasIndex(e => e.CoTran);

                entity.HasIndex(e => e.CoVen);

                entity.HasIndex(e => e.FeUsMo);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saCotizacionCliente_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saCotizacionCliente_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Cliente");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de transporte");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Contrib)
                    .HasColumnName("contrib")
                    .HasComment("Indica si el documento fue emitido a un contibuyente");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Serial de la impresora por la que se emitio la factura (reservado para futuras imlpementaciones)");

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de factura fiscal");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VenTer)
                    .HasColumnName("ven_ter")
                    .HasComment("Venta realizada por un tercero (usado en libro de venta)");

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaCotizacionCliente)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionCliente_saCliente");

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaCotizacionCliente)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saCotizacionCliente_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaCotizacionCliente)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saCotizacionCliente_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaCotizacionCliente)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionCliente_saMoneda");

                entity.HasOne(d => d.CoTranNavigation)
                    .WithMany(p => p.SaCotizacionCliente)
                    .HasForeignKey(d => d.CoTran)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionCliente_saTransporte");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaCotizacionCliente)
                    .HasForeignKey(d => d.CoVen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionCliente_saVendedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaCotizacionCliente)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saCotizacionCliente_saTax");
            });

            modelBuilder.Entity<SaCotizacionClienteReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saCotizacionClienteReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saCotizacionClienteReng_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saCotizacionClienteReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 2 global");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 3 global");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 1 global");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente al recargo global");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 1 global");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 2 global");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 3 global");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PrecVta)
                    .HasColumnName("prec_vta")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Precio de venta o compra");

                entity.Property(e => e.PrecVtaOm)
                    .HasColumnName("prec_vta_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguid_doc");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaCotizacionClienteReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionClienteReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaCotizacionClienteReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saCotizacionClienteReng_saCotizacionCliente");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaCotizacionClienteRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionClienteReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaCotizacionClienteRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saCotizacionClienteReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaCotizacionProveedor>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saCotizacionProveedor");

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone);

                entity.HasIndex(e => e.CoProv);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saCotizacionProveedor_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saCotizacionProveedor_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Nac)
                    .HasColumnName("nac")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesE)
                    .HasColumnName("seriales_e")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaCotizacionProveedor)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saCotizacionProveedor_saCondicionPago");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaCotizacionProveedor)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionProveedor_saMoneda");

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaCotizacionProveedor)
                    .HasForeignKey(d => d.CoProv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionProveedor_saProveedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaCotizacionProveedor)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saCotizacionProveedor_saTax");
            });

            modelBuilder.Entity<SaCotizacionProveedorReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saCotizacionProveedorReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saCotizacionProveedorReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saCotizacionProveedorReng_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TipoImp);

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostUnitOm)
                    .HasColumnName("cost_unit_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario en otra moneda (reservado para futuras implementaciones)");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio unitario");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Ultimo costo Otra moneda");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Promedio Otra Moneda");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcGas)
                    .HasColumnName("porc_gas")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de arancel");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguid_doc");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaCotizacionProveedorReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionProveedorReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaCotizacionProveedorReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saCotizacionProveedorReng_saCotizacionProveedor");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaCotizacionProveedorRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCotizacionProveedorReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaCotizacionProveedorRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saCotizacionProveedorReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaCuentaBancaria>(entity =>
            {
                entity.HasKey(e => e.CodCta);

                entity.ToTable("saCuentaBancaria");

                entity.HasIndex(e => e.CoBan)
                    .HasName("IX_saCuentaBancaria_Co_anco");

                entity.HasIndex(e => e.NumCta);

                entity.HasIndex(e => new { e.CoBan, e.NumCta })
                    .HasName("UK_saCuentaBancaria");

                entity.Property(e => e.CodCta)
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la cuenta bancaria");

                entity.Property(e => e.AuxImp01)
                    .HasColumnName("aux_imp01")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AuxImp02)
                    .HasColumnName("aux_imp02")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoBan)
                    .IsRequired()
                    .HasColumnName("co_ban")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del banco asociado");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Direccion)
                    .HasColumnName("direccion")
                    .IsUnicode(false)
                    .HasComment("Dirección");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.EjecCu)
                    .HasColumnName("ejec_cu")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Ejecutivo de la cuenta");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Correo electronico");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecChra)
                    .HasColumnName("fec_chra")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de inicia de uso de la chequera");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Fecini)
                    .HasColumnName("fecini")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de la ultima conciliacion");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indicativo de registro inactivo");

                entity.Property(e => e.MesIni)
                    .HasColumnName("mes_ini")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de inicio");

                entity.Property(e => e.NumCta)
                    .IsRequired()
                    .HasColumnName("num_cta")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Número de la cuenta");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Sucursal)
                    .HasColumnName("sucursal")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Nombre de la agencia al cual pertenece la cuenta");

                entity.Property(e => e.Telefonos)
                    .HasColumnName("telefonos")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Información sobre telefonos");

                entity.Property(e => e.TipoCu)
                    .IsRequired()
                    .HasColumnName("tipo_cu")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Tipo de Cuenta (fijo= CTA). A: AHORRO, C: CORRIENTE");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.UsaChra)
                    .HasColumnName("usa_chra")
                    .HasComment("Cuenta maneja chequera");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoBanNavigation)
                    .WithMany(p => p.SaCuentaBancaria)
                    .HasForeignKey(d => d.CoBan)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCuentaBancaria_saBanco");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaCuentaBancaria)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saCuentaBancaria_saMoneda");
            });

            modelBuilder.Entity<SaCuentaIngEgr>(entity =>
            {
                entity.HasKey(e => e.CoCtaIngrEgr);

                entity.ToTable("saCuentaIngEgr");

                entity.HasIndex(e => e.CoIslr)
                    .HasName("IX_saCuentaIngEgr_Co_Islr");

                entity.HasIndex(e => e.Descrip)
                    .HasName("IX_saCuentaIngEgr_Descrip");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de ingreso/egreso");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoIslr)
                    .HasColumnName("co_islr")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Concepto de I.S.L.R.");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Descrip)
                    .IsRequired()
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoIslrNavigation)
                    .WithMany(p => p.SaCuentaIngEgr)
                    .HasForeignKey(d => d.CoIslr)
                    .HasConstraintName("FK_saCuentaIngEgr_saConISLR");
            });

            modelBuilder.Entity<SaDatosDeImportacion>(entity =>
            {
                entity.HasKey(e => e.RowguidFacturaRenglon);

                entity.ToTable("saDatosDeImportacion");

                entity.Property(e => e.RowguidFacturaRenglon)
                    .HasColumnName("rowguid_factura_renglon")
                    .HasComment("Rowguid del renglón de la Factura al Tesoro Nacional")
                    .ValueGeneratedNever();

                entity.Property(e => e.BlAwbCpi)
                    .HasColumnName("bl_awb_cpi")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("BL/AWB/CPI");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FactNum)
                    .IsRequired()
                    .HasColumnName("fact_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de Factura de Importación");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasComment("Tipo Impuesto");

                entity.Property(e => e.TasaValor)
                    .HasColumnName("tasa_valor")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje del impuesto");

                entity.Property(e => e.TotalImp)
                    .HasColumnName("total_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del Impuesto");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.FactNumNavigation)
                    .WithMany(p => p.SaDatosDeImportacion)
                    .HasForeignKey(d => d.FactNum)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDatosDeImportacion_saFacturaCompra");

                entity.HasOne(d => d.RowguidFacturaRenglonNavigation)
                    .WithOne(p => p.SaDatosDeImportacion)
                    .HasPrincipalKey<SaFacturaCompraReng>(p => p.Rowguid)
                    .HasForeignKey<SaDatosDeImportacion>(d => d.RowguidFacturaRenglon)
                    .HasConstraintName("FK_saDatosDeImportacion_saFacturaCompraReng");
            });

            modelBuilder.Entity<SaDepositoBanco>(entity =>
            {
                entity.HasKey(e => e.DepNum);

                entity.ToTable("saDepositoBanco");

                entity.HasIndex(e => e.CoCtaIngrEgr)
                    .HasName("IX_saDepositoBanco_cta_egre");

                entity.HasIndex(e => e.CodCaja);

                entity.HasIndex(e => e.CodCta);

                entity.HasIndex(e => e.Fecha);

                entity.HasIndex(e => new { e.Deposito, e.CodCta })
                    .HasName("UK_saDepositoBanco")
                    .IsUnique();

                entity.HasIndex(e => new { e.Feccom, e.Numcom });

                entity.Property(e => e.DepNum)
                    .HasColumnName("dep_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del depósito bancario");

                entity.Property(e => e.Activado)
                    .HasColumnName("activado")
                    .HasComment("Indica si el deposito esta procesado");

                entity.Property(e => e.Aux01)
                    .HasColumnName("aux01")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Aux02)
                    .HasColumnName("aux02")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CheDev)
                    .HasColumnName("che_dev")
                    .HasComment("Marca que indica si este deposito posee un cheque devuelto.");

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de egreso");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CodCaja)
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Caja del efectivo");

                entity.Property(e => e.CodCta)
                    .IsRequired()
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la cuenta bancaria");

                entity.Property(e => e.Deposito)
                    .IsRequired()
                    .HasColumnName("deposito")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de la Planilla del banco");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Movimiento");

                entity.Property(e => e.MovNumB)
                    .HasColumnName("mov_num_b")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de Movimiento creado en Banco");

                entity.Property(e => e.MovNumC)
                    .HasColumnName("mov_num_c")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de Movimiento creado en caja asociado al efectivo depositado");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalEfec)
                    .HasColumnName("total_efec")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total en Efectivo");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaDepositoBanco)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDepositoBanco_saCuentaIngEgr");

                entity.HasOne(d => d.CodCajaNavigation)
                    .WithMany(p => p.SaDepositoBanco)
                    .HasForeignKey(d => d.CodCaja)
                    .HasConstraintName("FK_saDepositoBanco_saCaja");

                entity.HasOne(d => d.CodCtaNavigation)
                    .WithMany(p => p.SaDepositoBanco)
                    .HasForeignKey(d => d.CodCta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDepositoBanco_saCuentaBancaria");
            });

            modelBuilder.Entity<SaDepositoBancoReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.DepNum });

                entity.ToTable("saDepositoBancoReng");

                entity.HasIndex(e => e.Codigo);

                entity.HasIndex(e => e.DepNum);

                entity.HasIndex(e => e.RengNum);

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.DepNum)
                    .HasColumnName("dep_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del depósito bancario");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasColumnName("codigo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Banco asociado al movimiento");

                entity.Property(e => e.Comision)
                    .HasColumnName("comision")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Comisión total de las tarjetas que se están depositando");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impuesto)
                    .HasColumnName("impuesto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Impuesto total de las tarjetas que se están depositando");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de la operación");

                entity.Property(e => e.MovAfecC)
                    .IsRequired()
                    .HasColumnName("mov_afec_c")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Movimiento que afecta");

                entity.Property(e => e.MovGeneC)
                    .HasColumnName("mov_gene_c")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de movimiento de caja generado en el deposito");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoPlazo)
                    .HasColumnName("tipo_plazo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("1 = Mismo Banco, Misma Plaza, 2 = Mismo Banco, Diferente Plaza, 3 = Diferente Banco, Misma Plaza, 4 = Diferente Banco, Diferente Plaza");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.SaDepositoBancoReng)
                    .HasForeignKey(d => d.Codigo)
                    .HasConstraintName("FK_saDepositoBancoReng_saCaja");

                entity.HasOne(d => d.DepNumNavigation)
                    .WithMany(p => p.SaDepositoBancoReng)
                    .HasForeignKey(d => d.DepNum)
                    .HasConstraintName("FK_saDepositoBancoReng_saDepositoBanco");

                entity.HasOne(d => d.MovAfecCNavigation)
                    .WithMany(p => p.SaDepositoBancoRengMovAfecCNavigation)
                    .HasForeignKey(d => d.MovAfecC)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDepositoBancoReng_saMovimientoCajaAfec");

                entity.HasOne(d => d.MovGeneCNavigation)
                    .WithMany(p => p.SaDepositoBancoRengMovGeneCNavigation)
                    .HasForeignKey(d => d.MovGeneC)
                    .HasConstraintName("FK_saDepositoBancoReng_saMovimientoCajaGene");
            });

            modelBuilder.Entity<SaDescArticulo>(entity =>
            {
                entity.HasKey(e => e.CoDesc);

                entity.ToTable("saDescArticulo");

                entity.HasIndex(e => new { e.TipCli, e.CoArt, e.FechaIni })
                    .HasName("UK_saDescArticulo")
                    .IsUnique();

                entity.Property(e => e.CoDesc)
                    .HasColumnName("co_desc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesDes)
                    .HasColumnName("des_des")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaFin)
                    .HasColumnName("fecha_fin")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaIni)
                    .HasColumnName("fecha_ini")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad Vendida nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Limite superior de la segunda escala");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Limite superior de la tercera escala");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Limite superior de la cuarta escala");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Limite superior de la quinta escala");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de la primera escala");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de la segunda escala");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de la tercera escala");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de la cuarta escala");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de la quinta escala");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de la sexta escala");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipCli)
                    .IsRequired()
                    .HasColumnName("tip_cli")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaDescArticulo)
                    .HasForeignKey(d => d.CoArt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDescArticulo_saArticulo");

                entity.HasOne(d => d.TipCliNavigation)
                    .WithMany(p => p.SaDescArticulo)
                    .HasForeignKey(d => d.TipCli)
                    .HasConstraintName("FK_saDescArticulo_saTipoCliente");
            });

            modelBuilder.Entity<SaDescCategoria>(entity =>
            {
                entity.HasKey(e => e.CoDesc);

                entity.ToTable("saDescCategoria");

                entity.HasIndex(e => new { e.TipCli, e.CoCat, e.FechaIni })
                    .HasName("UK_saDescCategoria")
                    .IsUnique();

                entity.Property(e => e.CoDesc)
                    .HasColumnName("co_desc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCat)
                    .IsRequired()
                    .HasColumnName("co_cat")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Categoria");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesDes)
                    .HasColumnName("des_des")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaFin)
                    .HasColumnName("fecha_fin")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaIni)
                    .HasColumnName("fecha_ini")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad Vendida nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipCli)
                    .IsRequired()
                    .HasColumnName("tip_cli")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCatNavigation)
                    .WithMany(p => p.SaDescCategoria)
                    .HasForeignKey(d => d.CoCat)
                    .HasConstraintName("FK_saDescCategoria_saCatArticulo");

                entity.HasOne(d => d.TipCliNavigation)
                    .WithMany(p => p.SaDescCategoria)
                    .HasForeignKey(d => d.TipCli)
                    .HasConstraintName("FK_saDescCategoria_saTipoCliente");
            });

            modelBuilder.Entity<SaDescLinea>(entity =>
            {
                entity.HasKey(e => e.CoDesc);

                entity.ToTable("saDescLinea");

                entity.HasIndex(e => new { e.TipCli, e.CoLin, e.FechaIni })
                    .HasName("UK_saDescLinea")
                    .IsUnique();

                entity.Property(e => e.CoDesc)
                    .HasColumnName("co_desc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoLin)
                    .IsRequired()
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Linea");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesDes)
                    .HasColumnName("des_des")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaFin)
                    .HasColumnName("fecha_fin")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaIni)
                    .HasColumnName("fecha_ini")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad Vendida nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipCli)
                    .IsRequired()
                    .HasColumnName("tip_cli")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoLinNavigation)
                    .WithMany(p => p.SaDescLinea)
                    .HasForeignKey(d => d.CoLin)
                    .HasConstraintName("FK_saDescLinea_saLineaArticulo");

                entity.HasOne(d => d.TipCliNavigation)
                    .WithMany(p => p.SaDescLinea)
                    .HasForeignKey(d => d.TipCli)
                    .HasConstraintName("FK_saDescLinea_saTipoCliente");
            });

            modelBuilder.Entity<SaDescProntoPago>(entity =>
            {
                entity.HasKey(e => e.CoDesc);

                entity.ToTable("saDescProntoPago");

                entity.HasIndex(e => e.TipCli)
                    .HasName("UK_saDescProntoPago")
                    .IsUnique();

                entity.Property(e => e.CoDesc)
                    .HasColumnName("co_desc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesDes)
                    .IsRequired()
                    .HasColumnName("des_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Hasta1)
                    .HasColumnName("hasta1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Cantidad Vendida nivel 1");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("hasta2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Limite superior de la segunda escala");

                entity.Property(e => e.Hasta3)
                    .HasColumnName("hasta3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Limite superior de la tercera escala");

                entity.Property(e => e.Hasta4)
                    .HasColumnName("hasta4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Limite superior de la cuarta escala");

                entity.Property(e => e.Hasta5)
                    .HasColumnName("hasta5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Limite superior de la quinta escala");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de la primera escala");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de la segunda escala");

                entity.Property(e => e.Porc3)
                    .HasColumnName("porc3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de la tercera escala");

                entity.Property(e => e.Porc4)
                    .HasColumnName("porc4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de la cuarta escala");

                entity.Property(e => e.Porc5)
                    .HasColumnName("porc5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de la quinta escala");

                entity.Property(e => e.Porc6)
                    .HasColumnName("porc6")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de la sexta escala");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipCli)
                    .IsRequired()
                    .HasColumnName("tip_cli")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del tipo de cliente al cual se le aplica el descuento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TipCliNavigation)
                    .WithOne(p => p.SaDescProntoPago)
                    .HasForeignKey<SaDescProntoPago>(d => d.TipCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDescProntoPago_saTipoCliente");
            });

            modelBuilder.Entity<SaDevolucionCliente>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saDevolucionCliente");

                entity.HasIndex(e => e.CoCli);

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saDevolucionCliente_moneda");

                entity.HasIndex(e => e.CoTran);

                entity.HasIndex(e => e.CoVen);

                entity.HasIndex(e => e.FeUsMo);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saDevolucionCliente_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saDevolucionCliente_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Cliente");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de transporte");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Contrib)
                    .HasColumnName("contrib")
                    .HasComment("Indica si el documento fue emitido a un contibuyente");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Serial de la impresora por la que se emitio la factura (reservado para futuras imlpementaciones)");

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Numero de factura fiscal");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.MovNumB)
                    .HasColumnName("mov_num_b")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MovNumC)
                    .HasColumnName("mov_num_c")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesE)
                    .HasColumnName("seriales_e")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VenTer)
                    .HasColumnName("ven_ter")
                    .HasComment("Venta realizada por un tercero (usado en libro de venta)");

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionCliente_saCliente");

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saDevolucionCliente_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saDevolucionCliente_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionCliente_saMoneda");

                entity.HasOne(d => d.CoTranNavigation)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => d.CoTran)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionCliente_saTransporte");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => d.CoVen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionCliente_saVendedor");

                entity.HasOne(d => d.MovNumBNavigation)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => d.MovNumB)
                    .HasConstraintName("FK_saDevolucionCliente_saMovimientoBanco");

                entity.HasOne(d => d.MovNumCNavigation)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => d.MovNumC)
                    .HasConstraintName("FK_saDevolucionCliente_saMovimientoCaja");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saDevolucionCliente_saTax");

                entity.HasOne(d => d.SaDocumentoVenta)
                    .WithMany(p => p.SaDevolucionCliente)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .HasConstraintName("FK_saDevolucionCliente_saDocumentoVenta");
            });

            modelBuilder.Entity<SaDevolucionClienteReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saDevolucionClienteReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saDevolucionClienteReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saDevolucionClienteReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 2 global");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 3 global");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 1 global");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente al recargo global");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 1 global");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 2 global");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 3 global");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PrecVta)
                    .HasColumnName("prec_vta")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Precio de venta o compra");

                entity.Property(e => e.PrecVtaOm)
                    .HasColumnName("prec_vta_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc)
                    .HasColumnName("rowguid_doc")
                    .HasComment("identificador del renglon importado");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaDevolucionClienteReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionClienteReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaDevolucionClienteReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saDevolucionClienteReng_saDevolucionCliente");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaDevolucionClienteRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionClienteReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaDevolucionClienteRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saDevolucionClienteReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaDevolucionProveedor>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saDevolucionProveedor");

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone);

                entity.HasIndex(e => e.CoProv);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saDevolucionProveedor_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saDevolucionProveedor_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Cuenta de Ingreso/Egreso asociado al documento");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.MovNumB)
                    .HasColumnName("mov_num_b")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MovNumC)
                    .HasColumnName("mov_num_c")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Nac)
                    .HasColumnName("nac")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaDevolucionProveedor)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saDevolucionProveedor_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaDevolucionProveedor)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saDevolucionProveedor_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaDevolucionProveedor)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionProveedor_saMoneda");

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaDevolucionProveedor)
                    .HasForeignKey(d => d.CoProv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionProveedor_saProveedor");

                entity.HasOne(d => d.MovNumBNavigation)
                    .WithMany(p => p.SaDevolucionProveedor)
                    .HasForeignKey(d => d.MovNumB)
                    .HasConstraintName("FK_saDevolucionProveedor_saMovimientoBanco");

                entity.HasOne(d => d.MovNumCNavigation)
                    .WithMany(p => p.SaDevolucionProveedor)
                    .HasForeignKey(d => d.MovNumC)
                    .HasConstraintName("FK_saDevolucionProveedor_saMovimientoCaja");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaDevolucionProveedor)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saDevolucionProveedor_saTax");

                entity.HasOne(d => d.SaDocumentoCompra)
                    .WithMany(p => p.SaDevolucionProveedor)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .HasConstraintName("FK_saDevolucionProveedor_saDocumentoCompra");
            });

            modelBuilder.Entity<SaDevolucionProveedorReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saDevolucionProveedorReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saDevolucionProveedorReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saDevolucionProveedorReng_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TipoImp);

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostUnitOm)
                    .HasColumnName("cost_unit_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario en otra moneda (reservado para futuras implementaciones)");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio unitario");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Ultimo costo Otra moneda");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Promedio Otra Moneda");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcGas)
                    .HasColumnName("porc_gas")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de arancel");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguid_doc");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaDevolucionProveedorReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionProveedorReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaDevolucionProveedorReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saDevolucionProveedorReng_saDevolucionProveedor");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaDevolucionProveedorRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDevolucionProveedorReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaDevolucionProveedorRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saDevolucionProveedorReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaDevolucionProveedorRengExt>(entity =>
            {
                entity.HasKey(e => e.RowguidReng);

                entity.ToTable("saDevolucionProveedorRengExt");

                entity.Property(e => e.RowguidReng)
                    .HasColumnName("rowguid_reng")
                    .HasComment("Identificador único (Tabla saDevolucionProveedorReng)")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.CreditoFiscal)
                    .IsRequired()
                    .HasColumnName("credito_fiscal")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Indica el tipo de crédito fiscal para el artículo en el renglón (0: No Deducible, 1: Totalmente Deducible, 2: Sujeto a Prorrateo, 3: Ninguno de los Anteriores)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.SinDerCreFis)
                    .HasColumnName("sin_der_cre_fis")
                    .HasComment("Indica si en el renglón de la devolucion el articulo esta marcado \"Sin credito Fiscal\"");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidRengNavigation)
                    .WithOne(p => p.SaDevolucionProveedorRengExt)
                    .HasPrincipalKey<SaDevolucionProveedorReng>(p => p.Rowguid)
                    .HasForeignKey<SaDevolucionProveedorRengExt>(d => d.RowguidReng)
                    .HasConstraintName("FK_saDevolucionProveedorRengExt_saDevolucionProveedorReng");
            });

            modelBuilder.Entity<SaDistribCosto>(entity =>
            {
                entity.HasKey(e => e.DistribNum);

                entity.ToTable("saDistribCosto");

                entity.Property(e => e.DistribNum)
                    .HasColumnName("distrib_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la distribucion de costos");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro se encuentra o no anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion del registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del registro");

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaDistribCostoDestinoReng>(entity =>
            {
                entity.HasKey(e => new { e.DistribNum, e.RengNum });

                entity.ToTable("saDistribCostoDestinoReng");

                entity.HasIndex(e => new { e.DistribNum, e.RowguidComp })
                    .HasName("UK_saDistribCostoDestinoReng")
                    .IsUnique();

                entity.Property(e => e.DistribNum)
                    .HasColumnName("distrib_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("codigo de la distribucion de costos");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de renglon");

                entity.Property(e => e.CoIncoterm)
                    .HasColumnName("co_incoterm")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidComp)
                    .HasColumnName("rowguid_comp")
                    .HasComment("Rowguid del renglon de la Factura de Compra destino");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CoIncotermNavigation)
                    .WithMany(p => p.SaDistribCostoDestinoReng)
                    .HasForeignKey(d => d.CoIncoterm)
                    .HasConstraintName("FK_saDistribCostoDestinoReng_saIncoterm");

                entity.HasOne(d => d.DistribNumNavigation)
                    .WithMany(p => p.SaDistribCostoDestinoReng)
                    .HasForeignKey(d => d.DistribNum)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDistribCostoDestinoReng_saDistribCosto");

                entity.HasOne(d => d.RowguidCompNavigation)
                    .WithMany(p => p.SaDistribCostoDestinoReng)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidComp)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDistribCostoDestinoReng_saFacturaCompraReng");
            });

            modelBuilder.Entity<SaDistribCostoOrigenReng>(entity =>
            {
                entity.HasKey(e => new { e.DistribNum, e.RengNum });

                entity.ToTable("saDistribCostoOrigenReng");

                entity.HasIndex(e => new { e.DistribNum, e.RowguidCalculado })
                    .HasName("UK_saDistribCostoOrigenReng")
                    .IsUnique();

                entity.Property(e => e.DistribNum)
                    .HasColumnName("distrib_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la distribucion de costos");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de renglon");

                entity.Property(e => e.CoIncoterm)
                    .HasColumnName("co_incoterm")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.MontoAp)
                    .HasColumnName("monto_ap")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidCalculado)
                    .HasColumnName("rowguid_calculado")
                    .HasComputedColumnSql("(isnull(isnull([rowguid_comp],[rowguid_pcom]),'00000000-0000-0000-0000-000000000000'))");

                entity.Property(e => e.RowguidComp)
                    .HasColumnName("rowguid_comp")
                    .HasComment("Rowguid del renglon de Factura de Compra origen");

                entity.Property(e => e.RowguidPcom)
                    .HasColumnName("rowguid_pcom")
                    .HasComment("Rowguid del renglon de Plantilla de Compra origen");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CoIncotermNavigation)
                    .WithMany(p => p.SaDistribCostoOrigenReng)
                    .HasForeignKey(d => d.CoIncoterm)
                    .HasConstraintName("FK_saDistribCostoOrigenReng_saIncoterm");

                entity.HasOne(d => d.DistribNumNavigation)
                    .WithMany(p => p.SaDistribCostoOrigenReng)
                    .HasForeignKey(d => d.DistribNum)
                    .HasConstraintName("FK_saDistribCostoOrigenReng_saDistribCosto");

                entity.HasOne(d => d.RowguidCompNavigation)
                    .WithMany(p => p.SaDistribCostoOrigenReng)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidComp)
                    .HasConstraintName("FK_saDistribCostoOrigenReng_saFacturaCompraReng");

                entity.HasOne(d => d.RowguidPcomNavigation)
                    .WithMany(p => p.SaDistribCostoOrigenReng)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidPcom)
                    .HasConstraintName("FK_saDistribCostoOrigenReng_saPlantillaCompraReng");
            });

            modelBuilder.Entity<SaDistribCostoRelaReng>(entity =>
            {
                entity.HasKey(e => new { e.DistribNumDestino, e.RengNumDestino, e.DistribNumOrigen, e.RengNumOrigen });

                entity.ToTable("saDistribCostoRelaReng");

                entity.Property(e => e.DistribNumDestino)
                    .HasColumnName("distrib_num_destino")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del costo distribuido destino");

                entity.Property(e => e.RengNumDestino)
                    .HasColumnName("reng_num_destino")
                    .HasComment("Renglon del costo distribuido destino");

                entity.Property(e => e.DistribNumOrigen)
                    .HasColumnName("distrib_num_origen")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del costo distribuido origen");

                entity.Property(e => e.RengNumOrigen)
                    .HasColumnName("reng_num_origen")
                    .HasComment("Renglon del costo distribuido origen");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoDistrib)
                    .IsRequired()
                    .HasColumnName("tipo_distrib")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.SaDistribCostoDestinoReng)
                    .WithMany(p => p.SaDistribCostoRelaReng)
                    .HasForeignKey(d => new { d.DistribNumDestino, d.RengNumDestino })
                    .HasConstraintName("FK_saDistribCostoRelaReng_saDistribCostoDestinoReng");

                entity.HasOne(d => d.SaDistribCostoOrigenReng)
                    .WithMany(p => p.SaDistribCostoRelaReng)
                    .HasForeignKey(d => new { d.DistribNumOrigen, d.RengNumOrigen })
                    .HasConstraintName("FK_saDistribCostoRelaReng_saDistribCostoOrigenReng");
            });

            modelBuilder.Entity<SaDocumentoCompra>(entity =>
            {
                entity.HasKey(e => new { e.CoTipoDoc, e.NroDoc });

                entity.ToTable("saDocumentoCompra");

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saDocumentoCompra_moneda");

                entity.HasIndex(e => e.CoProv)
                    .HasName("IX_saDocumentoCompra_co_cli");

                entity.HasIndex(e => e.CoTipoDoc);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.NroDoc);

                entity.HasIndex(e => e.NroFact);

                entity.HasIndex(e => e.Pagar);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saDocumentoCompra_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Saldo);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saDocumentoCompra_contabilidad");

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de donde fué importado");

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del Documento");

                entity.Property(e => e.Adicional)
                    .HasColumnName("adicional")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto adicional");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Aut)
                    .HasColumnName("aut")
                    .HasComment("Indica el documento es autómatico o fue creado manualmente");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Cuenta de Ingreso/Egreso asociado al documento");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.DocOrig)
                    .HasColumnName("doc_orig")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de documento de origen o asociado");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.MovBan)
                    .HasColumnName("mov_ban")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de Movimiento creado en Banco");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Nac)
                    .HasColumnName("nac")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NroChe)
                    .HasColumnName("nro_che")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Número de Cheque");

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Siguiente número de factura a generar en esa sucursal");

                entity.Property(e => e.NroOrig)
                    .HasColumnName("nro_orig")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Número de documento de origen");

                entity.Property(e => e.NumComprobante)
                    .HasColumnName("num_comprobante")
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasComment("Numero del comprobante para la retención de iva");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Observa)
                    .HasColumnName("observa")
                    .IsUnicode(false)
                    .HasComment("Descripción del Documento");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.Pagar)
                    .HasColumnName("pagar")
                    .HasComment("Autorización de pago: 0 No autorizado pagp, 1: Autorizado pago");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.ProPago)
                    .HasColumnName("pro_pago")
                    .HasColumnType("xml")
                    .HasComment("Programación de Pago");

                entity.Property(e => e.ProvTer)
                    .HasColumnName("prov_ter")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Retención de IVA a tercero");

                entity.Property(e => e.RengTer)
                    .HasColumnName("reng_ter")
                    .HasComment("Renglo de la factura a la que se le aplica la retención");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TipoImp)
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TipoOrigen)
                    .HasColumnName("tipo_origen")
                    .HasComment("0: No aplica, 1: DXPP, 2: DIFERENCIAL CAMBIARIO, 3: DEVOLUCION");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaDocumentoCompra)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saDocumentoCompra_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaDocumentoCompra)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDocumentoCompra_saMoneda");

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaDocumentoCompraCoProvNavigation)
                    .HasForeignKey(d => d.CoProv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDocumentoCompra_saProveedor");

                entity.HasOne(d => d.CoTipoDocNavigation)
                    .WithMany(p => p.SaDocumentoCompraCoTipoDocNavigation)
                    .HasForeignKey(d => d.CoTipoDoc)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDocumentoCompra_saTipoDocumento");

                entity.HasOne(d => d.DocOrigNavigation)
                    .WithMany(p => p.SaDocumentoCompraDocOrigNavigation)
                    .HasForeignKey(d => d.DocOrig)
                    .HasConstraintName("FK_saDocumentoCompra_saTipoDocumentoOrigen");

                entity.HasOne(d => d.MovBanNavigation)
                    .WithMany(p => p.SaDocumentoCompra)
                    .HasForeignKey(d => d.MovBan)
                    .HasConstraintName("FK_saDocumentoCompra_saMovimientoBanco");

                entity.HasOne(d => d.ProvTerNavigation)
                    .WithMany(p => p.SaDocumentoCompraProvTerNavigation)
                    .HasForeignKey(d => d.ProvTer)
                    .HasConstraintName("FK_saDocumentoCompra_saProveedorTercero");
            });

            modelBuilder.Entity<SaDocumentoCompraReng>(entity =>
            {
                entity.HasKey(e => new { e.CoTipoDoc, e.NroDoc, e.RengNum });

                entity.ToTable("saDocumentoCompraReng");

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.CoTipoDoc);

                entity.HasIndex(e => e.NroDoc);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saDocumentoCompraReng")
                    .IsUnique();

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostUnitOm)
                    .HasColumnName("cost_unit_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario en otra moneda (reservado para futuras implementaciones)");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoImp)
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaDocumentoCompraReng)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .HasConstraintName("FK_saDocumentoCompraReng_saArtUnidad");

                entity.HasOne(d => d.SaDocumentoCompra)
                    .WithMany(p => p.SaDocumentoCompraReng)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .HasConstraintName("FK_saDocumentoCompraReng_saDocumentoCompra");
            });

            modelBuilder.Entity<SaDocumentoElectronico>(entity =>
            {
                entity.HasKey(e => new { e.CoDocElec, e.TipoDocumento });

                entity.ToTable("saDocumentoElectronico");

                entity.Property(e => e.CoDocElec)
                    .HasColumnName("co_doc_elec")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de documento electrónico");

                entity.Property(e => e.TipoDocumento)
                    .HasColumnName("tipo_documento")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de documento");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCliDesde)
                    .HasColumnName("co_cli_desde")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código cliente");

                entity.Property(e => e.CoCliHasta)
                    .HasColumnName("co_cli_hasta")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código cliente");

                entity.Property(e => e.CoGrupoRep)
                    .IsRequired()
                    .HasColumnName("co_grupo_rep")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de grupo de reporte");

                entity.Property(e => e.CoProvDesde)
                    .HasColumnName("co_prov_desde")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código proveedor");

                entity.Property(e => e.CoProvHasta)
                    .HasColumnName("co_prov_hasta")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código proveedor");

                entity.Property(e => e.CoReporte)
                    .IsRequired()
                    .HasColumnName("co_reporte")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de reporte");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CorreoAsunto)
                    .HasColumnName("correo_asunto")
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasComment("Asunto del correo");

                entity.Property(e => e.CorreoBcc)
                    .HasColumnName("correo_bcc")
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasComment("Enviar correo con copia oculta");

                entity.Property(e => e.CorreoCc)
                    .HasColumnName("correo_cc")
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasComment("Enviar correo con copia");

                entity.Property(e => e.CorreoCuerpo)
                    .HasColumnName("correo_cuerpo")
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasComment("Cuerpo del correo");

                entity.Property(e => e.CorreoFirma)
                    .HasColumnName("correo_firma")
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasComment("Firma del correo");

                entity.Property(e => e.DesDocElec)
                    .HasColumnName("des_doc_elec")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de documento electrónico");

                entity.Property(e => e.DocNumDesde)
                    .HasColumnName("doc_num_desde")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número }documento");

                entity.Property(e => e.DocNumHasta)
                    .HasColumnName("doc_num_hasta")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número documento");

                entity.Property(e => e.Enviarcorreo)
                    .HasColumnName("enviarcorreo")
                    .HasComment("Enviar Correo");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecDocElec)
                    .HasColumnName("fec_doc_elec")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de documento electrónico");

                entity.Property(e => e.FecEmisDesde)
                    .HasColumnName("fec_emis_desde")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha emisión documento");

                entity.Property(e => e.FecEmisHasta)
                    .HasColumnName("fec_emis_hasta")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha emisión documento");

                entity.Property(e => e.FecVencDesde)
                    .HasColumnName("fec_venc_desde")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha vencimiento documento");

                entity.Property(e => e.FecVencHasta)
                    .HasColumnName("fec_venc_hasta")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha vencimiento documento");

                entity.Property(e => e.Log)
                    .HasColumnType("xml")
                    .HasComment("Log");

                entity.Property(e => e.Mantenerarchivos)
                    .HasColumnName("mantenerarchivos")
                    .HasComment("Mantener archivos");

                entity.Property(e => e.Procesado)
                    .HasColumnName("procesado")
                    .HasComment("Procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RutaArch)
                    .HasColumnName("ruta_arch")
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasComment("Ubicación del archivo");

                entity.Property(e => e.SpDocElec)
                    .HasColumnName("sp_doc_elec")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Nombre del stored procedure");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Estatus del documento");

                entity.Property(e => e.TipoDocSalida)
                    .HasColumnName("tipo_doc_salida")
                    .HasComment("Formato de envio del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistemaReservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCliDesdeNavigation)
                    .WithMany(p => p.SaDocumentoElectronicoCoCliDesdeNavigation)
                    .HasForeignKey(d => d.CoCliDesde)
                    .HasConstraintName("FK_saDocumentoElectronico_saClienteDesde");

                entity.HasOne(d => d.CoCliHastaNavigation)
                    .WithMany(p => p.SaDocumentoElectronicoCoCliHastaNavigation)
                    .HasForeignKey(d => d.CoCliHasta)
                    .HasConstraintName("FK_saDocumentoElectronico_saClienteHasta");

                entity.HasOne(d => d.CoProvDesdeNavigation)
                    .WithMany(p => p.SaDocumentoElectronicoCoProvDesdeNavigation)
                    .HasForeignKey(d => d.CoProvDesde)
                    .HasConstraintName("FK_saDocumentoElectronico_saProveedorDesde");

                entity.HasOne(d => d.CoProvHastaNavigation)
                    .WithMany(p => p.SaDocumentoElectronicoCoProvHastaNavigation)
                    .HasForeignKey(d => d.CoProvHasta)
                    .HasConstraintName("FK_saDocumentoElectronico_saProveedorHasta");
            });

            modelBuilder.Entity<SaDocumentoImagen>(entity =>
            {
                entity.HasKey(e => new { e.RowguidDoc, e.CoImag });

                entity.ToTable("saDocumentoImagen");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguidDoc");

                entity.Property(e => e.CoImag)
                    .HasColumnName("co_imag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la Imagen del Documento");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo del Documento");

                entity.Property(e => e.CoTipoImag)
                    .HasColumnName("co_tipo_imag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Tipo de Imagen");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesImag)
                    .HasColumnName("des_imag")
                    .IsUnicode(false)
                    .HasComment("Descripción de la Imagen del Documento");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Picture)
                    .HasColumnName("picture")
                    .HasComment("Imagen");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaDocumentoVenta>(entity =>
            {
                entity.HasKey(e => new { e.CoTipoDoc, e.NroDoc });

                entity.ToTable("saDocumentoVenta");

                entity.HasIndex(e => e.CoCli);

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saDocumentoVenta_moneda");

                entity.HasIndex(e => e.CoTipoDoc);

                entity.HasIndex(e => e.CoVen);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.NroDoc);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saDocumentoVenta")
                    .IsUnique();

                entity.HasIndex(e => e.Saldo);

                entity.HasIndex(e => new { e.Feccom, e.NControl })
                    .HasName("IX_saDocumentoVenta_contabilidad");

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de donde fué importado");

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del Documento");

                entity.Property(e => e.Adicional)
                    .HasColumnName("adicional")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto adicional");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Aut)
                    .HasColumnName("aut")
                    .HasComment("Indica el documento es autómatico o fue creado manualmente");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Cliente");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.Comis1)
                    .HasColumnName("comis1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Campo 1 para el calculo de comisión");

                entity.Property(e => e.Comis2)
                    .HasColumnName("comis2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Campo 2 para el calculo de comisión");

                entity.Property(e => e.Comis3)
                    .HasColumnName("comis3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Campo 3 para el calculo de comisión");

                entity.Property(e => e.Comis4)
                    .HasColumnName("comis4")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Campo 4 para el calculo de comisión");

                entity.Property(e => e.Comis5)
                    .HasColumnName("comis5")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Campo 5 para el calculo de comisión");

                entity.Property(e => e.Comis6)
                    .HasColumnName("comis6")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Campo 6 para el calculo de comisión");

                entity.Property(e => e.Contrib)
                    .HasColumnName("contrib")
                    .HasComment("Indica si el documento fue emitido a un contibuyente");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.DocOrig)
                    .HasColumnName("doc_orig")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de documento de origen o asociado");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.ImpNroZ)
                    .HasColumnName("imp_nro_z")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras imlpementaciones");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Serial de la impresora por la que se emitio la factura (reservado para futuras imlpementaciones)");

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Numero de factura fiscal");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.MovBan)
                    .HasColumnName("mov_ban")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de Movimiento creado en Banco");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.NroChe)
                    .HasColumnName("nro_che")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Número de Cheque");

                entity.Property(e => e.NroOrig)
                    .HasColumnName("nro_orig")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Número de documento de origen");

                entity.Property(e => e.NumComprobante)
                    .HasColumnName("num_comprobante")
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasComment("Número de comprobante de retención de impuesto");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Observa)
                    .HasColumnName("observa")
                    .IsUnicode(false)
                    .HasComment("Descripción del Documento");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TipoImp)
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TipoOrigen)
                    .HasColumnName("tipo_origen")
                    .HasComment(@"0: No aplica, 1: DXPP, 2: DIFERENCIAL CAMBIARIO, 3: DEVOLUCION
");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VenTer)
                    .HasColumnName("ven_ter")
                    .HasComment("Venta realizada por un tercero (usado en libro de venta)");

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaDocumentoVenta)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDocumentoVenta_saCliente");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaDocumentoVenta)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saDocumentoVenta_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaDocumentoVenta)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDocumentoVenta_saMoneda");

                entity.HasOne(d => d.CoTipoDocNavigation)
                    .WithMany(p => p.SaDocumentoVentaCoTipoDocNavigation)
                    .HasForeignKey(d => d.CoTipoDoc)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDocumentoVenta_saTipoDocumento");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaDocumentoVenta)
                    .HasForeignKey(d => d.CoVen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saDocumentoVenta_saVendedor");

                entity.HasOne(d => d.DocOrigNavigation)
                    .WithMany(p => p.SaDocumentoVentaDocOrigNavigation)
                    .HasForeignKey(d => d.DocOrig)
                    .HasConstraintName("FK_saDocumentoVenta_saTipoDocumento_Doc_Orig");

                entity.HasOne(d => d.MovBanNavigation)
                    .WithMany(p => p.SaDocumentoVenta)
                    .HasForeignKey(d => d.MovBan)
                    .HasConstraintName("FK_saDocumentoVenta_saMovimientoBanco");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaDocumentoVenta)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saDocumentoVenta_saTax");
            });

            modelBuilder.Entity<SaDocumentoVentaReng>(entity =>
            {
                entity.HasKey(e => new { e.CoTipoDoc, e.NroDoc, e.RengNum });

                entity.ToTable("saDocumentoVentaReng");

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.CoTipoDoc);

                entity.HasIndex(e => e.NroDoc);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saDocumentoVentaReng")
                    .IsUnique();

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de donde fué importado");

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del Documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PrecVta)
                    .HasColumnName("prec_vta")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Precio de venta o compra");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoImp)
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaDocumentoVentaReng)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .HasConstraintName("FK_saDocumentoVentaReng_saArtUnidad");

                entity.HasOne(d => d.SaDocumentoVenta)
                    .WithMany(p => p.SaDocumentoVentaReng)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .HasConstraintName("FK_saDocumentoVentaReng_saDocumentoVenta");
            });

            modelBuilder.Entity<SaFactCompRengCaracteristicasAdic>(entity =>
            {
                entity.HasKey(e => e.DocOrig);

                entity.ToTable("saFactCompRengCaracteristicasAdic");

                entity.Property(e => e.DocOrig)
                    .HasColumnName("doc_orig")
                    .ValueGeneratedNever();

                entity.Property(e => e.PesoNeto)
                    .HasColumnName("peso_neto")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.VolumenNeto)
                    .HasColumnName("volumen_neto")
                    .HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.DocOrigNavigation)
                    .WithOne(p => p.SaFactCompRengCaracteristicasAdic)
                    .HasPrincipalKey<SaFacturaCompraReng>(p => p.Rowguid)
                    .HasForeignKey<SaFactCompRengCaracteristicasAdic>(d => d.DocOrig)
                    .HasConstraintName("FK_saFactCompRengCaracteristicasAdic_saFacturaCompraReng");
            });

            modelBuilder.Entity<SaFactCompRengPesoVolumen>(entity =>
            {
                entity.HasKey(e => e.RowguidDoc);

                entity.ToTable("saFactCompRengPesoVolumen");

                entity.Property(e => e.RowguidDoc)
                    .HasColumnName("rowguidDoc")
                    .ValueGeneratedNever();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.PesoComp)
                    .HasColumnName("peso_comp")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VolumenComp)
                    .HasColumnName("volumen_comp")
                    .HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.RowguidDocNavigation)
                    .WithOne(p => p.SaFactCompRengPesoVolumen)
                    .HasPrincipalKey<SaFacturaCompraReng>(p => p.Rowguid)
                    .HasForeignKey<SaFactCompRengPesoVolumen>(d => d.RowguidDoc)
                    .HasConstraintName("FK_saFactCompRengPesoVolumen_saFacturaCompraReng");
            });

            modelBuilder.Entity<SaFacturaCompra>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saFacturaCompra");

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone);

                entity.HasIndex(e => e.CoProv);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saFacturaCompra_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saFacturaCompra_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Cuenta de Ingreso/Egreso asociado al documento");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Nac)
                    .HasColumnName("nac")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NroFact)
                    .IsRequired()
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesE)
                    .HasColumnName("seriales_e")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaFacturaCompra)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saFacturaCompra_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaFacturaCompra)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saFacturaCompra_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaFacturaCompra)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaCompra_saMoneda");

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaFacturaCompra)
                    .HasForeignKey(d => d.CoProv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaCompra_saProveedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaFacturaCompra)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saFacturaCompra_saTax");
            });

            modelBuilder.Entity<SaFacturaCompraImportacion>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.CoTipoDoc });

                entity.ToTable("saFacturaCompraImportacion");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saFacturaCompraImportacion")
                    .IsUnique();

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de Documento");

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Documento \"FACT\" o \"PLAN\"");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoIncoterm)
                    .HasColumnName("co_incoterm")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Incoterm");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CondicionesSeguro)
                    .HasColumnName("condicionesSeguro")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Condiciones del seguro");

                entity.Property(e => e.Documentacion)
                    .HasColumnName("documentacion")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Documentación");

                entity.Property(e => e.Empaque)
                    .HasColumnName("empaque")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Empaque");

                entity.Property(e => e.EmpresaTransporte)
                    .HasColumnName("empresaTransporte")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Empresa de transporte");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LugarDesembarque)
                    .HasColumnName("lugarDesembarque")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Lugar de Desembarque");

                entity.Property(e => e.LugarEmbarque)
                    .HasColumnName("lugarEmbarque")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Lugar de Embarque");

                entity.Property(e => e.Marcas)
                    .HasColumnName("marcas")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Marcas");

                entity.Property(e => e.NumExpImpor)
                    .HasColumnName("num_exp_impor")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de Expediente de Importación");

                entity.Property(e => e.NumPlanImpor)
                    .HasColumnName("num_plan_impor")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de Planilla de Importación");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoIncotermNavigation)
                    .WithMany(p => p.SaFacturaCompraImportacion)
                    .HasForeignKey(d => d.CoIncoterm)
                    .HasConstraintName("FK_saFacturaCompraImportacion_saIncoterm");
            });

            modelBuilder.Entity<SaFacturaCompraReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saFacturaCompraReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saFacturaCompraReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saFacturaCompraReng_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TipoImp);

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostUnitOm)
                    .HasColumnName("cost_unit_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario en otra moneda (reservado para futuras implementaciones)");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio unitario");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Ultimo costo Otra moneda");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Promedio Otra Moneda");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcGas)
                    .HasColumnName("porc_gas")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de arancel");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguid_doc");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaFacturaCompraReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaCompraReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaFacturaCompraReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saFacturaCompraReng_saFacturaCompra");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaFacturaCompraRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaCompraReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaFacturaCompraRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saFacturaCompraReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaFacturaCompraRengExt>(entity =>
            {
                entity.HasKey(e => e.RowguidReng);

                entity.ToTable("saFacturaCompraRengExt");

                entity.Property(e => e.RowguidReng)
                    .HasColumnName("rowguid_reng")
                    .HasComment("Identificador único (Tabla saFacturaCompraReng)")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.CreditoFiscal)
                    .IsRequired()
                    .HasColumnName("credito_fiscal")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Indica el tipo de crédito fiscal para el artículo en el renglón (0: No Deducible, 1: Totalmente Deducible, 2: Sujeto a Prorrateo, 3: Ninguno de los Anteriores)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.SinDerCreFis)
                    .HasColumnName("sin_der_cre_fis")
                    .HasComment("Indica si en el renglón de la factura el articulo esta marcado \"Sin credito Fiscal\"");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidRengNavigation)
                    .WithOne(p => p.SaFacturaCompraRengExt)
                    .HasPrincipalKey<SaFacturaCompraReng>(p => p.Rowguid)
                    .HasForeignKey<SaFacturaCompraRengExt>(d => d.RowguidReng)
                    .HasConstraintName("FK_saFacturaCompraRengExt_saFacturaCompraReng");
            });

            modelBuilder.Entity<SaFacturaVenta>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saFacturaVenta");

                entity.HasIndex(e => e.CoCli);

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saFacturaVenta_moneda");

                entity.HasIndex(e => e.CoTran);

                entity.HasIndex(e => e.CoVen);

                entity.HasIndex(e => e.FeUsMo);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.NControl)
                    .HasName("IX_saFacturaVenta_nro_control");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saFacturaVenta_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saFacturaVenta_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Cliente");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de transporte");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Contrib)
                    .HasColumnName("contrib")
                    .HasComment("Indica si el documento fue emitido a un contibuyente");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.ImpNroZ)
                    .HasColumnName("imp_nro_z")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Serial de la impresora por la que se emitio la factura (reservado para futuras imlpementaciones)");

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de factura fiscal");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VenTer)
                    .HasColumnName("ven_ter")
                    .HasComment("Venta realizada por un tercero (usado en libro de venta)");

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaFacturaVenta)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaVenta_saCliente");

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaFacturaVenta)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saFacturaVenta_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaFacturaVenta)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saFacturaVenta_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaFacturaVenta)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaVenta_saMoneda");

                entity.HasOne(d => d.CoTranNavigation)
                    .WithMany(p => p.SaFacturaVenta)
                    .HasForeignKey(d => d.CoTran)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaVenta_saTransporte");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaFacturaVenta)
                    .HasForeignKey(d => d.CoVen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaVenta_saVendedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaFacturaVenta)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saFacturaVenta_saTax");
            });

            modelBuilder.Entity<SaFacturaVentaReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saFacturaVentaReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saFacturaVentaReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saFacturaVentaReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 2 global");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 3 global");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 1 global");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente al recargo global");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 1 global");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 2 global");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 3 global");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PrecVta)
                    .HasColumnName("prec_vta")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Precio de venta o compra");

                entity.Property(e => e.PrecVtaOm)
                    .HasColumnName("prec_vta_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc)
                    .HasColumnName("rowguid_doc")
                    .HasComment("identificador del renglon importado");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaFacturaVentaReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaVentaReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaFacturaVentaReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saFacturaVentaReng_saFacturaVenta");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaFacturaVentaRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saFacturaVentaReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaFacturaVentaRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saFacturaVentaReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaGiroCompra>(entity =>
            {
                entity.HasKey(e => e.CoGiro);

                entity.ToTable("saGiroCompra");

                entity.HasIndex(e => new { e.CoTipoDoc, e.NroDoc });

                entity.Property(e => e.CoGiro)
                    .HasColumnName("co_giro")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CantGiro).HasColumnName("cant_giro");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CobNum)
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesGiro)
                    .HasColumnName("des_giro")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecPGiro)
                    .HasColumnName("fec_p_giro")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Frecuencia)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MontDoc)
                    .HasColumnName("mont_doc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PorcInteres)
                    .HasColumnName("porc_interes")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CobNumNavigation)
                    .WithMany(p => p.SaGiroCompra)
                    .HasForeignKey(d => d.CobNum)
                    .HasConstraintName("FK_saGiroCompra_saPago");
            });

            modelBuilder.Entity<SaGiroCompraReng>(entity =>
            {
                entity.HasKey(e => new { e.CoGiro, e.RengNum });

                entity.ToTable("saGiroCompraReng");

                entity.Property(e => e.CoGiro)
                    .HasColumnName("co_giro")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.MontoCob)
                    .HasColumnName("monto_cob")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NroDoc)
                    .IsRequired()
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoGiroNavigation)
                    .WithMany(p => p.SaGiroCompraReng)
                    .HasForeignKey(d => d.CoGiro)
                    .HasConstraintName("FK_saGiroCompraReng_saGiroCompra");

                entity.HasOne(d => d.SaDocumentoCompra)
                    .WithMany(p => p.SaGiroCompraReng)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saGiroCompraReng_saDocumentoCompra");
            });

            modelBuilder.Entity<SaGiroVenta>(entity =>
            {
                entity.HasKey(e => e.CoGiro);

                entity.ToTable("saGiroVenta");

                entity.HasIndex(e => new { e.CoTipoDoc, e.NroDoc });

                entity.Property(e => e.CoGiro)
                    .HasColumnName("co_giro")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CantGiro).HasColumnName("cant_giro");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CobNum)
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesGiro)
                    .HasColumnName("des_giro")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FecPGiro)
                    .HasColumnName("fec_p_giro")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Frecuencia)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MontDoc)
                    .HasColumnName("mont_doc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PorcInteres)
                    .HasColumnName("porc_interes")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaGiroVentaReng>(entity =>
            {
                entity.HasKey(e => new { e.CoGiro, e.RengNum });

                entity.ToTable("saGiroVentaReng");

                entity.Property(e => e.CoGiro)
                    .HasColumnName("co_giro")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.MontoCob)
                    .HasColumnName("monto_cob")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NroDoc)
                    .IsRequired()
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CoGiroNavigation)
                    .WithMany(p => p.SaGiroVentaReng)
                    .HasForeignKey(d => d.CoGiro)
                    .HasConstraintName("FK_saGiroVentaReng_saGiroVenta");

                entity.HasOne(d => d.SaDocumentoVenta)
                    .WithMany(p => p.SaGiroVentaReng)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saGiroVentaReng_saDocumentoVenta");
            });

            modelBuilder.Entity<SaHistoricoEstado>(entity =>
            {
                entity.HasKey(e => e.Rowguid);

                entity.ToTable("saHistoricoEstado");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.DocOrig)
                    .HasColumnName("doc_orig")
                    .HasComment("Id del documento de origen");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasColumnName("estado")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaImpMun>(entity =>
            {
                entity.HasKey(e => new { e.CoImun, e.CoSucur });

                entity.ToTable("saImpMun");

                entity.HasIndex(e => e.ImpDes);

                entity.HasIndex(e => new { e.CoSucur, e.NAct })
                    .HasName("UK_saImpMun")
                    .IsUnique();

                entity.Property(e => e.CoImun)
                    .HasColumnName("co_imun")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Impuesto Municipal");

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal");

                entity.Property(e => e.Alicuota)
                    .HasColumnName("alicuota")
                    .HasColumnType("decimal(6, 2)")
                    .HasComment("Porcentaje de Alicuota correspondiente al impuesto");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.ImpDes)
                    .IsRequired()
                    .HasColumnName("imp_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Impuesto");

                entity.Property(e => e.MTrib)
                    .HasColumnName("m_trib")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Mínimo Tributario");

                entity.Property(e => e.NAct)
                    .IsRequired()
                    .HasColumnName("n_act")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Número de la Actividad");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoSucurNavigation)
                    .WithMany(p => p.SaImpMun)
                    .HasForeignKey(d => d.CoSucur)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saImpMun_saSucursal");
            });

            modelBuilder.Entity<SaImpuesto>(entity =>
            {
                entity.HasKey(e => e.CodImpuesto);

                entity.ToTable("saImpuesto");

                entity.Property(e => e.CodImpuesto)
                    .HasColumnName("cod_impuesto")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Impuesto");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesImpuesto)
                    .IsRequired()
                    .HasColumnName("des_impuesto")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Impuesto");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.RegistroSist)
                    .HasColumnName("registro_sist")
                    .HasComment("Valor booleano para indicar si el registro es propio del sistema y no puede ser editado. (true = es del sistema - no editable;  false = es editable).");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaImpuestoReng>(entity =>
            {
                entity.HasKey(e => new { e.CodImpuesto, e.FechaRegis });

                entity.ToTable("saImpuestoReng");

                entity.Property(e => e.CodImpuesto)
                    .HasColumnName("cod_impuesto")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Impuesto");

                entity.Property(e => e.FechaRegis)
                    .HasColumnName("fecha_regis")
                    .HasColumnType("smalldatetime")
                    .HasComment("fecha de registro");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.ValorPorcent)
                    .HasColumnName("valor_porcent")
                    .HasColumnType("decimal(5, 2)")
                    .HasComment("Valor en Porcentaje del Impuesto");

                entity.HasOne(d => d.CodImpuestoNavigation)
                    .WithMany(p => p.SaImpuestoReng)
                    .HasForeignKey(d => d.CodImpuesto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saImpuestoReng_saImpuesto");
            });

            modelBuilder.Entity<SaImpuestoSobreVenta>(entity =>
            {
                entity.HasKey(e => e.Fecha);

                entity.ToTable("saImpuestoSobreVenta");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaImpuestoSobreVentaReng>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.RengNum });

                entity.ToTable("saImpuestoSobreVentaReng");

                entity.HasIndex(e => new { e.Fecha, e.TipoImp })
                    .HasName("UK_saImpuestoSobreVentaReng")
                    .IsUnique();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Compras)
                    .HasColumnName("compras")
                    .HasComment("");

                entity.Property(e => e.ConsumoSuntuario).HasColumnName("consumo_suntuario");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.PorcSuntuario)
                    .HasColumnName("porc_suntuario")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcTasa)
                    .HasColumnName("porc_tasa")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Ventas).HasColumnName("ventas");

                entity.HasOne(d => d.FechaNavigation)
                    .WithMany(p => p.SaImpuestoSobreVentaReng)
                    .HasForeignKey(d => d.Fecha)
                    .HasConstraintName("FK_saImpuestoSobreVentaReng_saImpuestoSobreVenta");
            });

            modelBuilder.Entity<SaIncoterm>(entity =>
            {
                entity.HasKey(e => e.CoIncoterm);

                entity.ToTable("saIncoterm");

                entity.Property(e => e.CoIncoterm)
                    .HasColumnName("co_incoterm")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código");

                entity.Property(e => e.Aereo).HasColumnName("aereo");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DescripDetallada).HasColumnName("descrip_detallada");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.IncotermDes)
                    .IsRequired()
                    .HasColumnName("incoterm_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción");

                entity.Property(e => e.Maritimo).HasColumnName("maritimo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Secuencia)
                    .HasColumnName("secuencia")
                    .HasComment("Número de secuencia");

                entity.Property(e => e.Terrestre).HasColumnName("terrestre");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaIntegr>(entity =>
            {
                entity.HasKey(e => e.InteNum);

                entity.ToTable("saIntegr");

                entity.HasComment("saIntegr");

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.InteNum);

                entity.Property(e => e.InteNum)
                    .HasColumnName("inte_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de integración.");

                entity.Property(e => e.ActUltf)
                    .HasColumnName("act_ultf")
                    .HasComment("Actualizar última fecha de integración.Identificador de que se actualizará la fecha de la última integración .");

                entity.Property(e => e.Agrupam)
                    .HasColumnName("agrupam")
                    .HasComment("Agrupamiento.Identificador de que la contabilización se agrupará por: 1(ninguno),2(inventario) o 5(global).");

                entity.Property(e => e.Ajucl)
                    .HasColumnName("ajucl")
                    .HasComment("Doc. de ajustes clientes Identificador de que se proserán los documentos de Doc. de ajustes clientes");

                entity.Property(e => e.Ajupr)
                    .HasColumnName("ajupr")
                    .HasComment("Doc. de ajustes proveedores Identificador de que se proserán los documentos de Doc. de ajustes prov.");

                entity.Property(e => e.Ajustes)
                    .HasColumnName("ajustes")
                    .HasComment("Ajustes. Identificador de que se procesarán los documentos de ajuste.");

                entity.Property(e => e.Ajustexdif)
                    .HasColumnName("ajustexdif")
                    .HasComment("Generar renglón de ajuste por diferencia. Valores: Si/No ");

                entity.Property(e => e.AuxiliarNom)
                    .HasColumnName("auxiliar_nom")
                    .HasComment("Contabilizar Nomina con auxiliar “O” (Beneficiario). Valores: Si/No");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.ChdevCli)
                    .HasColumnName("chdev_cli")
                    .HasComment("Cheques devueltos del cliente. Identificador de que se procesarán los documentos de los cheques devueltos del cliente .");

                entity.Property(e => e.ChdevPro)
                    .HasColumnName("chdev_pro")
                    .HasComment("Cheques devueltos de proveedores. Identificador de que se procesarán los documentos de los cheques devueltos de proveedores.");

                entity.Property(e => e.CoContDesde)
                    .HasColumnName("co_cont_desde")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Valor del contrato. Por defecto “Todos” y guarda null en el campo.");

                entity.Property(e => e.CoContHasta)
                    .HasColumnName("co_cont_hasta")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuDesde)
                    .HasColumnName("co_sucu_desde")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("valor de la sucursal. Por defecto “Todos” y guarda null en el campo");

                entity.Property(e => e.CoSucuHasta)
                    .HasColumnName("co_sucu_hasta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Cobros)
                    .HasColumnName("cobros")
                    .HasComment("Cobros.Identificador de que se procesarán los documentos de cobros .");

                entity.Property(e => e.ComGen)
                    .HasColumnName("com_gen")
                    .HasComment("Compuestos Generados. Identificador de que procesarán los documentos de  compuestos generados.");

                entity.Property(e => e.Compras)
                    .HasColumnName("compras")
                    .HasComment("Compras. Identificador de que se procesarán los documentos de compras .");

                entity.Property(e => e.Compxfec)
                    .HasColumnName("compxfec")
                    .HasComment("Comprobante por fecha. Identificador de que el comprobante de integración se generará  por fecha.");

                entity.Property(e => e.Compxtip)
                    .HasColumnName("compxtip")
                    .HasComment("Comprobante por tipo. Identificador de que el comprobante de integración se generará por tipo de documento.");

                entity.Property(e => e.Criterio)
                    .HasColumnName("criterio")
                    .HasComment("Criterio de Costeo. Identificador de que el criterio que se va ha utilizar en la contabilización es por: 1(costo promedio) o  2(último costo) o 3 (UEPS_PEPS).");

                entity.Property(e => e.DesInte)
                    .HasColumnName("des_inte")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la integración.");

                entity.Property(e => e.Desde)
                    .HasColumnName("desde")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha  de inicio de la integración.");

                entity.Property(e => e.DevCli)
                    .HasColumnName("dev_cli")
                    .HasComment("Devolución de clientes.Identificador de que se procesarán los documentos de las devoluciones de clientes.");

                entity.Property(e => e.DevPro)
                    .HasColumnName("dev_pro")
                    .HasComment("Devoluciones de proveedores.Identificador de que se procesarán los documentos de las devoluciones de proveedores. .");

                entity.Property(e => e.Docnoint)
                    .HasColumnName("docnoint")
                    .HasComment("Documentos no integrados. Identificador de que se realizará la integración en aquellos documentos no  integrados con anterioridad.");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.GirCli)
                    .HasColumnName("gir_cli")
                    .HasComment("Giros del cliente. Identificador de que se procesarán los documentos de los giros del  clientes.");

                entity.Property(e => e.GirPro)
                    .HasColumnName("gir_pro")
                    .HasComment("Giros de proveedores.Identificador de que se procesarán los documentos de los giros de los proveedores.");

                entity.Property(e => e.Hasta)
                    .HasColumnName("hasta")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha final de la integración.");

                entity.Property(e => e.Marcar)
                    .HasColumnName("marcar")
                    .HasComment("Marcar. Identificador que los documentos se marcarán como contabilizados.");

                entity.Property(e => e.MovBanco)
                    .HasColumnName("mov_banco")
                    .HasComment("Movimientos de banco.Identificador de que se procesarán los documentos de los movimientos de banco .");

                entity.Property(e => e.MovCaja)
                    .HasColumnName("mov_caja")
                    .HasComment("Movimientos de caja. Identificador de que se procesarán los documentos de los movimientos de caja .");

                entity.Property(e => e.NcrCli)
                    .HasColumnName("ncr_cli")
                    .HasComment("Notas de crédito del cliente. Identificador de que se procesarán los documentos de las notas de crédito del cliente .");

                entity.Property(e => e.NcrPro)
                    .HasColumnName("ncr_pro")
                    .HasComment("Nota de credito de proveedores.Identificador de que se procesarán los documentos de  las notas de creditos de proveedores .");

                entity.Property(e => e.NdbCli)
                    .HasColumnName("ndb_cli")
                    .HasComment("Notas de debito del cliente. Identificador de que se procesarán los documentos de las notas de debito del cliente .");

                entity.Property(e => e.NdbPro)
                    .HasColumnName("ndb_pro")
                    .HasComment("Nota de debito de proveedores. Identificador de que se procesarán los documentos de las notas de debito de proveedores. ");

                entity.Property(e => e.Nomina)
                    .HasColumnName("nomina")
                    .HasComment("Nomina.Identificador de que se procesarán los  documentos generados por la nomina.");

                entity.Property(e => e.NotEnt)
                    .HasColumnName("not_ent")
                    .HasComment("Notas de entrega.Identificador de que se procesarán los documentos de las notas de entrega.");

                entity.Property(e => e.NotRec)
                    .HasColumnName("not_rec")
                    .HasComment("Notas de recepción.Identificador de que se procesarán los documentos de notas de recepción .");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.OrdPago)
                    .HasColumnName("ord_pago")
                    .HasComment("Orden de pago. Identificador de que se procesarán los comprobantes de las ordenes de pago .");

                entity.Property(e => e.Orden)
                    .HasColumnName("orden")
                    .HasComment("Ordenar por Tipo - Doc Ref. - Fecha /  Fecha – Tipo – Doc Ref. Valores: 0 Tipo - Doc Ref. - Fecha 1 Fecha – Tipo – Doc");

                entity.Property(e => e.Ordenes)
                    .HasColumnName("ordenes")
                    .HasComment("Ordenes de compra Identificador de que se proserán los documentos de Ordenes de compra");

                entity.Property(e => e.Pagos)
                    .HasColumnName("pagos")
                    .HasComment("Pagos. Identificador de que se procesarán los documentos de pagos .");

                entity.Property(e => e.Pedidos)
                    .HasColumnName("pedidos")
                    .HasComment("Pedidos Identificador de que se proserán los documentos de pedidos");

                entity.Property(e => e.Placom)
                    .HasColumnName("placom")
                    .HasComment("Plantillas de Compras Identificador de que se proserán los documentos de plantillas de compras");

                entity.Property(e => e.Plavent)
                    .HasColumnName("plavent")
                    .HasComment("Plantillas de Venta Identificador de que se proserán los documentos de plantillas de ventas");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Todos)
                    .HasColumnName("todos")
                    .HasComment("Todos.Identificador de que se procesarán todos los tipos de documentos.");

                entity.Property(e => e.TrasAlm)
                    .HasColumnName("tras_alm")
                    .HasComment("Traslados entre almacenes Identificador de que se proserán los documentos de traslados entre almacen");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.ValCuad)
                    .HasColumnName("val_cuad")
                    .HasComment("Validar cuadrado. Identificador de que se validará si el comprobante se encuentra cuadrado o no.");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Ventas)
                    .HasColumnName("ventas")
                    .HasComment("Ventas.Identificador de que se procesarán los documentos de ventas.");

                entity.HasOne(d => d.CoSucuDesdeNavigation)
                    .WithMany(p => p.SaIntegrCoSucuDesdeNavigation)
                    .HasForeignKey(d => d.CoSucuDesde);

                entity.HasOne(d => d.CoSucuHastaNavigation)
                    .WithMany(p => p.SaIntegrCoSucuHastaNavigation)
                    .HasForeignKey(d => d.CoSucuHasta);
            });

            modelBuilder.Entity<SaInventarioFisico>(entity =>
            {
                entity.HasKey(e => e.CoInvfisico);

                entity.ToTable("saInventarioFisico");

                entity.Property(e => e.CoInvfisico)
                    .HasColumnName("co_invfisico")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Campo identificador del Inventario fisico");

                entity.Property(e => e.AjueNum)
                    .HasColumnName("ajue_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("indica el numero de ajuste generado por las diferencias en el inventario");

                entity.Property(e => e.ArtCero)
                    .HasColumnName("art_cero")
                    .HasComment("Indica si los articulos no ingresados en el inventario se colocaran en cero (0)");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Cierre)
                    .HasColumnName("cierre")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha y Hora de cierre del inventario fisico");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoEnt)
                    .HasColumnName("co_tipo_ent")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Ajuste de Entrada");

                entity.Property(e => e.CoTipoSal)
                    .HasColumnName("co_tipo_sal")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Ajuste de Salida");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesInvfisico)
                    .HasColumnName("des_invfisico")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del inventario fisico");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Inicio)
                    .HasColumnName("inicio")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha y Hora de inicio del inventario fisico");

                entity.Property(e => e.Procesado)
                    .HasColumnName("procesado")
                    .HasComment("indica si el inventario esta o no cerrado. Cerrado (True), Iniciado (False)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaInventarioFisico)
                    .HasForeignKey(d => d.CoAlma)
                    .HasConstraintName("FK_saInventarioFisico_saAlmacen");

                entity.HasOne(d => d.CoTipoEntNavigation)
                    .WithMany(p => p.SaInventarioFisicoCoTipoEntNavigation)
                    .HasForeignKey(d => d.CoTipoEnt)
                    .HasConstraintName("FK_saInventarioFisico_saTipoAjuste1");

                entity.HasOne(d => d.CoTipoSalNavigation)
                    .WithMany(p => p.SaInventarioFisicoCoTipoSalNavigation)
                    .HasForeignKey(d => d.CoTipoSal)
                    .HasConstraintName("FK_saInventarioFisico_saTipoAjuste2");
            });

            modelBuilder.Entity<SaLineaArticulo>(entity =>
            {
                entity.HasKey(e => e.CoLin);

                entity.ToTable("saLineaArticulo");

                entity.HasIndex(e => e.LinDes)
                    .HasName("IX_saLineaArticulo_Lin_Des");

                entity.Property(e => e.CoLin)
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Linea");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoImun)
                    .HasColumnName("co_imun")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código Impuesto Municipal");

                entity.Property(e => e.CoReten)
                    .HasColumnName("co_reten")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de concepto de I.S.L.R.");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.ComiLin)
                    .HasColumnName("comi_lin")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de Comisión por Ventas");

                entity.Property(e => e.ComiLin2)
                    .HasColumnName("comi_lin2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de Comisión por Cobros");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.ILinDes)
                    .HasColumnName("i_lin_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción Otro Idioma");

                entity.Property(e => e.LinDes)
                    .IsRequired()
                    .HasColumnName("lin_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la Linea");

                entity.Property(e => e.Movil)
                    .HasColumnName("movil")
                    .HasComment("Registro proveniente de Profit Móvil");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Va)
                    .HasColumnName("va")
                    .HasComment("Enviar a eProfit");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoRetenNavigation)
                    .WithMany(p => p.SaLineaArticulo)
                    .HasForeignKey(d => d.CoReten)
                    .HasConstraintName("FK_saLineaArticulo_saConISLR");
            });

            modelBuilder.Entity<SaLoteEntrada>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.RowguidReng });

                entity.ToTable("saLoteEntrada");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saLoteEntrada")
                    .IsUnique();

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.RowguidReng)
                    .HasColumnName("rowguid_reng")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador unico del documento de origen");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad del lote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaExpiracion)
                    .HasColumnName("fecha_expiracion")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de expiracion del lote");

                entity.Property(e => e.FechaInicio)
                    .HasColumnName("fecha_inicio")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de elaboracion/inicio del lote");

                entity.Property(e => e.NumeroLote)
                    .IsRequired()
                    .HasColumnName("numero_lote")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identificador del lote");

                entity.Property(e => e.Precio)
                    .HasColumnName("precio")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.StockActual)
                    .HasColumnName("stock_actual")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Stock disponible para el lote");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaLoteEntrada)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saLoteEntrada_saAlmacen");

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaLoteEntrada)
                    .HasForeignKey(d => d.CoArt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saLoteEntrada_saArticulo");
            });

            modelBuilder.Entity<SaLoteSalida>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.RowguidReng });

                entity.ToTable("saLoteSalida");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saLoteSalida")
                    .IsUnique();

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.RowguidReng)
                    .HasColumnName("rowguid_reng")
                    .HasComment("Identificador unico del documento de origen");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.NumeroLote)
                    .IsRequired()
                    .HasColumnName("numero_lote")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identificador del lote");

                entity.Property(e => e.Precio)
                    .HasColumnName("precio")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidLote)
                    .HasColumnName("Rowguid_Lote")
                    .HasComment("Rowguid del lote de entrada al que esta consumiendo");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaLoteSalida)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saLoteSalida_saAlmacen");

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaLoteSalida)
                    .HasForeignKey(d => d.CoArt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saLoteSalida_saArticulo");

                entity.HasOne(d => d.RowguidLoteNavigation)
                    .WithMany(p => p.SaLoteSalida)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidLote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saLoteSalida_saLoteEntrada");
            });

            modelBuilder.Entity<SaMoneda>(entity =>
            {
                entity.HasKey(e => e.CoMone);

                entity.ToTable("saMoneda");

                entity.HasIndex(e => e.MoneDes)
                    .HasName("IX_saMoneda_Mone_Des");

                entity.Property(e => e.CoMone)
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.Cambio)
                    .HasColumnName("cambio")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Tasa de cambio de la moneda");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.MoneDes)
                    .IsRequired()
                    .HasColumnName("mone_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la moneda");

                entity.Property(e => e.Relacion).HasColumnName("relacion");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaMovimientoBanco>(entity =>
            {
                entity.HasKey(e => e.MovNum);

                entity.ToTable("saMovimientoBanco");

                entity.HasIndex(e => e.CoCtaIngrEgr);

                entity.HasIndex(e => e.CodCta);

                entity.HasIndex(e => e.DepCon);

                entity.HasIndex(e => e.DepNum);

                entity.HasIndex(e => e.DocNum);

                entity.HasIndex(e => e.Fecha);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saMovimientoBanco_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TipoOp);

                entity.HasIndex(e => new { e.Feccom, e.Numcom });

                entity.Property(e => e.MovNum)
                    .HasColumnName("mov_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del movimiento de banco creado");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de egreso");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CobPag)
                    .HasColumnName("cob_pag")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de cobro/pago");

                entity.Property(e => e.CodCta)
                    .IsRequired()
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la cuenta bancaria");

                entity.Property(e => e.CodIngben)
                    .HasColumnName("cod_ingben")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Beneficiario");

                entity.Property(e => e.Conciliado).HasColumnName("conciliado");

                entity.Property(e => e.DepCon)
                    .HasColumnName("dep_con")
                    .HasComment("Indica si esta depositado y/o conciliado");

                entity.Property(e => e.DepNum)
                    .HasColumnName("dep_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del depósito bancario");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecCon)
                    .HasColumnName("fec_con")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de Conciliación");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Movimiento");

                entity.Property(e => e.FechaChe)
                    .HasColumnName("fecha_che")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del cheque");

                entity.Property(e => e.Idb)
                    .HasColumnName("idb")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del impuesto al debito bancario");

                entity.Property(e => e.MontoD)
                    .HasColumnName("monto_d")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del debe");

                entity.Property(e => e.MontoH)
                    .HasColumnName("monto_h")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del haber");

                entity.Property(e => e.NroTransfNomi).HasColumnName("nro_transf_nomi");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.OriDep)
                    .HasColumnName("ori_dep")
                    .HasComment("Indica si el origen es depósito");

                entity.Property(e => e.Origen)
                    .IsRequired()
                    .HasColumnName("origen")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de documento que origina el movimiento. BAN: Movimiento de banco, PAG: Pago, OPA: Orden de Pago, DEP: Depósito Bancario, COB: Cobro, CHD: Cheque Devuelto ");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SaldoIni).HasColumnName("saldo_ini");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TipoOp)
                    .IsRequired()
                    .HasColumnName("tipo_op")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("DP = Deposito, IN = Interes, NC = Nota de Credito, RD = Reversion Debito, TP = Transferencia Positiva, CH = Cheque, ID = Impuesto Debito Bancario o Transacciones financieras, ND = Nota de Debito, RC = Reversion Credito, TR = Transferencia Negativa");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaMovimientoBanco)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saMovimientoBanco_saCuentaIngEgr");

                entity.HasOne(d => d.CodCtaNavigation)
                    .WithMany(p => p.SaMovimientoBanco)
                    .HasForeignKey(d => d.CodCta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saMovimientoBanco_saCuentaBancaria");
            });

            modelBuilder.Entity<SaMovimientoCaja>(entity =>
            {
                entity.HasKey(e => e.MovNum);

                entity.ToTable("saMovimientoCaja");

                entity.HasIndex(e => e.CodCaja);

                entity.HasIndex(e => e.DocNum);

                entity.HasIndex(e => e.Fecha);

                entity.HasIndex(e => e.FormaPag);

                entity.HasIndex(e => e.NumPago);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saMovimientoCaja_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TipoMov);

                entity.HasIndex(e => new { e.MovNum, e.CodCaja, e.CoCtaIngrEgr, e.Fecha, e.DocNum, e.TipoMov, e.Origen, e.FormaPag, e.Depositado, e.Anulado, e.CoSucuIn })
                    .HasName("IX_saMovimientoCaja_compuesto");

                entity.Property(e => e.MovNum)
                    .HasColumnName("mov_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del movimiento de caja creado");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Aux01)
                    .HasColumnName("aux01")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Aux02)
                    .HasColumnName("aux02")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoBan)
                    .HasColumnName("co_ban")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Entidad bancaria a la cual pertenece la forma de pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta bajo la cual se clasiifica el movimiento");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTar)
                    .HasColumnName("co_tar")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la tarjeta asociada al movimiento");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVale)
                    .HasColumnName("co_vale")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vale alimentacion");

                entity.Property(e => e.CodCaja)
                    .IsRequired()
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de caja asociado al movimiento");

                entity.Property(e => e.DepNum)
                    .HasColumnName("dep_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identificador del documento de depósito");

                entity.Property(e => e.Depositado)
                    .HasColumnName("depositado")
                    .HasComment("Indica si el estado del movimiento es depositado");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Movimiento");

                entity.Property(e => e.FechaChe)
                    .HasColumnName("fecha_che")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FormaPag)
                    .HasColumnName("forma_pag")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Forma de pago");

                entity.Property(e => e.MontoD)
                    .HasColumnName("monto_d")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del movimiento");

                entity.Property(e => e.MontoH)
                    .HasColumnName("monto_h")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MovNro)
                    .HasColumnName("mov_nro")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de registro del movimiento de transferencia");

                entity.Property(e => e.NumPago)
                    .HasColumnName("num_pago")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Identificador de forma de pago");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Origen)
                    .HasColumnName("origen")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de documento que origina el movimiento");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SaldoIni)
                    .HasColumnName("saldo_ini")
                    .HasComment("Indica si el registro es el saldo inicial de la caja seleccionada");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TipoMov)
                    .IsRequired()
                    .HasColumnName("tipo_mov")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Indica el tipo de movimiento. I = Ingreso, E = Egreso");

                entity.Property(e => e.Transferido)
                    .HasColumnName("transferido")
                    .HasComment("Indica si el estado del movimiento es 'transferido'");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoBanNavigation)
                    .WithMany(p => p.SaMovimientoCaja)
                    .HasForeignKey(d => d.CoBan)
                    .HasConstraintName("FK_saMovimientoCaja_saBanco");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaMovimientoCaja)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saMovimientoCaja_saCuentaIngEgr");

                entity.HasOne(d => d.CoTarNavigation)
                    .WithMany(p => p.SaMovimientoCaja)
                    .HasForeignKey(d => d.CoTar)
                    .HasConstraintName("FK_saMovimientoCaja_saTarjetaCredito");

                entity.HasOne(d => d.CoValeNavigation)
                    .WithMany(p => p.SaMovimientoCaja)
                    .HasForeignKey(d => d.CoVale)
                    .HasConstraintName("FK_saMovimientoCaja_pvValeAlimentacion");

                entity.HasOne(d => d.CodCajaNavigation)
                    .WithMany(p => p.SaMovimientoCaja)
                    .HasForeignKey(d => d.CodCaja)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saMovimientoCaja_saCaja");

                entity.HasOne(d => d.MovNroNavigation)
                    .WithMany(p => p.InverseMovNroNavigation)
                    .HasForeignKey(d => d.MovNro)
                    .HasConstraintName("FK_saMovimientoCaja_saMovimientoCajaTran");
            });

            modelBuilder.Entity<SaNcfinfoDocCompra>(entity =>
            {
                entity.HasKey(e => new { e.TipoDoc, e.NroDoc });

                entity.ToTable("saNCFInfoDocCompra");

                entity.HasIndex(e => e.Ncf)
                    .HasName("UK_saNCFInfoDocCompra_NCF")
                    .IsUnique();

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saNCFInfoDocCompra")
                    .IsUnique();

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NroDoc)
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoAnulacion)
                    .HasColumnName("co_anulacion")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoGasto)
                    .HasColumnName("co_gasto")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("(space((1)))");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("(space((1)))");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(dateadd(millisecond, -datepart(millisecond,getdate()),getdate()))");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(dateadd(millisecond, -datepart(millisecond,getdate()),getdate()))");

                entity.Property(e => e.Ncf)
                    .HasColumnName("ncf")
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.NroDocOri)
                    .HasColumnName("nro_doc_Ori")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoDocOri)
                    .HasColumnName("tipo_doc_Ori")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAnulacionNavigation)
                    .WithMany(p => p.SaNcfinfoDocCompra)
                    .HasForeignKey(d => d.CoAnulacion)
                    .HasConstraintName("FK_saNCFInfoDocCompra_saTipoAnulacionVenta");

                entity.HasOne(d => d.CoGastoNavigation)
                    .WithMany(p => p.SaNcfinfoDocCompra)
                    .HasForeignKey(d => d.CoGasto)
                    .HasConstraintName("FK_saNCFInfoDocCompra_saTipoGasto");

                entity.HasOne(d => d.CoSerieNavigation)
                    .WithMany(p => p.SaNcfinfoDocCompra)
                    .HasPrincipalKey(p => p.CoSerie)
                    .HasForeignKey(d => d.CoSerie)
                    .HasConstraintName("FK_saNCFInfoDocCompra_saSerie");

                entity.HasOne(d => d.SaDocumentoCompra)
                    .WithOne(p => p.SaNcfinfoDocCompra)
                    .HasForeignKey<SaNcfinfoDocCompra>(d => new { d.TipoDoc, d.NroDoc })
                    .HasConstraintName("FK_saNCFInfoDocCompra_saDocumentoCompra");
            });

            modelBuilder.Entity<SaNcfinfoDocVenta>(entity =>
            {
                entity.HasKey(e => e.Rowguid);

                entity.ToTable("saNCFInfoDocVenta");

                entity.HasIndex(e => e.Ncf)
                    .HasName("UK_saNCFInfoDocVenta_NCF")
                    .IsUnique();

                entity.HasIndex(e => new { e.TipoDoc, e.NroDoc })
                    .HasName("UK_saNCFInfoDocVenta")
                    .IsUnique();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoAnulacion)
                    .HasColumnName("co_anulacion")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("(space((1)))");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("(space((1)))");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(dateadd(millisecond, -datepart(millisecond,getdate()),getdate()))");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(dateadd(millisecond, -datepart(millisecond,getdate()),getdate()))");

                entity.Property(e => e.Ncf)
                    .IsRequired()
                    .HasColumnName("ncf")
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.NroDoc)
                    .IsRequired()
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NroDocOri)
                    .HasColumnName("nro_doc_Ori")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoDocOri)
                    .HasColumnName("tipo_doc_Ori")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAnulacionNavigation)
                    .WithMany(p => p.SaNcfinfoDocVenta)
                    .HasForeignKey(d => d.CoAnulacion)
                    .HasConstraintName("FK_saNCFInfoDocVenta_saTipoAnulacionVenta");

                entity.HasOne(d => d.CoSerieNavigation)
                    .WithMany(p => p.SaNcfinfoDocVenta)
                    .HasPrincipalKey(p => p.CoSerie)
                    .HasForeignKey(d => d.CoSerie)
                    .HasConstraintName("FK_saNCFInfoDocVenta_saSerie");

                entity.HasOne(d => d.SaDocumentoVenta)
                    .WithOne(p => p.SaNcfinfoDocVenta)
                    .HasForeignKey<SaNcfinfoDocVenta>(d => new { d.TipoDoc, d.NroDoc })
                    .HasConstraintName("FK_saNCFInfoDocVenta_saDocumentoVenta");
            });

            modelBuilder.Entity<SaNotaDespachoVenta>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saNotaDespachoVenta");

                entity.HasIndex(e => e.CoCli);

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saNotaDespachoVenta_moneda");

                entity.HasIndex(e => e.CoTran);

                entity.HasIndex(e => e.CoVen);

                entity.HasIndex(e => e.FeUsMo);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saNotaDespachoVenta_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saNotaDespachoVenta_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Cliente");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de transporte");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Contrib)
                    .HasColumnName("contrib")
                    .HasComment("Indica si el documento fue emitido a un contibuyente");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Serial de la impresora por la que se emitio la factura (reservado para futuras imlpementaciones)");

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de factura fiscal");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VenTer)
                    .HasColumnName("ven_ter")
                    .HasComment("Venta realizada por un tercero (usado en libro de venta)");

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaNotaDespachoVenta)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaDespachoVenta_saCliente");

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaNotaDespachoVenta)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saNotaDespachoVenta_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaNotaDespachoVenta)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saNotaDespachoVenta_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaNotaDespachoVenta)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaDespachoVenta_saMoneda");

                entity.HasOne(d => d.CoTranNavigation)
                    .WithMany(p => p.SaNotaDespachoVenta)
                    .HasForeignKey(d => d.CoTran)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaDespachoVenta_saTransporte");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaNotaDespachoVenta)
                    .HasForeignKey(d => d.CoVen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaDespachoVenta_saVendedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaNotaDespachoVenta)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saNotaDespachoVenta_saTax");
            });

            modelBuilder.Entity<SaNotaDespachoVentaReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saNotaDespachoVentaReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saNotaDespachoVentaReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saNotaDespachoVentaReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 2 global");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 3 global");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 1 global");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente al recargo global");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 1 global");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 2 global");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 3 global");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PrecVta)
                    .HasColumnName("prec_vta")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Precio de venta o compra");

                entity.Property(e => e.PrecVtaOm)
                    .HasColumnName("prec_vta_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc)
                    .HasColumnName("rowguid_doc")
                    .HasComment("identificador del renglon importado");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaNotaDespachoVentaReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaDespachoVentaReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaNotaDespachoVentaReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saNotaDespachoVentaReng_saNotaDespachoVenta");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaNotaDespachoVentaRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaDespachoVentaReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaNotaDespachoVentaRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saNotaDespachoVentaReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaNotaEntregaVenta>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saNotaEntregaVenta");

                entity.HasIndex(e => e.CoCli);

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saNotaEntregaVenta_moneda");

                entity.HasIndex(e => e.CoTran);

                entity.HasIndex(e => e.CoVen);

                entity.HasIndex(e => e.FeUsMo);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saNotaEntregaVenta_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saNotaEntregaVenta_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Cliente");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de transporte");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Contrib)
                    .HasColumnName("contrib")
                    .HasComment("Indica si el documento fue emitido a un contibuyente");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Serial de la impresora por la que se emitio la factura (reservado para futuras imlpementaciones)");

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de factura fiscal");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VenTer)
                    .HasColumnName("ven_ter")
                    .HasComment("Venta realizada por un tercero (usado en libro de venta)");

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaNotaEntregaVenta)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaEntregaVenta_saCliente");

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaNotaEntregaVenta)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saNotaEntregaVenta_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaNotaEntregaVenta)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saNotaEntregaVenta_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaNotaEntregaVenta)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaEntregaVenta_saMoneda");

                entity.HasOne(d => d.CoTranNavigation)
                    .WithMany(p => p.SaNotaEntregaVenta)
                    .HasForeignKey(d => d.CoTran)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaEntregaVenta_saTransporte");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaNotaEntregaVenta)
                    .HasForeignKey(d => d.CoVen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaEntregaVenta_saVendedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaNotaEntregaVenta)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saNotaEntregaVenta_saTax");
            });

            modelBuilder.Entity<SaNotaEntregaVentaReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saNotaEntregaVentaReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saNotaEntregaVentaReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saNotaEntregaVentaReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 2 global");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 3 global");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 1 global");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente al recargo global");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 1 global");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 2 global");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 3 global");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PrecVta)
                    .HasColumnName("prec_vta")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Precio de venta o compra");

                entity.Property(e => e.PrecVtaOm)
                    .HasColumnName("prec_vta_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc)
                    .HasColumnName("rowguid_doc")
                    .HasComment("identificador del renglon importado");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaNotaEntregaVentaReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaEntregaVentaReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaNotaEntregaVentaReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saNotaEntregaVentaReng_saNotaEntregaVenta");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaNotaEntregaVentaRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaEntregaVentaReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaNotaEntregaVentaRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saNotaEntregaVentaReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaNotaRecepcionCompra>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saNotaRecepcionCompra");

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone);

                entity.HasIndex(e => e.CoProv);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saNotaRecepcionCompra_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saNotaRecepcionCompra_contabilidad");

                entity.HasIndex(e => new { e.NroFact, e.CoProv })
                    .HasName("UK_saNotaRecepcionCompra_NroFact")
                    .IsUnique();

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Cuenta de Ingreso/Egreso asociado al documento");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Nac)
                    .HasColumnName("nac")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesE)
                    .HasColumnName("seriales_e")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaNotaRecepcionCompra)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saNotaRecepcionCompra_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaNotaRecepcionCompra)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saNotaRecepcionCompra_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaNotaRecepcionCompra)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaRecepcionCompra_saMoneda");

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaNotaRecepcionCompra)
                    .HasForeignKey(d => d.CoProv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaRecepcionCompra_saProveedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaNotaRecepcionCompra)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saNotaRecepcionCompra_saTax");
            });

            modelBuilder.Entity<SaNotaRecepcionCompraReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saNotaRecepcionCompraReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saNotaRecepcionCompraReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saNotaRecepcionCompraReng_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TipoImp);

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostUnitOm)
                    .HasColumnName("cost_unit_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario en otra moneda (reservado para futuras implementaciones)");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio unitario");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Ultimo costo Otra moneda");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Promedio Otra Moneda");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcGas)
                    .HasColumnName("porc_gas")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de arancel");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguid_doc");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaNotaRecepcionCompraReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaRecepcionCompraReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaNotaRecepcionCompraReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saNotaRecepcionCompraReng_saNotaRecepcionCompra");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaNotaRecepcionCompraRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saNotaRecepcionCompraReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaNotaRecepcionCompraRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saNotaRecepcionCompraReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaOrdenCompra>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saOrdenCompra");

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone);

                entity.HasIndex(e => e.CoProv);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saOrdenCompra_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saOrdenCompra_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Cuenta de Ingreso/Egreso asociado al documento");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Nac)
                    .HasColumnName("nac")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesE)
                    .HasColumnName("seriales_e")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaOrdenCompra)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saOrdenCompra_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaOrdenCompra)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saOrdenCompra_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaOrdenCompra)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saOrdenCompra_saMoneda");

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaOrdenCompra)
                    .HasForeignKey(d => d.CoProv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saOrdenCompra_saProveedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaOrdenCompra)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saOrdenCompra_saTax");
            });

            modelBuilder.Entity<SaOrdenCompraReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saOrdenCompraReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saOrdenCompraReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saOrdenCompraReng_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TipoImp);

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostUnitOm)
                    .HasColumnName("cost_unit_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario en otra moneda (reservado para futuras implementaciones)");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio unitario");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Ultimo costo Otra moneda");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Promedio Otra Moneda");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcGas)
                    .HasColumnName("porc_gas")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de arancel");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguid_doc");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaOrdenCompraReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saOrdenCompraReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaOrdenCompraReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saOrdenCompraReng_saOrdenCompra");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaOrdenCompraRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saOrdenCompraReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaOrdenCompraRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saOrdenCompraReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaOrdenPago>(entity =>
            {
                entity.HasKey(e => e.OrdNum);

                entity.ToTable("saOrdenPago");

                entity.HasIndex(e => e.CodBen)
                    .HasName("IX_saOrdenPago_Co_Ben");

                entity.HasIndex(e => e.CodCaja)
                    .HasName("IX_saOrdenPago_Cod_Caja");

                entity.HasIndex(e => e.CodCta)
                    .HasName("IX_saOrdenPago_Cod_Cta");

                entity.HasIndex(e => e.Fecha)
                    .HasName("IX_saOrdenPago_Fecha");

                entity.HasIndex(e => e.FormaPag)
                    .HasName("IX_saOrdenPago_Forma_Pag");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saOrdenPago_RowGuid")
                    .IsUnique();

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saOrdenPago_InfContable");

                entity.Property(e => e.OrdNum)
                    .HasColumnName("ord_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número Correlativo para las ordenes de pago");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CodBen)
                    .IsRequired()
                    .HasColumnName("cod_ben")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del beneficiario relacionado");

                entity.Property(e => e.CodCaja)
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Caja");

                entity.Property(e => e.CodCta)
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la cuenta bancaria");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecPag)
                    .HasColumnName("fec_pag")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de Pago.");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Movimiento");

                entity.Property(e => e.FormaPag)
                    .IsRequired()
                    .HasColumnName("forma_pag")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Forma de pago (Cheque,CH,Efectivo,EF,Transferencia,TR)");

                entity.Property(e => e.MovNumB)
                    .HasColumnName("mov_num_b")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MovNumC)
                    .HasColumnName("mov_num_c")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del movimiento de banco creado");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Origen)
                    .HasColumnName("origen")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Indica cual es el origen del documento. Ej: M=Profit Móvil, E= eProfit");

                entity.Property(e => e.OrigenD)
                    .HasColumnName("origen_d")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Indica el Número del documento origen registrado en el campo ORIGEN.");

                entity.Property(e => e.Pagar)
                    .HasColumnName("pagar")
                    .HasComment("*");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SinoReten)
                    .HasColumnName("sino_reten")
                    .HasComment("Determina si tiene se ha aplicado retencion o no a la orden de pago");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaOrdenPago)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saOrdenPago_saMoneda");

                entity.HasOne(d => d.CodBenNavigation)
                    .WithMany(p => p.SaOrdenPago)
                    .HasForeignKey(d => d.CodBen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saOrdenPago_saBeneficiario");

                entity.HasOne(d => d.CodCajaNavigation)
                    .WithMany(p => p.SaOrdenPago)
                    .HasForeignKey(d => d.CodCaja)
                    .HasConstraintName("FK_saOrdenPago_saCaja");

                entity.HasOne(d => d.CodCtaNavigation)
                    .WithMany(p => p.SaOrdenPago)
                    .HasForeignKey(d => d.CodCta)
                    .HasConstraintName("FK_saOrdenPago_saCuentaBancaria");

                entity.HasOne(d => d.MovNumBNavigation)
                    .WithMany(p => p.SaOrdenPago)
                    .HasForeignKey(d => d.MovNumB)
                    .HasConstraintName("FK_saOrdenPago_saMovimientoBanco");

                entity.HasOne(d => d.MovNumCNavigation)
                    .WithMany(p => p.SaOrdenPago)
                    .HasForeignKey(d => d.MovNumC)
                    .HasConstraintName("FK_saOrdenPago_saMovimientoCaja");
            });

            modelBuilder.Entity<SaOrdenPagoReng>(entity =>
            {
                entity.HasKey(e => new { e.OrdNum, e.RengNum });

                entity.ToTable("saOrdenPagoReng");

                entity.HasIndex(e => e.CoCtaIngrEgr);

                entity.HasIndex(e => e.OrdNum);

                entity.HasIndex(e => e.Rowguid);

                entity.Property(e => e.OrdNum)
                    .HasColumnName("ord_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número Correlativo para las ordenes de pago");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de egreso");

                entity.Property(e => e.CoIslr)
                    .HasColumnName("co_islr")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.MontoD)
                    .HasColumnName("monto_d")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del debe");

                entity.Property(e => e.MontoH)
                    .HasColumnName("monto_h")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("monto del haber");

                entity.Property(e => e.MontoIva)
                    .HasColumnName("monto_iva")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoObj)
                    .HasColumnName("monto_obj")
                    .HasColumnType("decimal(20, 5)")
                    .HasComputedColumnSql("(([monto_h]+[monto_d])-[monto_iva])");

                entity.Property(e => e.MontoReten)
                    .HasColumnName("monto_reten")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcRetn)
                    .HasColumnName("porc_retn")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de Retencion");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Sustraendo)
                    .HasColumnName("sustraendo")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaOrdenPagoReng)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saOrdenPagoReng_saCuentaIngEgr");

                entity.HasOne(d => d.CoIslrNavigation)
                    .WithMany(p => p.SaOrdenPagoReng)
                    .HasForeignKey(d => d.CoIslr)
                    .HasConstraintName("FK_saOrdenPagoReng_saConISLR");

                entity.HasOne(d => d.OrdNumNavigation)
                    .WithMany(p => p.SaOrdenPagoReng)
                    .HasForeignKey(d => d.OrdNum)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saOrdenPagoReng_saOrdenPago");
            });

            modelBuilder.Entity<SaPago>(entity =>
            {
                entity.HasKey(e => e.CobNum);

                entity.ToTable("saPago");

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saPago_Co_Mone");

                entity.HasIndex(e => e.CoProv)
                    .HasName("IX_saPago_Co_Cli");

                entity.HasIndex(e => e.Fecha)
                    .HasName("IX_saPago_Fecha");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saPago_RowGUid")
                    .IsUnique();

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saPago_InfCont");

                entity.Property(e => e.CobNum)
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del pago");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Cobro");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Recibo)
                    .HasColumnName("recibo")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del Recibo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaPago)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPago_saMoneda");

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaPago)
                    .HasForeignKey(d => d.CoProv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPago_saProveedor");
            });

            modelBuilder.Entity<SaPagoDocReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.CobNum });

                entity.ToTable("saPagoDocReng");

                entity.HasIndex(e => e.CoTipoDoc);

                entity.HasIndex(e => e.CobNum);

                entity.HasIndex(e => e.NroDoc);

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saPagoDocReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CobNum)
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del pago");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de documento de cobro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DppagoMonto)
                    .HasColumnName("dppago_monto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del Descuento por pronto pago");

                entity.Property(e => e.DppagoPorcDesc)
                    .HasColumnName("dppago_porc_desc")
                    .HasColumnType("decimal(18, 8)")
                    .HasComment("Indica el Porcentaje de Descuento DxPP");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.GenOrigen)
                    .HasColumnName("gen_origen")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MontCob)
                    .HasColumnName("mont_cob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("*");

                entity.Property(e => e.MontoRetencion)
                    .HasColumnName("monto_retencion")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("*");

                entity.Property(e => e.MontoRetencionIva)
                    .HasColumnName("monto_retencion_iva")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto Descuento Pronto Pago");

                entity.Property(e => e.NroDoc)
                    .IsRequired()
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número de documento");

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.RetenTerceroRowguidOri)
                    .HasColumnName("reten_tercero_rowguid_ori")
                    .HasComment("Rowguid del Renglon Origen de la Factura que genero la retención de IVA a terceros");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidRengOri)
                    .HasColumnName("rowguid_reng_ori")
                    .HasComment("Identificador del renglon de pago del que se origino");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoOrigen).HasColumnName("tipo_origen");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CobNumNavigation)
                    .WithMany(p => p.SaPagoDocReng)
                    .HasForeignKey(d => d.CobNum)
                    .HasConstraintName("FK_saPagoDocReng_saPago");

                entity.HasOne(d => d.RetenTerceroRowguidOriNavigation)
                    .WithMany(p => p.SaPagoDocReng)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RetenTerceroRowguidOri)
                    .HasConstraintName("FK_saPagoDocReng_saProveedor");

                entity.HasOne(d => d.RowguidRengOriNavigation)
                    .WithMany(p => p.InverseRowguidRengOriNavigation)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidRengOri)
                    .HasConstraintName("FK_saPagoDocReng_saPagoDocRengOri");

                entity.HasOne(d => d.SaDocumentoCompra)
                    .WithMany(p => p.SaPagoDocReng)
                    .HasForeignKey(d => new { d.CoTipoDoc, d.NroDoc })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPagoDocReng_saDocumentoCompra");
            });

            modelBuilder.Entity<SaPagoRentenReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.RowguidRengCob });

                entity.ToTable("saPagoRentenReng");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.RowguidRengCob).HasColumnName("rowguid_reng_cob");

                entity.Property(e => e.Automatica)
                    .HasColumnName("automatica")
                    .HasComment("Indica si la retención es automatica o manual");

                entity.Property(e => e.CoIslr)
                    .IsRequired()
                    .HasColumnName("co_islr")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoObj)
                    .HasColumnName("monto_obj")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoReten)
                    .HasColumnName("monto_reten")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcRetn)
                    .HasColumnName("porc_retn")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidFact)
                    .HasColumnName("rowguid_fact")
                    .HasComment("Cuando la retencion es global indica el rowguid de la primera factura del grupo. Este campo se utiliza para consultas posteriores, reportes y el xml de ISLR");

                entity.Property(e => e.Sustraendo)
                    .HasColumnName("sustraendo")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoIslrNavigation)
                    .WithMany(p => p.SaPagoRentenReng)
                    .HasForeignKey(d => d.CoIslr)
                    .HasConstraintName("FK_saPagoRentenReng_saConISLR");

                entity.HasOne(d => d.RowguidRengCobNavigation)
                    .WithMany(p => p.SaPagoRentenReng)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidRengCob)
                    .HasConstraintName("FK_saPagoRentenReng_saPagoDocReng");
            });

            modelBuilder.Entity<SaPagoRetenIvaReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.RowguidRengCob });

                entity.ToTable("saPagoRetenIvaReng");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.RowguidRengCob).HasColumnName("rowguid_reng_cob");

                entity.Property(e => e.Alicuota)
                    .HasColumnName("alicuota")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.BaseImponible)
                    .HasColumnName("base_imponible")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaDocumento)
                    .HasColumnName("fecha_documento")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MontoDocumento)
                    .HasColumnName("monto_documento")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.MontoExcento)
                    .HasColumnName("monto_excento")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.MontoRetImp)
                    .HasColumnName("monto_ret_imp")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.NumComprobante)
                    .IsRequired()
                    .HasColumnName("num_comprobante")
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroControlDocumento)
                    .HasColumnName("numero_control_documento")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroDocumento)
                    .HasColumnName("numero_documento")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroDocumentoAfectado)
                    .IsRequired()
                    .HasColumnName("numero_documento_afectado")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroExpediente)
                    .IsRequired()
                    .HasColumnName("numero_expediente")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PeriodoImpositivo)
                    .HasColumnName("periodo_impositivo")
                    .HasColumnType("decimal(6, 0)");

                entity.Property(e => e.RetenTercero)
                    .HasColumnName("reten_tercero")
                    .HasComment("Indica si es generada por una retención a terceros");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.RifComprador)
                    .IsRequired()
                    .HasColumnName("rif_comprador")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RifContribuyente)
                    .IsRequired()
                    .HasColumnName("rif_contribuyente")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasColumnName("tipo_documento")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoOperacion)
                    .IsRequired()
                    .HasColumnName("tipo_operacion")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.RowguidRengCobNavigation)
                    .WithMany(p => p.SaPagoRetenIvaReng)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidRengCob)
                    .HasConstraintName("FK_saPagoRetenIvaReng_saPagoDocReng");
            });

            modelBuilder.Entity<SaPagoTpreng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.CobNum });

                entity.ToTable("saPagoTPReng");

                entity.HasIndex(e => e.CobNum);

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saPagoTPReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CobNum)
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del pago");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CodCaja)
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Caja");

                entity.Property(e => e.CodCta)
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la cuenta bancaria");

                entity.Property(e => e.Devuelto)
                    .HasColumnName("devuelto")
                    .HasComment("Si hubo cheque devuelto");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaChe)
                    .HasColumnName("fecha_che")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Cheque");

                entity.Property(e => e.FormaPag)
                    .IsRequired()
                    .HasColumnName("forma_pag")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Forma de Pago");

                entity.Property(e => e.MontDoc)
                    .HasColumnName("mont_doc")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del renglón de Pago");

                entity.Property(e => e.MovNumB)
                    .HasColumnName("mov_num_b")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MovNumC)
                    .HasColumnName("mov_num_c")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de Movimiento creado en Banco");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CobNumNavigation)
                    .WithMany(p => p.SaPagoTpreng)
                    .HasForeignKey(d => d.CobNum)
                    .HasConstraintName("FK_saPagoTPReng_saPago");

                entity.HasOne(d => d.CodCajaNavigation)
                    .WithMany(p => p.SaPagoTpreng)
                    .HasForeignKey(d => d.CodCaja)
                    .HasConstraintName("FK_saPagoTPReng_saCaja");

                entity.HasOne(d => d.CodCtaNavigation)
                    .WithMany(p => p.SaPagoTpreng)
                    .HasForeignKey(d => d.CodCta)
                    .HasConstraintName("FK_saPagoTPReng_saCuentaBancaria");

                entity.HasOne(d => d.MovNumBNavigation)
                    .WithMany(p => p.SaPagoTpreng)
                    .HasForeignKey(d => d.MovNumB)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_saPagoTPReng_saMovimientoBanco");

                entity.HasOne(d => d.MovNumCNavigation)
                    .WithMany(p => p.SaPagoTpreng)
                    .HasForeignKey(d => d.MovNumC)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_saPagoTPReng_saMovimientoCaja");
            });

            modelBuilder.Entity<SaPais>(entity =>
            {
                entity.HasKey(e => e.CoPais);

                entity.ToTable("saPais");

                entity.Property(e => e.CoPais)
                    .HasColumnName("co_pais")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Pais");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.PaisDes)
                    .IsRequired()
                    .HasColumnName("pais_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción Del País");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaPais)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPais_saMoneda");
            });

            modelBuilder.Entity<SaParametroConc>(entity =>
            {
                entity.HasKey(e => new { e.CoConf, e.CoBan });

                entity.ToTable("saParametroConc");

                entity.HasIndex(e => e.CoBan)
                    .HasName("UK_saParametroConc_saBanco")
                    .IsUnique();

                entity.Property(e => e.CoConf)
                    .HasColumnName("co_conf")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("codigo de configuracion de la cuenta bancaria");

                entity.Property(e => e.CoBan)
                    .HasColumnName("co_ban")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("codigo del banco");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CantidadDig)
                    .HasColumnName("cantidadDig")
                    .HasComment("cantidad de digitos a coincidir del codigo del movimiento");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.ConcParcial)
                    .HasColumnName("conc_parcial")
                    .HasComment("Tipo de coincidencia");

                entity.Property(e => e.DesConf)
                    .IsRequired()
                    .HasColumnName("des_conf")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("descripcion de la configuracion");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.MargenInf)
                    .HasColumnName("margenInf")
                    .HasComment("Indica el margen por debajo de la fecha del movimiento que se tomara en cuenta para la conciliacion");

                entity.Property(e => e.MargenSup)
                    .HasColumnName("margenSup")
                    .HasComment("Indica el margen por encima de la fecha del movimiento que se tomara en cuenta para la conciliacion");

                entity.Property(e => e.OpcDoc)
                    .HasColumnName("opc_doc")
                    .HasComment("indica si la conciliacion bancaria automatica va a tomar en consideracion el numero del documento");

                entity.Property(e => e.OpcFec)
                    .HasColumnName("opc_fec")
                    .HasComment("Indica si la conciliacion bancaria automatica va a tomar en consideracion la fecha de los movimiento");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoBanNavigation)
                    .WithOne(p => p.SaParametroConc)
                    .HasForeignKey<SaParametroConc>(d => d.CoBan)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saParametroConc_saBanco");
            });

            modelBuilder.Entity<SaPedidoVenta>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saPedidoVenta");

                entity.HasIndex(e => e.CoCli);

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saPedidoVenta_moneda");

                entity.HasIndex(e => e.CoTran);

                entity.HasIndex(e => e.CoVen);

                entity.HasIndex(e => e.FeUsMo);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saPedidoVenta_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saPedidoVenta_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Cliente");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de transporte");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Contrib)
                    .HasColumnName("contrib")
                    .HasComment("Indica si el documento fue emitido a un contibuyente");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Serial de la impresora por la que se emitio la factura (reservado para futuras imlpementaciones)");

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de factura fiscal");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VenTer)
                    .HasColumnName("ven_ter")
                    .HasComment("Venta realizada por un tercero (usado en libro de venta)");

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaPedidoVenta)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPedidoVenta_saCliente");

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaPedidoVenta)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saPedidoVenta_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaPedidoVenta)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saPedidoVenta_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaPedidoVenta)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPedidoVenta_saMoneda");

                entity.HasOne(d => d.CoTranNavigation)
                    .WithMany(p => p.SaPedidoVenta)
                    .HasForeignKey(d => d.CoTran)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPedidoVenta_saTransporte");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaPedidoVenta)
                    .HasForeignKey(d => d.CoVen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPedidoVenta_saVendedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaPedidoVenta)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saPedidoVenta_saTax");
            });

            modelBuilder.Entity<SaPedidoVentaReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saPedidoVentaReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saPedidoVentaReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saPedidoVentaReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 2 global");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 3 global");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 1 global");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente al recargo global");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 1 global");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 2 global");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 3 global");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PrecVta)
                    .HasColumnName("prec_vta")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Precio de venta o compra");

                entity.Property(e => e.PrecVtaOm)
                    .HasColumnName("prec_vta_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc)
                    .HasColumnName("rowguid_doc")
                    .HasComment("identificador del renglon importado");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaPedidoVentaReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPedidoVentaReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaPedidoVentaReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saPedidoVentaReng_saPedidoVenta");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaPedidoVentaRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPedidoVentaReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaPedidoVentaRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saPedidoVentaReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaPista>(entity =>
            {
                entity.HasKey(e => e.Rowguid)
                    .IsClustered(false);

                entity.ToTable("saPista");

                entity.HasIndex(e => e.Fecha)
                    .IsClustered();

                entity.HasIndex(e => e.UsuarioId);

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Aux01)
                    .HasColumnName("aux01")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Aux02)
                    .HasColumnName("aux02")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Campos)
                    .HasColumnName("campos")
                    .IsUnicode(false)
                    .HasComment("Campos");

                entity.Property(e => e.CoSucu)
                    .HasColumnName("co_sucu")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código Sucursal");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime")
                    .HasComment("Fecha y Hora");

                entity.Property(e => e.Maquina)
                    .HasColumnName("maquina")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Maquina del usuario");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.RowguidOri).HasColumnName("rowguidOri");

                entity.Property(e => e.TablaOri)
                    .IsRequired()
                    .HasColumnName("tablaOri")
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasComment("Tablas");

                entity.Property(e => e.TipoOp)
                    .IsRequired()
                    .HasColumnName("tipo_op")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de operación");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.UsuarioId)
                    .IsRequired()
                    .HasColumnName("usuario_id")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario ");
            });

            modelBuilder.Entity<SaPlanillaFiscal>(entity =>
            {
                entity.HasKey(e => e.CodPlan);

                entity.ToTable("saPlanillaFiscal");

                entity.HasIndex(e => new { e.Tipo, e.NumeroPlan })
                    .HasName("UK_saPlanillaFiscal")
                    .IsUnique();

                entity.Property(e => e.CodPlan)
                    .HasColumnName("cod_plan")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ano).HasColumnName("ano");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesPlan)
                    .IsRequired()
                    .HasColumnName("des_plan")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaPago)
                    .HasColumnName("fecha_pago")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mes).HasColumnName("mes");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NumeroPlan)
                    .IsRequired()
                    .HasColumnName("numero_plan")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("tipo")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaPlantillaCompra>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saPlantillaCompra");

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone);

                entity.HasIndex(e => e.CoProv);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saPlantillaCompra_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saPlantillaCompra_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Nac)
                    .HasColumnName("nac")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesE)
                    .HasColumnName("seriales_e")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaPlantillaCompra)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saPlantillaCompra_saCondicionPago");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaPlantillaCompra)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaCompra_saMoneda");

                entity.HasOne(d => d.CoProvNavigation)
                    .WithMany(p => p.SaPlantillaCompra)
                    .HasForeignKey(d => d.CoProv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaCompra_saProveedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaPlantillaCompra)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saPlantillaCompra_saTax");
            });

            modelBuilder.Entity<SaPlantillaCompraReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saPlantillaCompraReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saPlantillaCompraReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saPlantillaCompraReng_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TipoImp);

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostUnitOm)
                    .HasColumnName("cost_unit_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario en otra moneda (reservado para futuras implementaciones)");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo promedio unitario");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Ultimo costo Otra moneda");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Promedio Otra Moneda");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcGas)
                    .HasColumnName("porc_gas")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de arancel");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguid_doc");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaPlantillaCompraReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaCompraReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaPlantillaCompraReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saPlantillaCompraReng_saPlantillaCompra");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaPlantillaCompraRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaCompraReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaPlantillaCompraRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saPlantillaCompraReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaPlantillaCompraReq>(entity =>
            {
                entity.HasKey(e => e.RowguidPlantillaCompra);

                entity.ToTable("saPlantillaCompraReq");

                entity.Property(e => e.RowguidPlantillaCompra)
                    .HasColumnName("rowguid_plantilla_compra")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Autorizado)
                    .HasColumnName("autorizado")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUbicacion)
                    .IsRequired()
                    .HasColumnName("co_ubicacion")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("descripcion")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasColumnName("direccion")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasColumnName("estatus")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0 = sin procesar, 1 = parcialmente procesado, 2 = procesado");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Responsable)
                    .HasColumnName("responsable")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Telefono)
                    .HasColumnName("telefono")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoUbicacionNavigation)
                    .WithMany(p => p.SaPlantillaCompraReq)
                    .HasForeignKey(d => d.CoUbicacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaCompraReq_saUbicacion");

                entity.HasOne(d => d.RowguidPlantillaCompraNavigation)
                    .WithOne(p => p.SaPlantillaCompraReq)
                    .HasPrincipalKey<SaPlantillaCompra>(p => p.Rowguid)
                    .HasForeignKey<SaPlantillaCompraReq>(d => d.RowguidPlantillaCompra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaCompraReq_saPlantillaCompra");
            });

            modelBuilder.Entity<SaPlantillaCompraReqRelacion>(entity =>
            {
                entity.HasKey(e => new { e.RowguidRengReq, e.RowguidRengImp })
                    .HasName("PK_saPlantillaCompraReqRelacion_1");

                entity.ToTable("saPlantillaCompraReqRelacion");

                entity.Property(e => e.RowguidRengReq).HasColumnName("rowguid_reng_req");

                entity.Property(e => e.RowguidRengImp)
                    .HasColumnName("rowguid_reng_imp")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Entregado).HasColumnName("entregado");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaRealEntrega)
                    .HasColumnName("fecha_real_entrega")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaPlantillaCompraReqRenglon>(entity =>
            {
                entity.HasKey(e => e.RowguidPlantillaRenglon);

                entity.ToTable("saPlantillaCompraReqRenglon");

                entity.Property(e => e.RowguidPlantillaRenglon)
                    .HasColumnName("rowguid_plantilla_renglon")
                    .ValueGeneratedNever();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasColumnName("estatus")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0 = sin procesar, 1 = parcialmente procesado, 2 = procesado");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FechaRealEntrega)
                    .HasColumnName("fecha_real_entrega")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FechaRequerida)
                    .HasColumnName("fecha_requerida")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Satisface).HasColumnName("satisface");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidPlantillaRenglonNavigation)
                    .WithOne(p => p.SaPlantillaCompraReqRenglon)
                    .HasPrincipalKey<SaPlantillaCompraReng>(p => p.Rowguid)
                    .HasForeignKey<SaPlantillaCompraReqRenglon>(d => d.RowguidPlantillaRenglon)
                    .HasConstraintName("FK_saPlantillaCompraReqRenglon_saPlantillaCompraReng");
            });

            modelBuilder.Entity<SaPlantillaVenta>(entity =>
            {
                entity.HasKey(e => e.DocNum);

                entity.ToTable("saPlantillaVenta");

                entity.HasIndex(e => e.CoCli);

                entity.HasIndex(e => e.CoCond);

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saPlantillaVenta_moneda");

                entity.HasIndex(e => e.CoTran);

                entity.HasIndex(e => e.CoVen);

                entity.HasIndex(e => e.FeUsMo);

                entity.HasIndex(e => e.FecEmis);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saPlantillaVenta_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.Status);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saPlantillaVenta_contabilidad");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Cliente");

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Condicion de Pago");

                entity.Property(e => e.CoCtaIngrEgr)
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de transporte");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Contrib)
                    .HasColumnName("contrib")
                    .HasComment("Indica si el documento fue emitido a un contibuyente");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DirEnt)
                    .HasColumnName("dir_ent")
                    .IsUnicode(false)
                    .HasComment("Direccion de entrega");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Serial de la impresora por la que se emitio la factura (reservado para futuras imlpementaciones)");

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de factura fiscal");

                entity.Property(e => e.Impresa)
                    .HasColumnName("impresa")
                    .HasComment("Marca que identifica si el documento fue impreso");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoReca)
                    .HasColumnName("monto_reca")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto de recargo");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de control");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Otros1)
                    .HasColumnName("otros1")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 1");

                entity.Property(e => e.Otros2)
                    .HasColumnName("otros2")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 2");

                entity.Property(e => e.Otros3)
                    .HasColumnName("otros3")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto otro 3");

                entity.Property(e => e.PorcDescGlob)
                    .HasColumnName("porc_desc_glob")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento global");

                entity.Property(e => e.PorcReca)
                    .HasColumnName("porc_reca")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("0: no procesada, 1: parcialmente procesada: 2: procesada totalmente");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total bruto del documento");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto total neto del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VenTer)
                    .HasColumnName("ven_ter")
                    .HasComment("Venta realizada por un tercero (usado en libro de venta)");

                entity.HasOne(d => d.CoCliNavigation)
                    .WithMany(p => p.SaPlantillaVenta)
                    .HasForeignKey(d => d.CoCli)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaVenta_saCliente");

                entity.HasOne(d => d.CoCondNavigation)
                    .WithMany(p => p.SaPlantillaVenta)
                    .HasForeignKey(d => d.CoCond)
                    .HasConstraintName("FK_saPlantillaVenta_saCondicionPago");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaPlantillaVenta)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .HasConstraintName("FK_saPlantillaVenta_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaPlantillaVenta)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaVenta_saMoneda");

                entity.HasOne(d => d.CoTranNavigation)
                    .WithMany(p => p.SaPlantillaVenta)
                    .HasForeignKey(d => d.CoTran)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaVenta_saTransporte");

                entity.HasOne(d => d.CoVenNavigation)
                    .WithMany(p => p.SaPlantillaVenta)
                    .HasForeignKey(d => d.CoVen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaVenta_saVendedor");

                entity.HasOne(d => d.SalestaxNavigation)
                    .WithMany(p => p.SaPlantillaVenta)
                    .HasForeignKey(d => d.Salestax)
                    .HasConstraintName("FK_saPlantillaVenta_saTax");
            });

            modelBuilder.Entity<SaPlantillaVentaReng>(entity =>
            {
                entity.HasKey(e => new { e.DocNum, e.RengNum });

                entity.ToTable("saPlantillaVentaReng");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.DocNum)
                    .HasName("IX_saPlantillaVentaReng_fact_num");

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saPlantillaVentaReng_rowguid")
                    .IsUnique();

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Numero de documento");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.DesArt)
                    .HasColumnName("des_art")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Descripcion adicional del articulo");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.MontoDesc)
                    .HasColumnName("monto_desc")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto del descuento aplicado");

                entity.Property(e => e.MontoDescGlob)
                    .HasColumnName("monto_desc_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de descuento global");

                entity.Property(e => e.MontoDev)
                    .HasColumnName("monto_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.MontoImp)
                    .HasColumnName("monto_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (1) aplicado");

                entity.Property(e => e.MontoImp2)
                    .HasColumnName("monto_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (2) aplicado");

                entity.Property(e => e.MontoImp2AfecGlob)
                    .HasColumnName("monto_imp2_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 2 global");

                entity.Property(e => e.MontoImp3)
                    .HasColumnName("monto_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto de impuesto (3) aplicado");

                entity.Property(e => e.MontoImp3AfecGlob)
                    .HasColumnName("monto_imp3_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 3 global");

                entity.Property(e => e.MontoImpAfecGlob)
                    .HasColumnName("monto_imp_afec_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente impuesto 1 global");

                entity.Property(e => e.MontoRecaGlob)
                    .HasColumnName("monto_reca_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente al recargo global");

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Numero de documento del cual fue importado (referencia, usar rowguid_doc)");

                entity.Property(e => e.Otros)
                    .HasColumnName("otros")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros");

                entity.Property(e => e.Otros1Glob)
                    .HasColumnName("otros1_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 1 global");

                entity.Property(e => e.Otros2Glob)
                    .HasColumnName("otros2_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 2 global");

                entity.Property(e => e.Otros3Glob)
                    .HasColumnName("otros3_glob")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Monto correspondiente a otros 3 global");

                entity.Property(e => e.Pendiente)
                    .HasColumnName("pendiente")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad pendiente por exportar a otros documentos");

                entity.Property(e => e.Pendiente2)
                    .HasColumnName("pendiente2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futruras implementaciones");

                entity.Property(e => e.PorcDesc)
                    .HasColumnName("porc_desc")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Porcentaje de descuento");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcImp2)
                    .HasColumnName("porc_imp2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (2) aplicado");

                entity.Property(e => e.PorcImp3)
                    .HasColumnName("porc_imp3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (3) aplicado");

                entity.Property(e => e.PrecVta)
                    .HasColumnName("prec_vta")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Precio de venta o compra");

                entity.Property(e => e.PrecVtaOm)
                    .HasColumnName("prec_vta_om")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.RengNeto)
                    .HasColumnName("reng_neto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto neto del renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguid_doc");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TipoDoc)
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo documento de origen, FACT: Factura de Venta, NENT: Nota de Entrega, DCLI: Devolucion de Cliente, COMP: Factura de Compra, NREC: Nota de Recepcion, DPRO: Devolucion a Proveedor OCOM: Orden de Compra, CPRO: Cotizacion de Compra, PCOM: Plantilla de Compra, PCLI: Pedido de CLiente, CCLI: Cotizacion a Cliente,NDES: Nota de Despacho, PVEN: Plantilla de Venta, AJUE: Ajuste de Entrada, AJUS: Ajuste de Salida, TRAE: Traslado de Entrada, TRAS: Traslado de Salida, GCOM: Generacion de Compuesto, RGEN: Renglones de Compuesto");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoImp2)
                    .HasColumnName("tipo_imp2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (2) aplicado");

                entity.Property(e => e.TipoImp3)
                    .HasColumnName("tipo_imp3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (3) aplicado");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalDev)
                    .HasColumnName("total_dev")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cantidad devuelta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaPlantillaVentaReng)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaVentaReng_saAlmacen");

                entity.HasOne(d => d.DocNumNavigation)
                    .WithMany(p => p.SaPlantillaVentaReng)
                    .HasForeignKey(d => d.DocNum)
                    .HasConstraintName("FK_saPlantillaVentaReng_saPlantillaVenta");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaPlantillaVentaRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saPlantillaVentaReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaPlantillaVentaRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saPlantillaVentaReng_saArtUnidadSecundaria");
            });

            modelBuilder.Entity<SaProcedencia>(entity =>
            {
                entity.HasKey(e => e.CodProc);

                entity.ToTable("saProcedencia");

                entity.HasIndex(e => e.DesProc);

                entity.Property(e => e.CodProc)
                    .HasColumnName("cod_proc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de procedencia");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesProc)
                    .IsRequired()
                    .HasColumnName("des_proc")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la procedencia");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaProveedor>(entity =>
            {
                entity.HasKey(e => e.CoProv);

                entity.ToTable("saProveedor");

                entity.HasIndex(e => e.CoSeg);

                entity.HasIndex(e => e.CoZon);

                entity.HasIndex(e => e.ProvDes);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saProveedor_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TipPro);

                entity.Property(e => e.CoProv)
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Proveedor");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Ciudad)
                    .HasColumnName("ciudad")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Ciudad");

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de ingreso/egreso asignada");

                entity.Property(e => e.CoMone)
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoPais)
                    .HasColumnName("co_pais")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Pais");

                entity.Property(e => e.CoSeg)
                    .IsRequired()
                    .HasColumnName("co_seg")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Segmento");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoTab)
                    .HasColumnName("co_tab")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código Tabulador del I.S.L.R.");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoZon)
                    .IsRequired()
                    .HasColumnName("co_zon")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la Zona");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.CondPag)
                    .HasColumnName("cond_pag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de condicion de pago");

                entity.Property(e => e.ContribuE)
                    .HasColumnName("contribu_e")
                    .HasComment("Contribuyente especial");

                entity.Property(e => e.DescGlob)
                    .HasColumnName("desc_glob")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Descuento Global");

                entity.Property(e => e.DescPpago)
                    .HasColumnName("desc_ppago")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("% de descuento por Pronto pago");

                entity.Property(e => e.Direc1)
                    .HasColumnName("direc1")
                    .IsUnicode(false)
                    .HasComment("Dirección");

                entity.Property(e => e.Direc2)
                    .HasColumnName("direc2")
                    .IsUnicode(false)
                    .HasComment("Para futuras implementaciones");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Correo electronico");

                entity.Property(e => e.EmailAlterno)
                    .HasColumnName("email_alterno")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Email alterno para documentos electrónicos");

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Información sobre el fax");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha en que se registra la información");

                entity.Property(e => e.Formtype)
                    .HasColumnName("formtype")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Usado para impuesto solo en usa");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indicativo de registro inactivo");

                entity.Property(e => e.Matriz)
                    .HasColumnName("matriz")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Casa Matriz");

                entity.Property(e => e.MontCre)
                    .HasColumnName("mont_cre")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Limite de Credito");

                entity.Property(e => e.Nacional)
                    .HasColumnName("nacional")
                    .HasComment("Marca que identifica si es nacional o extranjero");

                entity.Property(e => e.Nit)
                    .HasColumnName("nit")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasComment("Número de Información Tributaria");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.PlazPag)
                    .HasColumnName("plaz_pag")
                    .HasComment("Días de credito");

                entity.Property(e => e.PorcEsp)
                    .HasColumnName("porc_esp")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("*");

                entity.Property(e => e.ProvDes)
                    .IsRequired()
                    .HasColumnName("prov_des")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("Noimbre del proveedor");

                entity.Property(e => e.Respons)
                    .HasColumnName("respons")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Responsable");

                entity.Property(e => e.ReteRegisDoc)
                    .HasColumnName("rete_regis_doc")
                    .HasComment("Retener al registrar el documento");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rif)
                    .HasColumnName("rif")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasComment("Registro de Información Fiscal");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SujetoObjRetenIslrAuto)
                    .HasColumnName("sujeto_obj_retenISLR_auto")
                    .HasComment("Indica si se le podrá hacer retención ISLR automática al proveedor.");

                entity.Property(e => e.Taxid)
                    .HasColumnName("taxid")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Usado para impuesto solo en usa");

                entity.Property(e => e.Telefonos)
                    .HasColumnName("telefonos")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Información de los numeros telefonicos");

                entity.Property(e => e.TipPro)
                    .IsRequired()
                    .HasColumnName("tip_pro")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de proveedor");

                entity.Property(e => e.TipoAdi)
                    .HasColumnName("tipo_adi")
                    .HasComment("Clasificación del Proveedor (Normal=1; Casa matriz=2; Sucursal=3)");

                entity.Property(e => e.TipoPer)
                    .HasColumnName("tipo_per")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de persona");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Website)
                    .HasColumnName("website")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("Indica el web site del prov");

                entity.Property(e => e.Zip)
                    .HasColumnName("zip")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Código Postal");

                entity.HasOne(d => d.CoCtaIngrEgrNavigation)
                    .WithMany(p => p.SaProveedor)
                    .HasForeignKey(d => d.CoCtaIngrEgr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saProveedor_saCuentaIngEgr");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaProveedor)
                    .HasForeignKey(d => d.CoMone)
                    .HasConstraintName("FK_saProveedor_saMoneda");

                entity.HasOne(d => d.CoPaisNavigation)
                    .WithMany(p => p.SaProveedor)
                    .HasForeignKey(d => d.CoPais)
                    .HasConstraintName("FK_saProveedor_saPais");

                entity.HasOne(d => d.CoSegNavigation)
                    .WithMany(p => p.SaProveedor)
                    .HasForeignKey(d => d.CoSeg)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saProveedor_saSegmento");

                entity.HasOne(d => d.CoTabNavigation)
                    .WithMany(p => p.SaProveedor)
                    .HasForeignKey(d => d.CoTab)
                    .HasConstraintName("FK_saProveedor_saTabuladorIslr");

                entity.HasOne(d => d.CoZonNavigation)
                    .WithMany(p => p.SaProveedor)
                    .HasForeignKey(d => d.CoZon)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saProveedor_saZona");

                entity.HasOne(d => d.CondPagNavigation)
                    .WithMany(p => p.SaProveedor)
                    .HasForeignKey(d => d.CondPag)
                    .HasConstraintName("FK_saProveedor_saCondicionPago");

                entity.HasOne(d => d.MatrizNavigation)
                    .WithMany(p => p.InverseMatrizNavigation)
                    .HasForeignKey(d => d.Matriz)
                    .HasConstraintName("FK_saProveedor_saProveedorCasaMatriz");

                entity.HasOne(d => d.TipProNavigation)
                    .WithMany(p => p.SaProveedor)
                    .HasForeignKey(d => d.TipPro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saProveedor_saTipoProveedor");
            });

            modelBuilder.Entity<SaProveedorExt>(entity =>
            {
                entity.HasKey(e => e.RowguidProv);

                entity.ToTable("saProveedorExt");

                entity.Property(e => e.RowguidProv)
                    .HasColumnName("rowguid_prov")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.TComp)
                    .HasColumnName("tComp")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tgasto)
                    .HasColumnName("tgasto")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TCompNavigation)
                    .WithMany(p => p.SaProveedorExt)
                    .HasForeignKey(d => d.TComp)
                    .HasConstraintName("FK_saProveedorExt_saTipoComprobante");

                entity.HasOne(d => d.TgastoNavigation)
                    .WithMany(p => p.SaProveedorExt)
                    .HasForeignKey(d => d.Tgasto)
                    .HasConstraintName("FK_saProveedorExt_saTipoGasto");
            });

            modelBuilder.Entity<SaPuntoEmision>(entity =>
            {
                entity.HasKey(e => e.CoPuntoEmi);

                entity.ToTable("saPuntoEmision");

                entity.Property(e => e.CoPuntoEmi)
                    .HasColumnName("co_punto_emi")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesPuntoEmi)
                    .IsRequired()
                    .HasColumnName("des_punto_emi")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaReglaInt>(entity =>
            {
                entity.HasKey(e => e.CoReg);

                entity.ToTable("saReglaInt");

                entity.HasIndex(e => e.CoReg);

                entity.HasIndex(e => e.DesReg);

                entity.HasIndex(e => e.Tipo);

                entity.Property(e => e.CoReg)
                    .HasColumnName("co_reg")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la regla de integración.");

                entity.Property(e => e.Aplica)
                    .HasColumnName("aplica")
                    .IsUnicode(false)
                    .HasComment("Aplicar cuando. Expresión que refleja en que momento se debe aplicar la regla.");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Cuenta)
                    .HasColumnName("cuenta")
                    .IsUnicode(false)
                    .HasComment("Código de la cuenta contable. Expresión en donde se selecciona el código de la cuenta asociada a la regla de integración.");

                entity.Property(e => e.Debehaber)
                    .HasColumnName("debehaber")
                    .HasComment("Destino. Identificador de que el monto se coloque por el debe o haber de la cuenta.1(Debe), 2(Haber).");

                entity.Property(e => e.DesReg)
                    .HasColumnName("des_reg")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la regla de integración.");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .IsUnicode(false)
                    .HasComment("Descripción del asiento.Expresión en donde se coloca la descripción del asiento.");

                entity.Property(e => e.Distri)
                    .HasColumnName("distri")
                    .IsUnicode(false)
                    .HasComment("Distribución por centro de costo.Expresión que determina la distribución por el centro de costo asociado a la regla de integración.");

                entity.Property(e => e.Encabezado)
                    .HasColumnName("encabezado")
                    .IsUnicode(false)
                    .HasComment("Expresión en donde se selecciona el código de la cuenta asociada a la regla de integración.");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Gasto)
                    .HasColumnName("gasto")
                    .IsUnicode(false)
                    .HasComment("Cuenta de Gasto.Expresión en donde se determina el código de la cuenta de gastos  asociada a la regla de integración.");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indicativo de registro inactivo");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .IsUnicode(false)
                    .HasComment("Monto. Expresión que refleja el monto del asiento contable.");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("tipo")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de documento involucrado en la regla de integración.");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Version)
                    .HasColumnName("version")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Campo que indica la versión en la cual fue creada la regla de integración.");
            });

            modelBuilder.Entity<SaResInventario>(entity =>
            {
                entity.HasKey(e => e.NumResinv);

                entity.ToTable("saResInventario");

                entity.HasIndex(e => e.CoAlma)
                    .HasName("IX_saResInventario_Co_Alma");

                entity.HasIndex(e => e.CoMone)
                    .HasName("IX_saResInventario_Co_Mone");

                entity.HasIndex(e => e.Fecha)
                    .HasName("IX_saResInventario_Fecha");

                entity.Property(e => e.NumResinv)
                    .HasColumnName("num_resinv")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del resultado de Inventario");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoInvfisico)
                    .IsRequired()
                    .HasColumnName("co_invfisico")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del inventario fisico");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesResinv)
                    .HasColumnName("des_resinv")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripcion del resultado de Inventario");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del resultado de  Inventario");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaResInventario)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saResInventario_saAlmacen");

                entity.HasOne(d => d.CoInvfisicoNavigation)
                    .WithMany(p => p.SaResInventario)
                    .HasForeignKey(d => d.CoInvfisico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saResInventario_saInventarioFisico");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaResInventario)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saResInventario_saMoneda");
            });

            modelBuilder.Entity<SaResInventarioReng>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.NumResinv });

                entity.ToTable("saResInventarioReng");

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.NumResinv);

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saResInventarioReng_rowguid")
                    .IsUnique();

                entity.HasIndex(e => new { e.NumResinv, e.CoArt })
                    .HasName("UK_saResInventarioReng_co_art")
                    .IsUnique();

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.NumResinv)
                    .HasColumnName("num_resinv")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Número del resultado de inventario");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.StotalArtTeo)
                    .HasColumnName("stotal_art_teo")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalArtTeo)
                    .HasColumnName("total_art_teo")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NumResinvNavigation)
                    .WithMany(p => p.SaResInventarioReng)
                    .HasForeignKey(d => d.NumResinv)
                    .HasConstraintName("FK_saResInventarioReng_saResInventario");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaResInventarioRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saResInventarioReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaResInventarioRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saResInventarioReng_saArtUnidadS");
            });

            modelBuilder.Entity<SaSaldoBanco>(entity =>
            {
                entity.HasKey(e => new { e.CodCta, e.Tipo });

                entity.ToTable("saSaldoBanco");

                entity.Property(e => e.CodCta)
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la cuenta bancaria");

                entity.Property(e => e.Tipo)
                    .HasColumnName("tipo")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("TI = Total Disponible Inicial, CI = Conciliado Inicial, TF = Total Disponible, CF =Conciliado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodCtaNavigation)
                    .WithMany(p => p.SaSaldoBanco)
                    .HasForeignKey(d => d.CodCta)
                    .HasConstraintName("FK_saSaldoBanco_saCuentaBancaria");
            });

            modelBuilder.Entity<SaSaldoCaja>(entity =>
            {
                entity.HasKey(e => new { e.CodCaja, e.Tipo });

                entity.ToTable("saSaldoCaja");

                entity.Property(e => e.CodCaja)
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tipo)
                    .HasColumnName("tipo")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto del saldo del documento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodCajaNavigation)
                    .WithMany(p => p.SaSaldoCaja)
                    .HasForeignKey(d => d.CodCaja)
                    .HasConstraintName("FK_saSaldoCaja_saCaja");
            });

            modelBuilder.Entity<SaSegmento>(entity =>
            {
                entity.HasKey(e => e.CoSeg);

                entity.ToTable("saSegmento");

                entity.HasIndex(e => e.SegDes);

                entity.Property(e => e.CoSeg)
                    .HasColumnName("co_seg")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Segmento");

                entity.Property(e => e.CCuenta)
                    .HasColumnName("c_cuenta")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("*");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.PCuenta)
                    .HasColumnName("p_cuenta")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("*");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SegDes)
                    .IsRequired()
                    .HasColumnName("seg_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Segmento");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaSeriales>(entity =>
            {
                entity.HasKey(e => e.Rowguid);

                entity.ToTable("saSeriales");

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.Serial);

                entity.HasIndex(e => new { e.DocNumE, e.DocTipE })
                    .HasName("IX_saSeriales_Entrada");

                entity.HasIndex(e => new { e.DocNumS, e.DocTipS })
                    .HasName("IX_saSeriales_Salida");

                entity.HasIndex(e => new { e.Serial, e.CoArt })
                    .HasName("IX_saSeriales_co_art_serial");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DocNumE)
                    .HasColumnName("doc_num_e")
                    .HasComment("Identificador del documento de entrada (a nivel de renglon)");

                entity.Property(e => e.DocNumS)
                    .HasColumnName("doc_num_s")
                    .HasComment("Identificador del documento de entrada (a nivel de renglon)");

                entity.Property(e => e.DocTipE)
                    .HasColumnName("doc_tip_e")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Documento de Entrada");

                entity.Property(e => e.DocTipS)
                    .HasColumnName("doc_tip_s")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Documento de Salida");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.NumGara)
                    .HasColumnName("num_gara")
                    .HasComment("Reservado para implementaciones futuras");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasColumnName("serial")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("Serial");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaSeriales)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saSeriales_saAlmacen");

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaSeriales)
                    .HasForeignKey(d => d.CoArt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saSeriales_saArticulo");
            });

            modelBuilder.Entity<SaSerie>(entity =>
            {
                entity.HasKey(e => new { e.RengNum, e.CoTipoSerie });

                entity.ToTable("saSerie");

                entity.HasIndex(e => e.CoSerie)
                    .HasName("UK_saSerie")
                    .IsUnique();

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoTipoSerie)
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .IsRequired()
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesdeA)
                    .HasColumnName("desde_a")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesdeN).HasColumnName("desde_n");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.HastaA)
                    .HasColumnName("hasta_a")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.HastaN).HasColumnName("hasta_n");

                entity.Property(e => e.ProxA)
                    .HasColumnName("prox_a")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ProxN)
                    .HasColumnName("prox_n")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoTipoSerieNavigation)
                    .WithMany(p => p.SaSerie)
                    .HasForeignKey(d => d.CoTipoSerie)
                    .HasConstraintName("FK_saSerie_saSerieTipo");
            });

            modelBuilder.Entity<SaSerieTipo>(entity =>
            {
                entity.HasKey(e => e.CoTipoSerie);

                entity.ToTable("saSerieTipo");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saSerieTipo_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoTipoSerie)
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AplicaNcf).HasColumnName("aplica_ncf");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesTipoSerie)
                    .IsRequired()
                    .HasColumnName("des_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DesdeA)
                    .HasColumnName("desde_a")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesdeN).HasColumnName("desde_n");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.HastaA)
                    .HasColumnName("hasta_a")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.HastaN).HasColumnName("hasta_n");

                entity.Property(e => e.Longitud).HasColumnName("longitud");

                entity.Property(e => e.Prefijo)
                    .HasColumnName("prefijo")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Reiniciar).HasColumnName("reiniciar");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Sufijo)
                    .HasColumnName("sufijo")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaSerieTipoExt>(entity =>
            {
                entity.HasKey(e => e.RowguidSerietipo);

                entity.ToTable("saSerieTipoExt");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saSerieTipoExt_rowguid")
                    .IsUnique();

                entity.Property(e => e.RowguidSerietipo)
                    .HasColumnName("rowguid_serietipo")
                    .ValueGeneratedNever();

                entity.Property(e => e.AreaImp)
                    .HasColumnName("area_imp")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identificador de los diferentes puntos de venta por cada punto de emisión (sucursales) que posea la división del negocio para la secuencia del \"NCF\"");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoNegocio)
                    .HasColumnName("co_negocio")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del área de negocio de la serie para \"NCF\"");

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cliente de los \"NCF\"");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoTipo)
                    .HasColumnName("co_tipo")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Iidentificador  de tipo de Comprobante Fiscal de uso común o especial, para la secuencia del \"NCF\"");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.FeVenc)
                    .HasColumnName("fe_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha Vencimiento de la Serie NCF establecida por la DGII");

                entity.Property(e => e.Notidiavenc)
                    .HasColumnName("notidiavenc")
                    .HasComment("Cantidad de días establecidos para alertar al usuario sobre el vencimiento de la serie NCF");

                entity.Property(e => e.Notifinserie)
                    .HasColumnName("notifinserie")
                    .HasComment("Cantidad de correlativos disponibles para alertar al usuario sobre la culminación del rango de la serie NCF");

                entity.Property(e => e.PuntoEmi)
                    .HasColumnName("punto_emi")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Identificador que clasifica las diferentes sucursales que posea cada división del negocio para la secuencia del \"NCF\"");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AreaImpNavigation)
                    .WithMany(p => p.SaSerieTipoExt)
                    .HasForeignKey(d => d.AreaImp)
                    .HasConstraintName("FK_saSerieTipoExt_saAreaImpresion");

                entity.HasOne(d => d.PuntoEmiNavigation)
                    .WithMany(p => p.SaSerieTipoExt)
                    .HasForeignKey(d => d.PuntoEmi)
                    .HasConstraintName("FK_saSerieTipoExt_saPuntoEmision");

                entity.HasOne(d => d.RowguidSerietipoNavigation)
                    .WithOne(p => p.SaSerieTipoExt)
                    .HasPrincipalKey<SaSerieTipo>(p => p.Rowguid)
                    .HasForeignKey<SaSerieTipoExt>(d => d.RowguidSerietipo)
                    .HasConstraintName("FK_saSerieTipoExt_saSerieTipo");
            });

            modelBuilder.Entity<SaStockAlmacen>(entity =>
            {
                entity.HasKey(e => new { e.CoAlma, e.CoArt, e.Tipo });

                entity.ToTable("saStockAlmacen");

                entity.HasIndex(e => e.CoAlma);

                entity.HasIndex(e => e.CoArt);

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen");

                entity.Property(e => e.CoArt)
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.Tipo)
                    .HasColumnName("tipo")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Stock)
                    .HasColumnName("stock")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Stock Actual del Artículo");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoAlmaNavigation)
                    .WithMany(p => p.SaStockAlmacen)
                    .HasForeignKey(d => d.CoAlma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saStockAlmacen_saAlmacen");

                entity.HasOne(d => d.CoArtNavigation)
                    .WithMany(p => p.SaStockAlmacen)
                    .HasForeignKey(d => d.CoArt)
                    .HasConstraintName("FK_saStockAlmacen_saArticulo");
            });

            modelBuilder.Entity<SaSubLinea>(entity =>
            {
                entity.HasKey(e => new { e.CoLin, e.CoSubl });

                entity.ToTable("saSubLinea");

                entity.Property(e => e.CoLin)
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Linea");

                entity.Property(e => e.CoSubl)
                    .HasColumnName("co_subl")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Sub Linea");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoImun)
                    .HasColumnName("co_imun")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código Impuesto Municipal");

                entity.Property(e => e.CoReten)
                    .HasColumnName("co_reten")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de concepto de I.S.L.R.");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.ISublDes)
                    .HasColumnName("i_subl_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción otro idioma");

                entity.Property(e => e.Movil)
                    .HasColumnName("movil")
                    .HasComment("Registro proveniente de Profit Móvil");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SublDes)
                    .IsRequired()
                    .HasColumnName("subl_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la línea");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoLinNavigation)
                    .WithMany(p => p.SaSubLinea)
                    .HasForeignKey(d => d.CoLin)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saSubLinea_saLineaArticulo");

                entity.HasOne(d => d.CoRetenNavigation)
                    .WithMany(p => p.SaSubLinea)
                    .HasForeignKey(d => d.CoReten)
                    .HasConstraintName("FK_saSubLinea_saConISLR");
            });

            modelBuilder.Entity<SaSucursal>(entity =>
            {
                entity.HasKey(e => e.CoSucur);

                entity.ToTable("saSucursal");

                entity.HasIndex(e => e.SucurDes)
                    .HasName("IX_saSucursal");

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del almacén");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SucurDes)
                    .IsRequired()
                    .HasColumnName("sucur_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Almacén");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTabuladorIslr>(entity =>
            {
                entity.HasKey(e => e.CoTab);

                entity.ToTable("saTabuladorIslr");

                entity.HasIndex(e => new { e.CoTab, e.TipoPer })
                    .HasName("UK_saTabuladorIslr")
                    .IsUnique();

                entity.Property(e => e.CoTab)
                    .HasColumnName("co_tab")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del tabulado de ISLR");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TabDes)
                    .IsRequired()
                    .HasColumnName("tab_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del tabulado de ISLR");

                entity.Property(e => e.TipoPer)
                    .IsRequired()
                    .HasColumnName("tipo_per")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de persona a la que aplica el concepto de ISLR");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTabuladorIslrReng>(entity =>
            {
                entity.HasKey(e => new { e.CoTab, e.RengNum });

                entity.ToTable("saTabuladorIslrReng");

                entity.HasIndex(e => e.CoTab);

                entity.HasIndex(e => new { e.CoTab, e.CoIslr })
                    .HasName("UK_saTabuladorIslrReng")
                    .IsUnique();

                entity.Property(e => e.CoTab)
                    .HasColumnName("co_tab")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código Tabulador del I.S.L.R.");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoIslr)
                    .IsRequired()
                    .HasColumnName("co_islr")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Concepto de I.S.L.R.");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de impuesto (1) aplicado");

                entity.Property(e => e.PorcRet)
                    .HasColumnName("porc_ret")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de retención");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Sustraen)
                    .HasColumnName("sustraen")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Sustraendo en Unidades Tributarias");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.HasOne(d => d.CoIslrNavigation)
                    .WithMany(p => p.SaTabuladorIslrReng)
                    .HasForeignKey(d => d.CoIslr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saTabuladorIslrReng_saConISLR");

                entity.HasOne(d => d.CoTabNavigation)
                    .WithMany(p => p.SaTabuladorIslrReng)
                    .HasForeignKey(d => d.CoTab)
                    .HasConstraintName("FK_saTabuladorIslrReng_saTabuladorIslr");
            });

            modelBuilder.Entity<SaTarjetaCredito>(entity =>
            {
                entity.HasKey(e => e.CoTar);

                entity.ToTable("saTarjetaCredito");

                entity.HasIndex(e => e.CoTar)
                    .HasName("IX_saTarjetaCredito");

                entity.HasIndex(e => e.DesTar);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saTarjetaCredito_Rowguid")
                    .IsUnique();

                entity.Property(e => e.CoTar)
                    .HasColumnName("co_tar")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la Tarjeta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Comision)
                    .HasColumnName("comision")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de Comisión de la Tarjeta");

                entity.Property(e => e.DesTar)
                    .IsRequired()
                    .HasColumnName("des_tar")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la Tarjeta");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Impuesto)
                    .HasColumnName("impuesto")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de Impuesto de la Tarjeta");

                entity.Property(e => e.Recargo)
                    .HasColumnName("recargo")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Porcentaje de recargo");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Telefono)
                    .HasColumnName("telefono")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Información sobre telefonos");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTasa>(entity =>
            {
                entity.HasKey(e => new { e.CoMone, e.Fecha });

                entity.ToTable("saTasa");

                entity.HasIndex(e => e.CoMone);

                entity.HasIndex(e => e.Fecha);

                entity.Property(e => e.CoMone)
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Movimiento");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TasaC)
                    .HasColumnName("tasa_c")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa para la compra");

                entity.Property(e => e.TasaV)
                    .HasColumnName("tasa_v")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa para la venta");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaTasa)
                    .HasForeignKey(d => d.CoMone)
                    .HasConstraintName("FK_saTasa_saMoneda");
            });

            modelBuilder.Entity<SaTax>(entity =>
            {
                entity.HasKey(e => e.TaxId);

                entity.ToTable("saTax");

                entity.HasIndex(e => e.TaxDes)
                    .HasName("IX_saTax_tax_Des");

                entity.Property(e => e.TaxId)
                    .HasColumnName("tax_id")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código identificador del impuesto del condado o estado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.Entidad)
                    .IsRequired()
                    .HasColumnName("entidad")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la entidad a la cual se paga ese impuesto");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Formula)
                    .HasColumnName("formula")
                    .HasComment("Campo que indica si el cálculo de ese impuesto se realizará por fórmula o no. Si es verdadero indica que el cálculo se realizará por fórmula, en caso contrario el cálculo será simple (se aplicará una de las tres tasas disponibles)");

                entity.Property(e => e.Limite)
                    .HasColumnName("limite")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Este campo aplica en el caso de que se haya activado el campo fórmula e indica el límite que se considerará para el cálculo de impuesto por fórmula");

                entity.Property(e => e.Porc1)
                    .HasColumnName("porc1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Este campo aplica en el caso de que se haya activado el campo fórmula e indica el porcentaje que se aplicará si el monto base para el cálculo es igual o inferior al campo límite");

                entity.Property(e => e.Porc2)
                    .HasColumnName("porc2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Este campo aplica en el caso de que se haya activado el campo fórmula e indica el porcentaje que se aplicará si el monto base para el cálculo es igual o inferior al campo límite");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Tasa1)
                    .HasColumnName("tasa1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Corresponde al porcentaje que se asignará para la tasa 1 del impuesto dentro del grupo que se está agregando");

                entity.Property(e => e.Tasa2)
                    .HasColumnName("tasa2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Corresponde al porcentaje que se asignará para la tasa 2 del impuesto dentro del grupo que se está agregando");

                entity.Property(e => e.Tasa3)
                    .HasColumnName("tasa3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Corresponde al porcentaje que se asignará para la tasa 3 del impuesto dentro del grupo que se está agregando");

                entity.Property(e => e.TaxDes)
                    .IsRequired()
                    .HasColumnName("tax_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la tasa de impuesto");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTipoAjuste>(entity =>
            {
                entity.HasKey(e => e.CoTipo);

                entity.ToTable("saTipoAjuste");

                entity.HasIndex(e => e.DesTipo);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saTipoAjuste_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoTipo)
                    .HasColumnName("co_tipo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Tipo Ajuste");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesTipo)
                    .IsRequired()
                    .HasColumnName("des_tipo")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Tipo de Ajuste");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.TipoTrans)
                    .IsRequired()
                    .HasColumnName("tipo_trans")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Ajuste Aplicado");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTipoAnulacionVenta>(entity =>
            {
                entity.HasKey(e => e.CoAnulacion)
                    .HasName("PK_NCFTipoAnulacionVenta");

                entity.ToTable("saTipoAnulacionVenta");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saTipoAnulacionVenta_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoAnulacion)
                    .HasColumnName("co_anulacion")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesTipo)
                    .IsRequired()
                    .HasColumnName("des_tipo")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTipoCliente>(entity =>
            {
                entity.HasKey(e => e.TipCli);

                entity.ToTable("saTipoCliente");

                entity.HasIndex(e => e.DesTipo);

                entity.Property(e => e.TipCli)
                    .HasColumnName("tip_cli")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de Cliente");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoPrecio)
                    .IsRequired()
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesTipo)
                    .IsRequired()
                    .HasColumnName("des_tipo")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del tipo de cliente");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoPrecioNavigation)
                    .WithMany(p => p.SaTipoCliente)
                    .HasForeignKey(d => d.CoPrecio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saTipoCliente_saTipoPrecio");
            });

            modelBuilder.Entity<SaTipoComprobante>(entity =>
            {
                entity.HasKey(e => e.CoTipo)
                    .HasName("PK_NCFTipoComprobante");

                entity.ToTable("saTipoComprobante");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saTipoComprobante_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoTipo)
                    .HasColumnName("co_tipo")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesTipo)
                    .IsRequired()
                    .HasColumnName("des_tipo")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTipoDocumento>(entity =>
            {
                entity.HasKey(e => e.CoTipoDoc);

                entity.ToTable("saTipoDocumento");

                entity.Property(e => e.CoTipoDoc)
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ActProgPago).HasColumnName("act_prog_pago");

                entity.Property(e => e.AnulDocCompra).HasColumnName("anul_doc_compra");

                entity.Property(e => e.AnulDocVenta).HasColumnName("anul_doc_venta");

                entity.Property(e => e.AplicaDxppCompra).HasColumnName("aplica_dxpp_compra");

                entity.Property(e => e.AplicaDxppVenta).HasColumnName("aplica_dxpp_venta");

                entity.Property(e => e.AplicaRivaCompra).HasColumnName("aplica_riva_compra");

                entity.Property(e => e.AplicaRivaVenta).HasColumnName("aplica_riva_venta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Descrip)
                    .IsRequired()
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocAsocCompra).HasColumnName("doc_asoc_compra");

                entity.Property(e => e.DocAsocVenta).HasColumnName("doc_asoc_venta");

                entity.Property(e => e.DocProvCompra).HasColumnName("doc_prov_compra");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.ManualCompra).HasColumnName("manual_compra");

                entity.Property(e => e.ManualVenta).HasColumnName("manual_venta");

                entity.Property(e => e.NumContVenta).HasColumnName("num_cont_venta");

                entity.Property(e => e.NumControlCompra).HasColumnName("num_control_compra");

                entity.Property(e => e.NumFactFisVenta).HasColumnName("num_fact_fis_venta");

                entity.Property(e => e.NumIvaCompra).HasColumnName("num_iva_compra");

                entity.Property(e => e.NumIvaVenta).HasColumnName("num_iva_venta");

                entity.Property(e => e.ReacDocCompra).HasColumnName("reac_doc_Compra");

                entity.Property(e => e.ReacDocVenta).HasColumnName("reac_doc_Venta");

                entity.Property(e => e.RegistroSistema).HasColumnName("registro_sistema");

                entity.Property(e => e.RengCompra).HasColumnName("reng_compra");

                entity.Property(e => e.RengVenta).HasColumnName("reng_venta");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SerialImpFisVenta).HasColumnName("serial_imp_fis_venta");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de impuesto (1) aplicado");

                entity.Property(e => e.TipoMov)
                    .IsRequired()
                    .HasColumnName("tipo_mov")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.UsarCompras).HasColumnName("usar_compras");

                entity.Property(e => e.UsarVentas).HasColumnName("usar_ventas");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTipoGasto>(entity =>
            {
                entity.HasKey(e => e.CoGasto);

                entity.ToTable("saTipoGasto");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saTipoGasto_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoGasto)
                    .HasColumnName("co_gasto")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesTipo)
                    .IsRequired()
                    .HasColumnName("des_tipo")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTipoImagen>(entity =>
            {
                entity.HasKey(e => e.CoTipoImag);

                entity.ToTable("saTipoImagen");

                entity.Property(e => e.CoTipoImag)
                    .HasColumnName("co_tipo_imag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Tipo de Imagen");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CampoAdic)
                    .HasColumnName("campo_Adic")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Descrip)
                    .IsRequired()
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Tipo de Imagen");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTipoPrecio>(entity =>
            {
                entity.HasKey(e => e.CoPrecio);

                entity.ToTable("saTipoPrecio");

                entity.Property(e => e.CoPrecio)
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del tipo de precio");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesPrecio)
                    .IsRequired()
                    .HasColumnName("des_precio")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.IncluyeImp).HasColumnName("incluye_imp");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTipoProveedor>(entity =>
            {
                entity.HasKey(e => e.TipPro);

                entity.ToTable("saTipoProveedor");

                entity.HasIndex(e => e.DesTipo);

                entity.Property(e => e.TipPro)
                    .HasColumnName("tip_pro")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo Proveedor");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesTipo)
                    .IsRequired()
                    .HasColumnName("des_tipo")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Proveedor");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTransferenciaEntreCuentas>(entity =>
            {
                entity.HasKey(e => e.CoTransBan)
                    .HasName("PK_saTransferenciaEntreBancos");

                entity.ToTable("saTransferenciaEntreCuentas");

                entity.Property(e => e.CoTransBan)
                    .HasColumnName("co_trans_ban")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la transferencia");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment(" Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment(" Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment(" Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment(" Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment(" Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment(" Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment(" Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment(" Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.Comision)
                    .HasColumnName("comision")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Comisión");

                entity.Property(e => e.CtaComision)
                    .HasColumnName("cta_comision")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuenta donde se cobrará la comisión");

                entity.Property(e => e.CtaDestino)
                    .IsRequired()
                    .HasColumnName("cta_destino")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuenta donde se abona");

                entity.Property(e => e.CtaIngrEgrComision)
                    .HasColumnName("cta_ingr_egr_comision")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuenta de ingreso-egreso de donde se debita la comisión");

                entity.Property(e => e.CtaIngrEgrDestino)
                    .IsRequired()
                    .HasColumnName("cta_ingr_egr_destino")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuenta de ingreso-egreso en la que se abona");

                entity.Property(e => e.CtaIngrEgrOrigen)
                    .IsRequired()
                    .HasColumnName("cta_ingr_egr_origen")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuenta de ingreso-egreso de donde se debita");

                entity.Property(e => e.CtaOrigen)
                    .IsRequired()
                    .HasColumnName("cta_origen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuenta de donde se debita");

                entity.Property(e => e.DesTransBan)
                    .HasColumnName("des_trans_ban")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Descripción de la transferenca");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificación del registro");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la transferencia");

                entity.Property(e => e.FechaDestino)
                    .HasColumnName("fecha_destino")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del abono");

                entity.Property(e => e.FechaOrigen)
                    .HasColumnName("fecha_origen")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha en la cual se debita");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto");

                entity.Property(e => e.MovBanComision)
                    .HasColumnName("mov_ban_comision")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del movimiento de banco de la comisión");

                entity.Property(e => e.MovBanDestino)
                    .HasColumnName("mov_ban_destino")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del movimiento de banco del abono");

                entity.Property(e => e.MovBanOrigen)
                    .HasColumnName("mov_ban_origen")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del movimiento de banco del debito");

                entity.Property(e => e.Procesado)
                    .HasColumnName("procesado")
                    .HasComment("Indica si la transferencia ya se procesó");

                entity.Property(e => e.ReferenciaComis)
                    .HasColumnName("referencia_comis")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ReferenciaDestino)
                    .HasColumnName("referencia_destino")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ReferenciaOrigen)
                    .HasColumnName("referencia_origen")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TasaOrigen)
                    .HasColumnName("tasa_origen")
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CtaComisionNavigation)
                    .WithMany(p => p.SaTransferenciaEntreCuentasCtaComisionNavigation)
                    .HasForeignKey(d => d.CtaComision)
                    .HasConstraintName("FK_saTransferenciaEntreBancos_cta_comision_saCuentaBancaria");

                entity.HasOne(d => d.CtaDestinoNavigation)
                    .WithMany(p => p.SaTransferenciaEntreCuentasCtaDestinoNavigation)
                    .HasForeignKey(d => d.CtaDestino)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saTransferenciaEntreBancos_cta_destino_saCuentaBancaria");

                entity.HasOne(d => d.CtaIngrEgrComisionNavigation)
                    .WithMany(p => p.SaTransferenciaEntreCuentasCtaIngrEgrComisionNavigation)
                    .HasForeignKey(d => d.CtaIngrEgrComision)
                    .HasConstraintName("FK_saTransferenciaEntreBancos_cta_ingr_egr_comision_saCuentaIngEgr");

                entity.HasOne(d => d.CtaIngrEgrDestinoNavigation)
                    .WithMany(p => p.SaTransferenciaEntreCuentasCtaIngrEgrDestinoNavigation)
                    .HasForeignKey(d => d.CtaIngrEgrDestino)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saTransferenciaEntreBancos_cta_ingr_egr_destino_saTransferenciaEntreBancos");

                entity.HasOne(d => d.CtaIngrEgrOrigenNavigation)
                    .WithMany(p => p.SaTransferenciaEntreCuentasCtaIngrEgrOrigenNavigation)
                    .HasForeignKey(d => d.CtaIngrEgrOrigen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saTransferenciaEntreBancos_cta_ingr_egr_origen_saCuentaIngEgr");

                entity.HasOne(d => d.CtaOrigenNavigation)
                    .WithMany(p => p.SaTransferenciaEntreCuentasCtaOrigenNavigation)
                    .HasForeignKey(d => d.CtaOrigen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saTransferenciaEntreBancos_cta_origen_saCuentaBancaria");

                entity.HasOne(d => d.MovBanComisionNavigation)
                    .WithMany(p => p.SaTransferenciaEntreCuentasMovBanComisionNavigation)
                    .HasForeignKey(d => d.MovBanComision)
                    .HasConstraintName("FK_saTransferenciaEntreBancos_mov_ban_comision_saTransferenciaEntreBancos");

                entity.HasOne(d => d.MovBanDestinoNavigation)
                    .WithMany(p => p.SaTransferenciaEntreCuentasMovBanDestinoNavigation)
                    .HasForeignKey(d => d.MovBanDestino)
                    .HasConstraintName("FK_saTransferenciaEntreBancos_mov_ban_destino_saTransferenciaEntreBancos");

                entity.HasOne(d => d.MovBanOrigenNavigation)
                    .WithMany(p => p.SaTransferenciaEntreCuentasMovBanOrigenNavigation)
                    .HasForeignKey(d => d.MovBanOrigen)
                    .HasConstraintName("FK_saTransferenciaEntreBancos_mov_ban_origen_saMovimientoBanco");
            });

            modelBuilder.Entity<SaTransporte>(entity =>
            {
                entity.HasKey(e => e.CoTran);

                entity.ToTable("saTransporte");

                entity.HasIndex(e => e.DesTran);

                entity.Property(e => e.CoTran)
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de transporte");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesTran)
                    .IsRequired()
                    .HasColumnName("des_tran")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Tipo de Transporte");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.RespTra)
                    .HasColumnName("resp_tra")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Responsable del Transporte");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaTraslado>(entity =>
            {
                entity.HasKey(e => e.TrasNum);

                entity.ToTable("saTraslado");

                entity.HasIndex(e => e.AlmDest);

                entity.HasIndex(e => e.AlmOrig);

                entity.HasIndex(e => e.Fecha);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saTraslado_rowguid")
                    .IsUnique();

                entity.Property(e => e.TrasNum)
                    .HasColumnName("tras_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Traslado");

                entity.Property(e => e.AlmDest)
                    .HasColumnName("alm_dest")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen destino");

                entity.Property(e => e.AlmOrig)
                    .IsRequired()
                    .HasColumnName("alm_orig")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen origen");

                entity.Property(e => e.AlmTmp)
                    .IsRequired()
                    .HasColumnName("alm_tmp")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del almacen temporal");

                entity.Property(e => e.Anulado)
                    .HasColumnName("anulado")
                    .HasComment("Indica si el registro7documento esta anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la moneda");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.Confirma)
                    .HasColumnName("confirma")
                    .HasComment("Confirmacion del Traslado");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecConf)
                    .HasColumnName("fec_conf")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de la Confirmación");

                entity.Property(e => e.FecSal)
                    .HasColumnName("fec_sal")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha en la que el inventario es descontado del origen y pasa al almacen temporal");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha del Movimiento");

                entity.Property(e => e.MontoDist)
                    .HasColumnName("monto_dist")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Monto Adicional a distribuir en los renglones (afecta costo)");

                entity.Property(e => e.MotivoGlo)
                    .HasColumnName("motivo_glo")
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasComment("Explicación o motivo de lo que causo el traslado");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SerialesE)
                    .HasColumnName("seriales_e")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.SerialesS)
                    .HasColumnName("seriales_s")
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("tasa de conversion de la moneda del documento con respecto a la moneda base");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AlmDestNavigation)
                    .WithMany(p => p.SaTrasladoAlmDestNavigation)
                    .HasForeignKey(d => d.AlmDest)
                    .HasConstraintName("FK_saTraslado_Alm_Dest");

                entity.HasOne(d => d.AlmOrigNavigation)
                    .WithMany(p => p.SaTrasladoAlmOrigNavigation)
                    .HasForeignKey(d => d.AlmOrig)
                    .HasConstraintName("FK_saTraslado_Alm_Orig");

                entity.HasOne(d => d.AlmTmpNavigation)
                    .WithMany(p => p.SaTrasladoAlmTmpNavigation)
                    .HasForeignKey(d => d.AlmTmp)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saTraslado_Alm_Temp");

                entity.HasOne(d => d.CoMoneNavigation)
                    .WithMany(p => p.SaTraslado)
                    .HasForeignKey(d => d.CoMone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saTraslado_saMoneda");
            });

            modelBuilder.Entity<SaTrasladoReng>(entity =>
            {
                entity.HasKey(e => new { e.TrasNum, e.RengNum });

                entity.ToTable("saTrasladoReng");

                entity.HasIndex(e => e.CoArt);

                entity.HasIndex(e => e.RengNum);

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saTrasladoReng_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.TrasNum);

                entity.Property(e => e.TrasNum)
                    .HasColumnName("tras_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de Traslado");

                entity.Property(e => e.RengNum)
                    .HasColumnName("reng_num")
                    .HasComment("Numero de Renglon");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del articulo");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CostUnit)
                    .HasColumnName("cost_unit")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo unitario");

                entity.Property(e => e.CostoAdi1)
                    .HasColumnName("costo_adi1")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Adicional 1 del renglon, por articulo (prorateo del campo monto_dist del encabezado)");

                entity.Property(e => e.CostoAdi2)
                    .HasColumnName("costo_adi2")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Adicional 2 del renglon, por articulo (reservado para futuras implementaciones)");

                entity.Property(e => e.CostoAdi3)
                    .HasColumnName("costo_adi3")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Costo Adicional 3 del renglon, por articulo (reservado para futuras implementaciones)");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.LoteAsignado)
                    .HasColumnName("lote_asignado")
                    .HasComment("Posee asignado informacion de lotes");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad secundaria");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos (en unidad secundaria) del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Total artículos del documento en encabezados o total de artículos comprados o vendidos en renglones");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TrasNumNavigation)
                    .WithMany(p => p.SaTrasladoReng)
                    .HasForeignKey(d => d.TrasNum)
                    .HasConstraintName("FK_saTrasladoReng_saTraslado");

                entity.HasOne(d => d.Co)
                    .WithMany(p => p.SaTrasladoRengCo)
                    .HasForeignKey(d => new { d.CoArt, d.CoUni })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saTrasladoReng_saArtUnidad");

                entity.HasOne(d => d.SaArtUnidad)
                    .WithMany(p => p.SaTrasladoRengSaArtUnidad)
                    .HasForeignKey(d => new { d.CoArt, d.ScoUni })
                    .HasConstraintName("FK_saTrasladoReng_saArtUnidadSec");
            });

            modelBuilder.Entity<SaUbicacion>(entity =>
            {
                entity.HasKey(e => e.CoUbicacion);

                entity.ToTable("saUbicacion");

                entity.HasIndex(e => e.DesUbicacion);

                entity.Property(e => e.CoUbicacion)
                    .HasColumnName("co_ubicacion")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del Ubicacion");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesUbicacion)
                    .IsRequired()
                    .HasColumnName("des_ubicacion")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del Ubicacion");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaUnidad>(entity =>
            {
                entity.HasKey(e => e.CoUni);

                entity.ToTable("saUnidad");

                entity.HasIndex(e => e.DesUni)
                    .HasName("IX_saUnidad_Des_Uni");

                entity.Property(e => e.CoUni)
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la unidad");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesUni)
                    .IsRequired()
                    .HasColumnName("des_uni")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la Unidad");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SaUnidadTributaria>(entity =>
            {
                entity.HasKey(e => e.UniFec)
                    .IsClustered(false);

                entity.ToTable("saUnidadTributaria");

                entity.Property(e => e.UniFec)
                    .HasColumnName("uni_fec")
                    .HasComment("Año de vigencia de la unidad tributaria")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.UniFecp)
                    .HasColumnName("uni_fecp")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de promulgación de la unidad tributaria");

                entity.Property(e => e.UniGact)
                    .HasColumnName("uni_gact")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Gaceta oficial en la que fue publicada la puesta en vigencia de la unidad tributaria");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Valor)
                    .HasColumnName("valor")
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Valor de la unidad tributaria ( Monto ).");
            });

            modelBuilder.Entity<SaVendedor>(entity =>
            {
                entity.HasKey(e => e.CoVen);

                entity.ToTable("saVendedor");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saVendedor_rowguid");

                entity.HasIndex(e => e.VenDes);

                entity.HasIndex(e => new { e.Feccom, e.Numcom })
                    .HasName("IX_saVendedor_contabilidad");

                entity.Property(e => e.CoVen)
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de vendedor");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Cedula)
                    .HasColumnName("cedula")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cedula");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoZon)
                    .HasColumnName("co_zon")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de zona");

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false)
                    .HasComment("Comentario");

                entity.Property(e => e.Comision)
                    .HasColumnName("comision")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comisión");

                entity.Property(e => e.Comisionv)
                    .HasColumnName("comisionv")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Porcentaje de comisión por ventas");

                entity.Property(e => e.Direc1)
                    .HasColumnName("direc1")
                    .IsUnicode(false)
                    .HasComment("Dirección");

                entity.Property(e => e.Direc2)
                    .HasColumnName("direc2")
                    .IsUnicode(false)
                    .HasComment("No es usado actualmante");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Correo electronico");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha en que se registra la información");

                entity.Property(e => e.FunCob)
                    .HasColumnName("fun_cob")
                    .HasComment("Función de cobrador");

                entity.Property(e => e.FunVen)
                    .HasColumnName("fun_ven")
                    .HasComment("Función de Vendedor");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indicativo de registro inactivo");

                entity.Property(e => e.Login)
                    .HasColumnName("login")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Login");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Password)
                    .HasColumnName("password")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Contrasena");

                entity.Property(e => e.PswM)
                    .HasColumnName("PSW_M")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Reservado para futuras implementaciones");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Telefonos)
                    .HasColumnName("telefonos")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Información de los numeros telefonicos");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("tipo")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de proveedor");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VenDes)
                    .HasColumnName("ven_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del vendedor");

                entity.HasOne(d => d.CoZonNavigation)
                    .WithMany(p => p.SaVendedor)
                    .HasForeignKey(d => d.CoZon)
                    .HasConstraintName("FK_saVendedor_saZona");
            });

            modelBuilder.Entity<SaZona>(entity =>
            {
                entity.HasKey(e => e.CoZon);

                entity.ToTable("saZona");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saZona_rowguid")
                    .IsUnique();

                entity.HasIndex(e => e.ZonDes);

                entity.Property(e => e.CoZon)
                    .HasColumnName("co_zon")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la Zona");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml")
                    .HasComment("Informacion Contable: cuenta contable, cuenta de gasto, distribucion de centro de costo (formato XML)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime")
                    .HasComment("Informacion Contable: fecha de procesamiento en contabilidad");

                entity.Property(e => e.Numcom)
                    .HasColumnName("numcom")
                    .HasComment("Informacion Contable: numero de comprobante de contabilidad asociado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ZonDes)
                    .IsRequired()
                    .HasColumnName("zon_des")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la Zona");
            });

            modelBuilder.Entity<SavArtCaracteristica>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristica");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SavArtCaracteristicaAjus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaAJUS");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SavArtCaracteristicaComp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaCOMP");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SavArtCaracteristicaDcli>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaDCLI");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SavArtCaracteristicaDpro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaDPRO");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SavArtCaracteristicaFact>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaFACT");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SavArtCaracteristicaGcom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaGCOM");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SavArtCaracteristicaNdes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaNDES");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SavArtCaracteristicaNent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaNENT");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SavArtCaracteristicaNrec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaNREC");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SavArtCaracteristicaTras>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("savArtCaracteristicaTRAS");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(29, 5)");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .IsRequired()
                    .HasColumnName("Num_Doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScCentro>(entity =>
            {
                entity.HasKey(e => e.CoCen);

                entity.ToTable("scCentro");

                entity.Property(e => e.CoCen)
                    .HasColumnName("co_cen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de centro de costo.");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesCen)
                    .HasColumnName("des_cen")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del centro de costo.");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ScCuenta>(entity =>
            {
                entity.HasKey(e => e.CoCue);

                entity.ToTable("scCuenta");

                entity.Property(e => e.CoCue)
                    .HasColumnName("co_cue")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta contable");

                entity.Property(e => e.AfectaPm)
                    .IsRequired()
                    .HasColumnName("afecta_pm")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Campo lógico utilizado para indicar si la cuenta afecta la posesión monetaria.");

                entity.Property(e => e.AjDpc)
                    .HasColumnName("aj_dpc")
                    .HasComment("Ajuste DPC10.Identificador de que la cuenta contable se le aplicará el ajuste DPC10.");

                entity.Property(e => e.AjIslr)
                    .HasColumnName("aj_islr")
                    .HasComment("Ajuste fiscal .Identificador de que a la cuenta contable se le aplicará el ajuste fiscal.");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CentroCo)
                    .IsRequired()
                    .HasColumnName("centro_co")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del centro de costo.Este campo se relaciona a la tabla SCCENTRO  a través de el campo CO_CEN de la tabla.");

                entity.Property(e => e.CoCuepadre)
                    .HasColumnName("co_cuepadre")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Cuenta Padre");

                entity.Property(e => e.CoGas)
                    .HasColumnName("co_gas")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de gasto.Este campo se relaciona a la tabla SCGASTOS  a través de el campo CO_GAS de la tabla.");

                entity.Property(e => e.CoTab)
                    .HasColumnName("co_tab")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del tipo de atributo.Este campo se relaciona a la tabla SCTABADI  a través de el campo CO_TAB de la tabla.");

                entity.Property(e => e.CoTab2)
                    .HasColumnName("co_tab2")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del tipo de atributo 2.Este campo se relaciona a la tabla SCTABADI  a través de el campo CO_TAB de la tabla.");

                entity.Property(e => e.CoTab3)
                    .HasColumnName("co_tab3")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del tipo de atributo 3.Este campo se relaciona a la tabla SCTABADI  a través de el campo CO_TAB de la tabla.");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CueGasto)
                    .HasColumnName("cue_gasto")
                    .HasComment("Cuenta de gasto.Identificador de que las cuentas contables  manejan cuentas de gasto .");

                entity.Property(e => e.DesCue)
                    .IsRequired()
                    .HasColumnName("des_cue")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción de la cuenta contable.");

                entity.Property(e => e.Detalle)
                    .HasColumnName("detalle")
                    .HasComment("Detalle.Identificador de que la cuenta es de movimiento o no.");

                entity.Property(e => e.ExcPat)
                    .HasColumnName("exc_pat")
                    .HasComment("Exclusiones fiscales historicas al patrimonio");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecInac)
                    .HasColumnName("fec_inac")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha en la que se colocá inactiva una cuenta contable.");

                entity.Property(e => e.FlujoEfe)
                    .HasColumnName("flujo_efe")
                    .HasComment("Campo lögico utilizado para indicar si la cuenta maneja flujo de efectivo.");

                entity.Property(e => e.Inactivo)
                    .HasColumnName("inactivo")
                    .HasComment("Indicativo de registro inactivo");

                entity.Property(e => e.IpcDpc)
                    .HasColumnName("ipc_dpc")
                    .HasComment("Tipo de IPC empleado en el ajuste por DPC-10");

                entity.Property(e => e.IpcIslr)
                    .HasColumnName("ipc_islr")
                    .HasComment("Tipo de IPC empleado en el ajuste fiscal");

                entity.Property(e => e.ManAdi)
                    .HasColumnName("man_adi")
                    .HasComment("Maneja atributos 1.Identificador de que se manejan atributo 1.");

                entity.Property(e => e.ManAdi2)
                    .HasColumnName("man_adi2")
                    .HasComment("Maneja atributos 2.Identificador de que se manejan atributo 2.");

                entity.Property(e => e.ManAdi3)
                    .HasColumnName("man_adi3")
                    .HasComment("Maneja atributos 3.Identificador de que se manejan atributo 3.");

                entity.Property(e => e.ManAux)
                    .HasColumnName("man_aux")
                    .HasComment("Maneja auxiliar. Identificador de que la cuenta contable maneja auxiliares.");

                entity.Property(e => e.ManDoc)
                    .HasColumnName("man_doc")
                    .HasComment("Maneja documento.Identificador de que las cuentas manejan documentos. .");

                entity.Property(e => e.ManFecdoc)
                    .HasColumnName("man_fecdoc")
                    .HasComment("Maneja fecha de documento.Identificador de que las cuentas manejan fecha de documento.");

                entity.Property(e => e.MeDpc)
                    .HasColumnName("me_dpc")
                    .HasComment("Método para el cálculo del ajuste DPC10.Tipo de método utilizado para el cálculo del ajuste  DPC10:  1(normal), 2(simple) o 3(otro).");

                entity.Property(e => e.MeIslr)
                    .HasColumnName("me_islr")
                    .HasComment("Método del ajuste fiscal.Identificador de el tipo de método que se utilizará para el cálculo de el ajuste: 1(normal), 2(simple) o 3(otro).");

                entity.Property(e => e.MesesRotacion)
                    .HasColumnName("meses_rotacion")
                    .HasComment("Número de meses por rotación de inventario utilizados para el ajuste por inflación");

                entity.Property(e => e.MonedaAdi)
                    .HasColumnName("moneda_adi")
                    .HasComment("Moneda adicional.Identificador de que la cuenta contable utilizará moneda adicional.");

                entity.Property(e => e.Opciones)
                    .HasColumnName("opciones")
                    .HasComment("Tipo de cuenta.Tipo de cuenta : 0(Monetario) ,1 (No monetaria).");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Saldan)
                    .HasColumnName("saldan")
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Saldo anterior.Monto anterior inicial de la cuenta contable .(no se encuentra actualmente en uso).");

                entity.Property(e => e.SaldoIni)
                    .HasColumnName("saldo_ini")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Saldo inicial.Monto inicial de la cuenta .");

                entity.Property(e => e.TipoInv)
                    .HasColumnName("tipo_inv")
                    .HasComment("Tipo de inventario");

                entity.Property(e => e.TipoPat)
                    .HasColumnName("tipo_pat")
                    .HasComment("Tipo de patrimonio: 1.Capital social y otras cuentas similares 2.Utilidades no distribuidas 3.Otras cuentas de patrimonio");

                entity.Property(e => e.Tipoaux)
                    .HasColumnName("tipoaux")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Tipo de auxiliar.Tipos de auxiliar: C(cliente),P(proveedor),O(otro),T(trabajador).");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ScGastos>(entity =>
            {
                entity.HasKey(e => e.CoGas);

                entity.ToTable("scGastos");

                entity.Property(e => e.CoGas)
                    .HasColumnName("co_gas")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la cuenta de gasto.");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.DesGas)
                    .HasColumnName("des_gas")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción  de la cuenta de gasto.");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SstockActAjuste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActAjuste");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActCompuesto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActCompuesto");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 11)");
            });

            modelBuilder.Entity<SstockActCompuestoReng>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActCompuestoReng");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 9)");
            });

            modelBuilder.Entity<SstockActDevolucionProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActDevolucionProveedor");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActDevolucionVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActDevolucionVenta");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActFacturaCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActFacturaCompra");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActFacturaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActFacturaVenta");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActNotaEntregaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActNotaEntregaVenta");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActNotaRecepcionCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActNotaRecepcionCompra");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActTrasladoDest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActTrasladoDest");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActTrasladoOri>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActTrasladoOri");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActTrasladoTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActTrasladoTemp");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockActTrasladoTempS>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockActTrasladoTempS");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockComPedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockComPedido");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_Art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockDesFacturaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockDesFacturaVenta");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_Art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SstockLleOrdenCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SStockLleOrdenCompra");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_Art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StgFactLoteGen>(entity =>
            {
                entity.HasKey(e => e.CoFactLoteGen)
                    .HasName("PK_saLotesFactGen");

                entity.ToTable("stgFactLoteGen");

                entity.HasIndex(e => e.Rowguid)
                    .HasName("UK_saLotesFactGen_rowguid")
                    .IsUnique();

                entity.Property(e => e.CoFactLoteGen)
                    .HasColumnName("co_fact_lote_gen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del proceso de facturación por lotes.");

                entity.Property(e => e.ArchCod)
                    .HasColumnName("arch_cod")
                    .HasMaxLength(260)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Ruta del archivo de código que se compilará durante la ejecuación del proceso para manipular los objetos de factura.");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoCliD)
                    .HasColumnName("co_cli_d")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("código de cliente que servirá como filtro del rango de clientes que se seleccionará.");

                entity.Property(e => e.CoCliH)
                    .HasColumnName("co_cli_h")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("código de cliente que servirá como filtro del rango de clientes que se seleccionará.");

                entity.Property(e => e.CoPlanVta)
                    .HasColumnName("co_plan_vta")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la plantilla de venta en la que se basará el proceso para crear las facturas.");

                entity.Property(e => e.CoSerieFact)
                    .IsRequired()
                    .HasColumnName("co_serie_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la serie que se utilizará para asignar el nro de factura");

                entity.Property(e => e.CoSerieNctrl)
                    .IsRequired()
                    .HasColumnName("co_serie_nctrl")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la serie que se utilizará para asignar el nro de control de factura");

                entity.Property(e => e.CoSucu)
                    .HasColumnName("co_sucu")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de sucursal en la que se crearán las facturas.");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo de la sucursal donde fue modificado por ultima vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que ingreso el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Codigo del usuario que hizo la ultima modificación en el registro");

                entity.Property(e => e.CoUsuario)
                    .IsRequired()
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de usuario con el que crearán las facturas.");

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Descripción del registro o documento");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de insercion del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la ultima modificacion del registro");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de emision");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de registro");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime")
                    .HasComment("Fecha de vencimiento");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.ManCondPl)
                    .HasColumnName("man_cond_pl")
                    .HasComment("Indica si se le asignará código de condición de pago a todos los documentos generados.");

                entity.Property(e => e.ManFecEmis)
                    .HasColumnName("man_fec_emis")
                    .HasComment("Indica si se le asignará fecha de emisión a todos los documentos generados.");

                entity.Property(e => e.ManFecReg)
                    .HasColumnName("man_fec_reg")
                    .HasComment("Indica si se le asignará fecha de registro a todos los documentos generados.");

                entity.Property(e => e.ManFecVenc)
                    .HasColumnName("man_fec_venc")
                    .HasComment("Indica si se le asignará fecha de vencimiento a todos los documentos generados.");

                entity.Property(e => e.ManVenPl)
                    .HasColumnName("man_ven_pl")
                    .HasComment("Indica si se le asignará código de vendedor a todos los documentos generados.");

                entity.Property(e => e.PrecVtaAct)
                    .HasColumnName("prec_vta_act")
                    .HasComment("Indica si se asignará a los renglones el precio de venta actual o el que tiene la plantilla.");

                entity.Property(e => e.Procesado)
                    .HasColumnName("procesado")
                    .HasComment("Indica si el registro fue procesado.");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador Unico");

                entity.Property(e => e.SpUsuario)
                    .HasColumnName("sp_usuario")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Nombre del store procedure que se utilizará para conseguir el rango de clientes.");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Marca de tiempo usada en el control de concurrencia")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CoCl)
                    .WithMany(p => p.StgFactLoteGenCoCl)
                    .HasForeignKey(d => d.CoCliD)
                    .HasConstraintName("FK_stgFactLoteGen_saClienteD");

                entity.HasOne(d => d.CoCliHNavigation)
                    .WithMany(p => p.StgFactLoteGenCoCliHNavigation)
                    .HasForeignKey(d => d.CoCliH)
                    .HasConstraintName("FK_stgFactLoteGen_saClienteH");

                entity.HasOne(d => d.CoPlanVtaNavigation)
                    .WithMany(p => p.StgFactLoteGen)
                    .HasForeignKey(d => d.CoPlanVta)
                    .HasConstraintName("FK_stgFactLoteGen_saPlantillaVenta");

                entity.HasOne(d => d.CoSerieFactNavigation)
                    .WithMany(p => p.StgFactLoteGenCoSerieFactNavigation)
                    .HasPrincipalKey(p => p.CoSerie)
                    .HasForeignKey(d => d.CoSerieFact)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saLotesFactGen_saSerieFact");

                entity.HasOne(d => d.CoSerieNctrlNavigation)
                    .WithMany(p => p.StgFactLoteGenCoSerieNctrlNavigation)
                    .HasPrincipalKey(p => p.CoSerie)
                    .HasForeignKey(d => d.CoSerieNctrl)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_saLotesFactGen_saSerieNctrl");
            });

            modelBuilder.Entity<StgFacturaVentaExt>(entity =>
            {
                entity.HasKey(e => e.RowguidDocNum);

                entity.ToTable("stgFacturaVentaExt");

                entity.Property(e => e.RowguidDocNum)
                    .HasColumnName("rowguid_doc_num")
                    .HasComment("Identificador único (Tabla saFacturaVenta)")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Campo Adicional");

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue ingresado el registro");

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código de la sucursal donde fue modificado por última vez el registro");

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que ingresó el registro");

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Código del usuario que hizo la última modificación en el registro");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de inserción del registro");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime")
                    .HasComment("Fecha de la última modificación del registro");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Identificador único");

                entity.Property(e => e.RowguidNumFactLoteGen)
                    .HasColumnName("rowguid_num_FactLoteGen")
                    .HasComment("Identificador único (Tabla stgFactLoteGen)");

                entity.Property(e => e.Transfe)
                    .HasColumnName("transfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Reservado por el sistema");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .HasComment("Reservado por el sistema")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowguidDocNumNavigation)
                    .WithOne(p => p.StgFacturaVentaExt)
                    .HasPrincipalKey<SaFacturaVenta>(p => p.Rowguid)
                    .HasForeignKey<StgFacturaVentaExt>(d => d.RowguidDocNum)
                    .HasConstraintName("FK_stgFacturaVentaExt_saFacturaVenta");

                entity.HasOne(d => d.RowguidNumFactLoteGenNavigation)
                    .WithMany(p => p.StgFacturaVentaExt)
                    .HasPrincipalKey(p => p.Rowguid)
                    .HasForeignKey(d => d.RowguidNumFactLoteGen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_stgFacturaVentaExt_stgFactLoteGen");
            });

            modelBuilder.Entity<StockActAjuste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActAjuste");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActAjusteLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActAjusteLote");

                entity.Property(e => e.AjueNum)
                    .IsRequired()
                    .HasColumnName("ajue_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActArtCompuestoGenLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActArtCompuestoGenLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.GeneNum)
                    .IsRequired()
                    .HasColumnName("gene_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActArtCompuestoGenRengLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActArtCompuestoGenRengLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.GeneNum)
                    .IsRequired()
                    .HasColumnName("gene_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActCompuesto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActCompuesto");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 11)");
            });

            modelBuilder.Entity<StockActCompuestoReng>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActCompuestoReng");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 9)");
            });

            modelBuilder.Entity<StockActDevolucionProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActDevolucionProveedor");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActDevolucionProveedorLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActDevolucionProveedorLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActDevolucionVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActDevolucionVenta");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActDevolucionVentaLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActDevolucionVentaLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActFacturaCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActFacturaCompra");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActFacturaCompraLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActFacturaCompraLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActFacturaCompraMovInv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActFacturaCompraMovInv");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActFacturaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActFacturaVenta");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActFacturaVentaLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActFacturaVentaLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActFacturaVentaMovInv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActFacturaVentaMovInv");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActNotaDespachoVentaLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActNotaDespachoVentaLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_Num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActNotaEntregaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActNotaEntregaVenta");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActNotaEntregaVentaLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActNotaEntregaVentaLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_Num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActNotaRecepcionCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActNotaRecepcionCompra");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActNotaRecepcionCompraLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActNotaRecepcionCompraLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActTrasladoDest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActTrasladoDest");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActTrasladoDestLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActTrasladoDestLote");

                entity.Property(e => e.CoAlma)
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.TrasNum)
                    .IsRequired()
                    .HasColumnName("tras_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<StockActTrasladoOri>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActTrasladoOri");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActTrasladoOriLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActTrasladoOriLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.TrasNum)
                    .IsRequired()
                    .HasColumnName("tras_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<StockActTrasladoTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActTrasladoTemp");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockActTrasladoTempLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActTrasladoTempLote");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.TrasNum)
                    .IsRequired()
                    .HasColumnName("tras_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<StockActTrasladoTempS>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockActTrasladoTempS");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockComPedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockComPedido");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockDesFacturaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockDesFacturaVenta");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<StockLleOrdenCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockLleOrdenCompra");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TipoStock)
                    .IsRequired()
                    .HasColumnName("tipo_stock")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<VSaAjustePrecioA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saAjustePrecioA");

                entity.Property(e => e.CodAjuste)
                    .IsRequired()
                    .HasColumnName("cod_ajuste")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesAjuste)
                    .IsRequired()
                    .HasColumnName("des_ajuste")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VSaAjustePrecioM>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saAjustePrecioM");

                entity.Property(e => e.CodAjuste)
                    .IsRequired()
                    .HasColumnName("cod_ajuste")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesAjuste)
                    .IsRequired()
                    .HasColumnName("des_ajuste")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VSaAjustes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saAjustes");

                entity.Property(e => e.AjueNum)
                    .IsRequired()
                    .HasColumnName("ajue_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.Aux01)
                    .HasColumnName("aux01")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Aux02)
                    .HasColumnName("aux02")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoInvfisico)
                    .HasColumnName("co_invfisico")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Motivo)
                    .IsRequired()
                    .HasColumnName("motivo")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Numcom).HasColumnName("numcom");

                entity.Property(e => e.SerialesE).HasColumnName("seriales_e");

                entity.Property(e => e.SerialesS).HasColumnName("seriales_s");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<VSaAreaImpresion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saAreaImpresion");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoAreaImp)
                    .IsRequired()
                    .HasColumnName("co_area_imp")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesAreaImp)
                    .IsRequired()
                    .HasColumnName("des_area_imp")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaArtCompuesGen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saArtCompuesGen");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CostoTot)
                    .HasColumnName("costo_tot")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Feccom)
                    .HasColumnName("feccom")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GeneArt).HasColumnName("gene_art");

                entity.Property(e => e.GeneNum)
                    .IsRequired()
                    .HasColumnName("gene_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Numcom).HasColumnName("numcom");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("sco_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SerialesS).HasColumnName("seriales_s");

                entity.Property(e => e.StotalArt)
                    .HasColumnName("stotal_art")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalArt)
                    .HasColumnName("total_art")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaArtCompuesto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saArtCompuesto");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArtc)
                    .IsRequired()
                    .HasColumnName("co_artc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .IsRequired()
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaArtCompuestoSaArticulo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saArtCompuesto_saArticulo");

                entity.Property(e => e.ArtDes)
                    .IsRequired()
                    .HasColumnName("art_des")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArtc)
                    .IsRequired()
                    .HasColumnName("co_artc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaArtPrecioSaTipoPrecio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saArtPrecio_saTipoPrecio");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoAlmaCalculado)
                    .IsRequired()
                    .HasColumnName("co_alma_calculado")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoPrecio)
                    .IsRequired()
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesPrecio)
                    .IsRequired()
                    .HasColumnName("des_precio")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Desde)
                    .HasColumnName("desde")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta)
                    .HasColumnName("hasta")
                    .HasColumnType("datetime");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaArticuloImagen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saArticuloImagen");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoImag)
                    .IsRequired()
                    .HasColumnName("co_imag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesImag)
                    .HasColumnName("des_imag")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Picture).HasColumnName("picture");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaArticuloSaArtUnidad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saArticulo_saArtUnidad");

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.ArtDes)
                    .IsRequired()
                    .HasColumnName("art_des")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCat)
                    .IsRequired()
                    .HasColumnName("co_cat")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoColor)
                    .IsRequired()
                    .HasColumnName("co_color")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin)
                    .IsRequired()
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoReten)
                    .HasColumnName("co_reten")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl)
                    .IsRequired()
                    .HasColumnName("co_subl")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUbicacion)
                    .IsRequired()
                    .HasColumnName("co_ubicacion")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProc)
                    .HasColumnName("cod_proc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false);

                entity.Property(e => e.DesUni)
                    .IsRequired()
                    .HasColumnName("des_uni")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml");

                entity.Property(e => e.Equivalencia)
                    .HasColumnName("equivalencia")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaInac)
                    .HasColumnName("fecha_inac")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Garantia)
                    .IsRequired()
                    .HasColumnName("garantia")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Generico).HasColumnName("generico");

                entity.Property(e => e.Item)
                    .HasColumnName("item")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LicCapacidad)
                    .HasColumnName("lic_capacidad")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LicGradoAl)
                    .HasColumnName("lic_grado_al")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.LicMonIlc)
                    .HasColumnName("lic_mon_ilc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LicTipo)
                    .HasColumnName("lic_tipo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ManejaLote).HasColumnName("maneja_lote");

                entity.Property(e => e.ManejaLoteVenc).HasColumnName("maneja_lote_venc");

                entity.Property(e => e.ManejaSerial).HasColumnName("maneja_serial");

                entity.Property(e => e.MargenMax)
                    .HasColumnName("margen_max")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MargenMin)
                    .HasColumnName("margen_min")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Modelo)
                    .HasColumnName("modelo")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontComi)
                    .HasColumnName("mont_comi")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Peso)
                    .HasColumnName("peso")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcArancel)
                    .HasColumnName("porc_arancel")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PorcMargenMinimo)
                    .HasColumnName("porc_margen_minimo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecOm).HasColumnName("prec_om");

                entity.Property(e => e.PuntCli)
                    .HasColumnName("punt_cli")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PuntVen)
                    .HasColumnName("punt_ven")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ref)
                    .HasColumnName("ref")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RelacUnidad).HasColumnName("relac_unidad");

                entity.Property(e => e.Relacion).HasColumnName("relacion");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.StockMax)
                    .HasColumnName("stock_max")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockMin)
                    .HasColumnName("stock_min")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockPedido)
                    .HasColumnName("stock_pedido")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("tipo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCos)
                    .HasColumnName("tipo_cos")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UniPrincipal).HasColumnName("uni_principal");

                entity.Property(e => e.UsoPrincipal).HasColumnName("uso_principal");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Volumen)
                    .HasColumnName("volumen")
                    .HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<VSaArticuloSaArtUnidadSec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saArticulo_saArtUnidadSec");

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.ArtDes)
                    .IsRequired()
                    .HasColumnName("art_des")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCat)
                    .IsRequired()
                    .HasColumnName("co_cat")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoColor)
                    .IsRequired()
                    .HasColumnName("co_color")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin)
                    .IsRequired()
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoReten)
                    .HasColumnName("co_reten")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl)
                    .IsRequired()
                    .HasColumnName("co_subl")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUbicacion)
                    .IsRequired()
                    .HasColumnName("co_ubicacion")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("co_uni")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProc)
                    .HasColumnName("cod_proc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false);

                entity.Property(e => e.DesUni)
                    .IsRequired()
                    .HasColumnName("des_uni")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml");

                entity.Property(e => e.Equivalencia)
                    .HasColumnName("equivalencia")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaInac)
                    .HasColumnName("fecha_inac")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Garantia)
                    .IsRequired()
                    .HasColumnName("garantia")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Generico).HasColumnName("generico");

                entity.Property(e => e.Item)
                    .HasColumnName("item")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LicCapacidad)
                    .HasColumnName("lic_capacidad")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LicGradoAl)
                    .HasColumnName("lic_grado_al")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.LicMonIlc)
                    .HasColumnName("lic_mon_ilc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LicTipo)
                    .HasColumnName("lic_tipo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ManejaLote).HasColumnName("maneja_lote");

                entity.Property(e => e.ManejaLoteVenc).HasColumnName("maneja_lote_venc");

                entity.Property(e => e.ManejaSerial).HasColumnName("maneja_serial");

                entity.Property(e => e.MargenMax)
                    .HasColumnName("margen_max")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MargenMin)
                    .HasColumnName("margen_min")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Modelo)
                    .HasColumnName("modelo")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontComi)
                    .HasColumnName("mont_comi")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Peso)
                    .HasColumnName("peso")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcArancel)
                    .HasColumnName("porc_arancel")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PorcMargenMinimo)
                    .HasColumnName("porc_margen_minimo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecOm).HasColumnName("prec_om");

                entity.Property(e => e.PuntCli)
                    .HasColumnName("punt_cli")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PuntVen)
                    .HasColumnName("punt_ven")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ref)
                    .HasColumnName("ref")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RelacUnidad).HasColumnName("relac_unidad");

                entity.Property(e => e.Relacion).HasColumnName("relacion");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.StockMax)
                    .HasColumnName("stock_max")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockMin)
                    .HasColumnName("stock_min")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockPedido)
                    .HasColumnName("stock_pedido")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("tipo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCos)
                    .HasColumnName("tipo_cos")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UniSecundaria).HasColumnName("uni_secundaria");

                entity.Property(e => e.UsoSecundaria).HasColumnName("uso_secundaria");

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Volumen)
                    .HasColumnName("volumen")
                    .HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<VSaChequeDevuelto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saChequeDevuelto");

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.CoBan)
                    .IsRequired()
                    .HasColumnName("co_ban")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CobNum)
                    .IsRequired()
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCta)
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesBan)
                    .IsRequired()
                    .HasColumnName("des_ban")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Devuelto).HasColumnName("devuelto");

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaChe)
                    .HasColumnName("fecha_che")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FormaPag)
                    .IsRequired()
                    .HasColumnName("forma_pag")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Inactivo).HasColumnName("inactivo");

                entity.Property(e => e.MontDoc)
                    .HasColumnName("mont_doc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MovNumB)
                    .HasColumnName("mov_num_b")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumCta)
                    .IsRequired()
                    .HasColumnName("num_cta")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ProvDes)
                    .IsRequired()
                    .HasColumnName("prov_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaChequeDevueltoVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saChequeDevueltoVenta");

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoBan)
                    .IsRequired()
                    .HasColumnName("co_ban")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CobNum)
                    .IsRequired()
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCaja)
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCta)
                    .IsRequired()
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesBan)
                    .IsRequired()
                    .HasColumnName("des_ban")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Descrip)
                    .IsRequired()
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Devuelto).HasColumnName("devuelto");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaChe)
                    .HasColumnName("fecha_che")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FormaPag)
                    .IsRequired()
                    .HasColumnName("forma_pag")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Inactivo).HasColumnName("inactivo");

                entity.Property(e => e.MontDoc)
                    .HasColumnName("mont_doc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MovNumC)
                    .HasColumnName("mov_num_c")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumDoc)
                    .HasColumnName("num_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saCliente");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasColumnName("ciudad")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoPais)
                    .HasColumnName("co_pais")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoPrecio)
                    .IsRequired()
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSeg)
                    .IsRequired()
                    .HasColumnName("co_seg")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTab)
                    .HasColumnName("co_tab")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoZon)
                    .IsRequired()
                    .HasColumnName("co_zon")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false);

                entity.Property(e => e.CondPag)
                    .HasColumnName("cond_pag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Contrib).HasColumnName("contrib");

                entity.Property(e => e.ContribuE).HasColumnName("contribu_e");

                entity.Property(e => e.DescGlob)
                    .HasColumnName("desc_glob")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DescPpago)
                    .HasColumnName("desc_ppago")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DirEnt2)
                    .HasColumnName("dir_ent2")
                    .IsUnicode(false);

                entity.Property(e => e.Direc1)
                    .HasColumnName("direc1")
                    .IsUnicode(false);

                entity.Property(e => e.Direc2)
                    .HasColumnName("direc2")
                    .IsUnicode(false);

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml");

                entity.Property(e => e.Domingo).HasColumnName("domingo");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasColumnName("estado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FrecuVist)
                    .HasColumnName("frecu_vist")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.HorarCaja)
                    .HasColumnName("horar_caja")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Inactivo).HasColumnName("inactivo");

                entity.Property(e => e.Jueves).HasColumnName("jueves");

                entity.Property(e => e.Juridico).HasColumnName("juridico");

                entity.Property(e => e.Login)
                    .HasColumnName("login")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Lunes).HasColumnName("lunes");

                entity.Property(e => e.Martes).HasColumnName("martes");

                entity.Property(e => e.Matriz)
                    .HasColumnName("matriz")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Miercoles).HasColumnName("miercoles");

                entity.Property(e => e.MontCre)
                    .HasColumnName("mont_cre")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Nit)
                    .HasColumnName("nit")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasColumnName("password")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlazPag).HasColumnName("plaz_pag");

                entity.Property(e => e.PorcEsp)
                    .HasColumnName("porc_esp")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Puntaje).HasColumnName("puntaje");

                entity.Property(e => e.Respons)
                    .HasColumnName("respons")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Rif)
                    .HasColumnName("rif")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Sabado).HasColumnName("sabado");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Serialp)
                    .HasColumnName("serialp")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Sincredito).HasColumnName("sincredito");

                entity.Property(e => e.Telefonos)
                    .HasColumnName("telefonos")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TipCli)
                    .IsRequired()
                    .HasColumnName("tip_cli")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoAdi).HasColumnName("tipo_adi");

                entity.Property(e => e.TipoPer)
                    .HasColumnName("tipo_per")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Valido).HasColumnName("valido");

                entity.Property(e => e.Viernes).HasColumnName("viernes");

                entity.Property(e => e.Website)
                    .HasColumnName("website")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasColumnName("zip")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaClienteSaTipoCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saCliente_saTipoCliente");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasColumnName("ciudad")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCtaIngrEgr)
                    .IsRequired()
                    .HasColumnName("co_cta_ingr_egr")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoPais)
                    .HasColumnName("co_pais")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoPrecio)
                    .IsRequired()
                    .HasColumnName("co_precio")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSeg)
                    .IsRequired()
                    .HasColumnName("co_seg")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTab)
                    .HasColumnName("co_tab")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoZon)
                    .IsRequired()
                    .HasColumnName("co_zon")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false);

                entity.Property(e => e.CondPag)
                    .HasColumnName("cond_pag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Contrib).HasColumnName("contrib");

                entity.Property(e => e.ContribuE).HasColumnName("contribu_e");

                entity.Property(e => e.DescGlob)
                    .HasColumnName("desc_glob")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DescPpago)
                    .HasColumnName("desc_ppago")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DirEnt2)
                    .HasColumnName("dir_ent2")
                    .IsUnicode(false);

                entity.Property(e => e.Direc1)
                    .HasColumnName("direc1")
                    .IsUnicode(false);

                entity.Property(e => e.Direc2)
                    .HasColumnName("direc2")
                    .IsUnicode(false);

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml");

                entity.Property(e => e.Domingo).HasColumnName("domingo");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasColumnName("estado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FrecuVist)
                    .HasColumnName("frecu_vist")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.HorarCaja)
                    .HasColumnName("horar_caja")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Inactivo).HasColumnName("inactivo");

                entity.Property(e => e.Jueves).HasColumnName("jueves");

                entity.Property(e => e.Juridico).HasColumnName("juridico");

                entity.Property(e => e.Login)
                    .HasColumnName("login")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Lunes).HasColumnName("lunes");

                entity.Property(e => e.Martes).HasColumnName("martes");

                entity.Property(e => e.Matriz)
                    .HasColumnName("matriz")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Miercoles).HasColumnName("miercoles");

                entity.Property(e => e.MontCre)
                    .HasColumnName("mont_cre")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Nit)
                    .HasColumnName("nit")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasColumnName("password")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlazPag).HasColumnName("plaz_pag");

                entity.Property(e => e.PorcEsp)
                    .HasColumnName("porc_esp")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Puntaje).HasColumnName("puntaje");

                entity.Property(e => e.Respons)
                    .HasColumnName("respons")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rif)
                    .HasColumnName("rif")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Sabado).HasColumnName("sabado");

                entity.Property(e => e.Salestax)
                    .HasColumnName("salestax")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Serialp)
                    .HasColumnName("serialp")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Sincredito).HasColumnName("sincredito");

                entity.Property(e => e.Telefonos)
                    .HasColumnName("telefonos")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TipCli)
                    .IsRequired()
                    .HasColumnName("tip_cli")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoAdi).HasColumnName("tipo_adi");

                entity.Property(e => e.TipoPer)
                    .HasColumnName("tipo_per")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Valido).HasColumnName("valido");

                entity.Property(e => e.VenInactivo).HasColumnName("ven_inactivo");

                entity.Property(e => e.Viernes).HasColumnName("viernes");

                entity.Property(e => e.Website)
                    .HasColumnName("website")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasColumnName("zip")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaCobroCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saCobroCliente");

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CobNum)
                    .IsRequired()
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Recibo)
                    .HasColumnName("recibo")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaConIslrSaTabuladorIslr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saConISLR_saTabuladorISLR");

                entity.Property(e => e.CoIslr)
                    .IsRequired()
                    .HasColumnName("co_islr")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTab)
                    .IsRequired()
                    .HasColumnName("co_tab")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IslrDes)
                    .IsRequired()
                    .HasColumnName("islr_des")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.IslrDeslarga)
                    .HasColumnName("islr_deslarga")
                    .IsUnicode(false);

                entity.Property(e => e.Literal)
                    .HasColumnName("literal")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Numeral)
                    .HasColumnName("numeral")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PorcImp)
                    .HasColumnName("porc_imp")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcRet)
                    .HasColumnName("porc_ret")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sustraen)
                    .HasColumnName("sustraen")
                    .HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<VSaConfigDistCosto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saConfigDistCosto");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoConfig)
                    .IsRequired()
                    .HasColumnName("co_config")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMapa)
                    .HasColumnName("co_mapa")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsuario)
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesConfig)
                    .IsRequired()
                    .HasColumnName("des_config")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlData)
                    .HasColumnName("xml_data")
                    .HasColumnType("xml");

                entity.Property(e => e.XmlReglas)
                    .HasColumnName("xml_reglas")
                    .HasColumnType("xml");

                entity.Property(e => e.XmlSquema)
                    .HasColumnName("xml_squema")
                    .HasColumnType("xml");
            });

            modelBuilder.Entity<VSaConsultaArticulo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saConsultaArticulo");

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.ArtDes)
                    .IsRequired()
                    .HasColumnName("art_des")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCat)
                    .IsRequired()
                    .HasColumnName("co_cat")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoColor)
                    .IsRequired()
                    .HasColumnName("co_color")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin)
                    .IsRequired()
                    .HasColumnName("co_lin")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoReten)
                    .HasColumnName("co_reten")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl)
                    .IsRequired()
                    .HasColumnName("co_subl")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUbicacion)
                    .IsRequired()
                    .HasColumnName("co_ubicacion")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUni)
                    .IsRequired()
                    .HasColumnName("CO_UNI")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProc)
                    .HasColumnName("cod_proc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comentario)
                    .HasColumnName("comentario")
                    .IsUnicode(false);

                entity.Property(e => e.DisCen)
                    .HasColumnName("dis_cen")
                    .HasColumnType("xml");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaInac)
                    .HasColumnName("fecha_inac")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FechaReg)
                    .HasColumnName("fecha_reg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Garantia)
                    .IsRequired()
                    .HasColumnName("garantia")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Generico).HasColumnName("generico");

                entity.Property(e => e.Item)
                    .HasColumnName("item")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LicCapacidad)
                    .HasColumnName("lic_capacidad")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LicGradoAl)
                    .HasColumnName("lic_grado_al")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.LicMonIlc)
                    .HasColumnName("lic_mon_ilc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LicTipo)
                    .HasColumnName("lic_tipo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ManejaLote).HasColumnName("maneja_lote");

                entity.Property(e => e.ManejaLoteVenc).HasColumnName("maneja_lote_venc");

                entity.Property(e => e.ManejaSerial).HasColumnName("maneja_serial");

                entity.Property(e => e.MargenMax)
                    .HasColumnName("margen_max")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MargenMin)
                    .HasColumnName("margen_min")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Modelo)
                    .HasColumnName("modelo")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontComi)
                    .HasColumnName("mont_comi")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Peso)
                    .HasColumnName("peso")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PorcArancel)
                    .HasColumnName("porc_arancel")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PorcMargenMinimo)
                    .HasColumnName("porc_margen_minimo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecOm).HasColumnName("prec_om");

                entity.Property(e => e.PuntCli)
                    .HasColumnName("punt_cli")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PuntVen)
                    .HasColumnName("punt_ven")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ref)
                    .HasColumnName("ref")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RelacUnidad).HasColumnName("relac_unidad");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.ScoUni)
                    .HasColumnName("SCO_UNI")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StockMax)
                    .HasColumnName("stock_max")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockMin)
                    .HasColumnName("stock_min")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockPedido)
                    .HasColumnName("stock_pedido")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("tipo")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCos)
                    .HasColumnName("tipo_cos")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoImp)
                    .IsRequired()
                    .HasColumnName("tipo_imp")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Volumen)
                    .HasColumnName("volumen")
                    .HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<VSaCostoHistoricoEntrada>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saCostoHistoricoEntrada");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CantidadUsada)
                    .HasColumnName("cantidad_usada")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodAlmacen)
                    .IsRequired()
                    .HasColumnName("cod_almacen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Costo)
                    .HasColumnName("costo")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostoPro)
                    .HasColumnName("costo_pro")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DocOrig).HasColumnName("doc_orig");

                entity.Property(e => e.FechaEmisionE)
                    .HasColumnName("fecha_emision_e")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaEmisionS)
                    .HasColumnName("fecha_emision_s")
                    .HasColumnType("datetime");

                entity.Property(e => e.NroDocE)
                    .HasColumnName("nro_doc_e")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NroDocS)
                    .HasColumnName("nro_doc_s")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNumE).HasColumnName("reng_num_e");

                entity.Property(e => e.RengNumS).HasColumnName("reng_num_s");

                entity.Property(e => e.TipoDocE)
                    .IsRequired()
                    .HasColumnName("tipo_doc_e")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoDocS)
                    .HasColumnName("tipo_doc_s")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaCostoHistoricoSalida>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saCostoHistoricoSalida");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodAlmacen)
                    .IsRequired()
                    .HasColumnName("cod_almacen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Costo)
                    .HasColumnName("costo")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostoPro)
                    .HasColumnName("costo_pro")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DocOrig).HasColumnName("doc_orig");

                entity.Property(e => e.FechaEmisionE)
                    .HasColumnName("fecha_emision_e")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaEmisionS)
                    .HasColumnName("fecha_emision_s")
                    .HasColumnType("datetime");

                entity.Property(e => e.NroDocE)
                    .HasColumnName("nro_doc_e")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NroDocS)
                    .HasColumnName("nro_doc_s")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RengNumE).HasColumnName("reng_num_e");

                entity.Property(e => e.RengNumS).HasColumnName("reng_num_s");

                entity.Property(e => e.TipoDocE)
                    .HasColumnName("tipo_doc_e")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoDocS)
                    .IsRequired()
                    .HasColumnName("tipo_doc_s")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaCotizacionCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saCotizacionCliente");

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaCotizacionProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saCotizacionProveedor");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProvDes)
                    .IsRequired()
                    .HasColumnName("prov_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaDepositoBancario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saDepositoBancario");

                entity.Property(e => e.CodCta)
                    .IsRequired()
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DepNum)
                    .IsRequired()
                    .HasColumnName("dep_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Deposito)
                    .IsRequired()
                    .HasColumnName("deposito")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VSaDevolucionCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saDevolucionCliente");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaDevolucionProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saDevolucionProveedor");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProvDes)
                    .IsRequired()
                    .HasColumnName("prov_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaDistribCosto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saDistribCosto");

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DistribNum)
                    .IsRequired()
                    .HasColumnName("distrib_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaDocumentoCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saDocumentoCompra");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocOrig)
                    .IsRequired()
                    .HasColumnName("doc_orig")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Expr1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Expr2)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Expr3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Expr4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MovBan)
                    .IsRequired()
                    .HasColumnName("mov_ban")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroChe)
                    .IsRequired()
                    .HasColumnName("nro_che")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroDoc)
                    .IsRequired()
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NroFact)
                    .IsRequired()
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroOrig)
                    .IsRequired()
                    .HasColumnName("nro_orig")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumComprobante)
                    .HasColumnName("num_comprobante")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Observa)
                    .IsRequired()
                    .HasColumnName("observa")
                    .IsUnicode(false);

                entity.Property(e => e.ProvDes)
                    .IsRequired()
                    .HasColumnName("prov_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaDocumentoElectronico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saDocumentoElectronico");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoCliDesde)
                    .HasColumnName("co_cli_desde")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCliHasta)
                    .HasColumnName("co_cli_hasta")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoDocElec)
                    .IsRequired()
                    .HasColumnName("co_doc_elec")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoGrupoRep)
                    .IsRequired()
                    .HasColumnName("co_grupo_rep")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProvDesde)
                    .HasColumnName("co_prov_desde")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProvHasta)
                    .HasColumnName("co_prov_hasta")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoReporte)
                    .IsRequired()
                    .HasColumnName("co_reporte")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CorreoAsunto)
                    .HasColumnName("correo_asunto")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.CorreoBcc)
                    .HasColumnName("correo_bcc")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.CorreoCc)
                    .HasColumnName("correo_cc")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.CorreoCuerpo)
                    .HasColumnName("correo_cuerpo")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.CorreoFirma)
                    .HasColumnName("correo_firma")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.DesDocElec)
                    .HasColumnName("des_doc_elec")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNumDesde)
                    .HasColumnName("doc_num_desde")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocNumHasta)
                    .HasColumnName("doc_num_hasta")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Enviarcorreo).HasColumnName("enviarcorreo");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FecDocElec)
                    .HasColumnName("fec_doc_elec")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FecEmisDesde)
                    .HasColumnName("fec_emis_desde")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FecEmisHasta)
                    .HasColumnName("fec_emis_hasta")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FecVencDesde)
                    .HasColumnName("fec_venc_desde")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FecVencHasta)
                    .HasColumnName("fec_venc_hasta")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Log).HasColumnType("xml");

                entity.Property(e => e.Mantenerarchivos).HasColumnName("mantenerarchivos");

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.RutaArch)
                    .HasColumnName("ruta_arch")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.SpDocElec)
                    .HasColumnName("sp_doc_elec")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoDocSalida).HasColumnName("tipo_doc_salida");

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasColumnName("tipo_documento")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaDocumentoImagen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saDocumentoImagen");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoImag)
                    .IsRequired()
                    .HasColumnName("co_imag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoImag)
                    .HasColumnName("co_tipo_imag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesImag)
                    .HasColumnName("des_imag")
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Picture).HasColumnName("picture");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.RowguidDoc).HasColumnName("rowguidDoc");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaDocumentoVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saDocumentoVenta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoDoc)
                    .IsRequired()
                    .HasColumnName("co_tipo_doc")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocOrig)
                    .IsRequired()
                    .HasColumnName("doc_orig")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Expr1)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Expr2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Expr3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.MovBan)
                    .IsRequired()
                    .HasColumnName("mov_ban")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroChe)
                    .IsRequired()
                    .HasColumnName("nro_che")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroDoc)
                    .IsRequired()
                    .HasColumnName("nro_doc")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NroOrig)
                    .IsRequired()
                    .HasColumnName("nro_orig")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumComprobante)
                    .HasColumnName("num_comprobante")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Observa)
                    .IsRequired()
                    .HasColumnName("observa")
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaFacturaCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saFacturaCompra");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroFact)
                    .IsRequired()
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProvDes)
                    .IsRequired()
                    .HasColumnName("prov_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaFacturaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saFacturaVenta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImpNroZ)
                    .HasColumnName("imp_nro_z")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaImpMun>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saImpMun");

                entity.Property(e => e.CoImun)
                    .IsRequired()
                    .HasColumnName("co_imun")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .IsRequired()
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ImpDes)
                    .IsRequired()
                    .HasColumnName("imp_des")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaIncoterm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saIncoterm");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoIncoterm)
                    .IsRequired()
                    .HasColumnName("co_incoterm")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DescripDetallada).HasColumnName("descrip_detallada");

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.IncotermDes)
                    .IsRequired()
                    .HasColumnName("incoterm_des")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Secuencia).HasColumnName("secuencia");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaLoteEntrada>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saLoteEntrada");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CoAlma)
                    .IsRequired()
                    .HasColumnName("co_alma")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaExpiracion)
                    .HasColumnName("fecha_expiracion")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FechaInicio)
                    .HasColumnName("fecha_inicio")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NumeroLote)
                    .IsRequired()
                    .HasColumnName("numero_lote")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Precio)
                    .HasColumnName("precio")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RengNum).HasColumnName("reng_num");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.RowguidReng).HasColumnName("rowguid_reng");

                entity.Property(e => e.StockActual)
                    .HasColumnName("stock_actual")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaMovimientoBanco>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_sa_movimientoBanco");

                entity.Property(e => e.CodCta)
                    .IsRequired()
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SaldoIni).HasColumnName("saldo_ini");
            });

            modelBuilder.Entity<VSaMovimientoBanco1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saMovimientoBanco");

                entity.Property(e => e.CodCta)
                    .IsRequired()
                    .HasColumnName("cod_cta")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Conciliado).HasColumnName("conciliado");

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MontoD)
                    .HasColumnName("monto_d")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoH)
                    .HasColumnName("monto_h")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MovNum)
                    .IsRequired()
                    .HasColumnName("mov_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaMovimientoCaja>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saMovimientoCaja");

                entity.Property(e => e.CodCaja)
                    .IsRequired()
                    .HasColumnName("cod_caja")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Depositado).HasColumnName("depositado");

                entity.Property(e => e.DocNum)
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MontoD)
                    .HasColumnName("monto_d")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoH)
                    .HasColumnName("monto_h")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MovNum)
                    .IsRequired()
                    .HasColumnName("mov_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaNotaDespachoVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saNotaDespachoVenta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaNotaEntregaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saNotaEntregaVenta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaNotaRecepcionCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saNotaRecepcionCompra");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProvDes)
                    .IsRequired()
                    .HasColumnName("prov_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaOrdenCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saOrdenCompra");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProvDes)
                    .IsRequired()
                    .HasColumnName("prov_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaOrdenPago>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saOrdenPago");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CodBen)
                    .IsRequired()
                    .HasColumnName("cod_ben")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.OrdNum)
                    .IsRequired()
                    .HasColumnName("ord_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StatusText)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TotalMonto)
                    .HasColumnName("Total_Monto")
                    .HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<VSaPagoProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saPagoProveedor");

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CobNum)
                    .IsRequired()
                    .HasColumnName("cob_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Recibo)
                    .HasColumnName("recibo")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaPedidoVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saPedidoVenta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaPlantillaCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saPlantillaCompra");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoProv)
                    .IsRequired()
                    .HasColumnName("co_prov")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroFact)
                    .HasColumnName("nro_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProvDes)
                    .IsRequired()
                    .HasColumnName("prov_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaPlantillaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saPlantillaVenta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CliDes)
                    .IsRequired()
                    .HasColumnName("cli_des")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoCli)
                    .IsRequired()
                    .HasColumnName("co_cli")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCond)
                    .HasColumnName("co_cond")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTran)
                    .IsRequired()
                    .HasColumnName("co_tran")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoVen)
                    .IsRequired()
                    .HasColumnName("co_ven")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .IsRequired()
                    .HasColumnName("doc_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Impfis)
                    .HasColumnName("impfis")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Impfisfac)
                    .HasColumnName("impfisfac")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NControl)
                    .HasColumnName("n_control")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo)
                    .HasColumnName("saldo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalBruto)
                    .HasColumnName("total_bruto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNeto)
                    .HasColumnName("total_neto")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VSaPuntoEmision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saPuntoEmision");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoPuntoEmi)
                    .IsRequired()
                    .HasColumnName("co_punto_emi")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesPuntoEmi)
                    .IsRequired()
                    .HasColumnName("des_punto_emi")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaResInventario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saResInventario");

                entity.Property(e => e.DesResinv)
                    .IsRequired()
                    .HasColumnName("des_resinv")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NumResinv)
                    .IsRequired()
                    .HasColumnName("num_resinv")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaSeriePorTipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriePorTipo");

                entity.Property(e => e.CoSeriePorTipo)
                    .HasColumnName("co_seriePorTipo")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipo)
                    .IsRequired()
                    .HasColumnName("co_tipo")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.DesSeriePorTipo)
                    .HasColumnName("des_seriePorTipo")
                    .HasMaxLength(125)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeries");

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesTipoSerie)
                    .IsRequired()
                    .HasColumnName("des_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesCotizacionCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesCotizacionCliente");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesCotizacionProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesCotizacionProveedor");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesDevolucionCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesDevolucionCliente");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesDevolucionProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesDevolucionProveedor");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesFacturaCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesFacturaCompra");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesFacturaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesFacturaVenta");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesFacturaVentaNroControl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesFacturaVentaNroControl");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesNcf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesNCF");

                entity.Property(e => e.CoConsecutivo)
                    .IsRequired()
                    .HasColumnName("co_consecutivo")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Consecutivo)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaSeriesNotaCredito>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesNotaCredito");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesNotaCreditoNroControl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesNotaCreditoNroControl");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesNotaDespacho>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesNotaDespacho");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesNotaEntrega>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesNotaEntrega");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesNotaEntregaNroControl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesNotaEntregaNroControl");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesNotaRecepcion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesNotaRecepcion");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesOrdenCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesOrdenCompra");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesPedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesPedido");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesPlantillaCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesPlantillaCompra");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaSeriesPlantillaVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saSeriesPlantillaVenta");

                entity.Property(e => e.CoEmp)
                    .HasColumnName("co_emp")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerie)
                    .HasColumnName("co_serie")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucur)
                    .HasColumnName("co_sucur")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoSerie)
                    .IsRequired()
                    .HasColumnName("co_tipo_serie")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSaStockActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saStockActual");

                entity.Property(e => e.CoArt)
                    .IsRequired()
                    .HasColumnName("co_art")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Stock)
                    .HasColumnName("stock")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("tipo")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VSaTipoAnulacionVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saTipoAnulacionVenta");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoAnulacion)
                    .IsRequired()
                    .HasColumnName("co_anulacion")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesTipo)
                    .IsRequired()
                    .HasColumnName("des_tipo")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaTipoComprobante>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saTipoComprobante");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipo)
                    .IsRequired()
                    .HasColumnName("co_tipo")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesTipo)
                    .IsRequired()
                    .HasColumnName("des_tipo")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaTipoDocumento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saTipoDocumento");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CampoAdic)
                    .HasColumnName("campo_Adic")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoImag)
                    .IsRequired()
                    .HasColumnName("co_tipo_imag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .IsRequired()
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaTipoGasto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saTipoGasto");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoGasto)
                    .IsRequired()
                    .HasColumnName("co_gasto")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesTipo)
                    .IsRequired()
                    .HasColumnName("des_tipo")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaTipoImagen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saTipoImagen");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CampoAdic)
                    .HasColumnName("campo_Adic")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTipoImag)
                    .IsRequired()
                    .HasColumnName("co_tipo_imag")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .IsRequired()
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaTransferenciaEntreCuentas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saTransferenciaEntreCuentas");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoTransBan)
                    .IsRequired()
                    .HasColumnName("co_trans_ban")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comision)
                    .HasColumnName("comision")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CtaComision)
                    .HasColumnName("cta_comision")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CtaDestino)
                    .IsRequired()
                    .HasColumnName("cta_destino")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CtaIngrEgrComision)
                    .HasColumnName("cta_ingr_egr_comision")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CtaIngrEgrDestino)
                    .IsRequired()
                    .HasColumnName("cta_ingr_egr_destino")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CtaIngrEgrOrigen)
                    .IsRequired()
                    .HasColumnName("cta_ingr_egr_origen")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CtaOrigen)
                    .IsRequired()
                    .HasColumnName("cta_origen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DesTransBan)
                    .HasColumnName("des_trans_ban")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaDestino)
                    .HasColumnName("fecha_destino")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FechaOrigen)
                    .HasColumnName("fecha_origen")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Monto)
                    .HasColumnName("monto")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MovBanComision)
                    .HasColumnName("mov_ban_comision")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MovBanDestino)
                    .HasColumnName("mov_ban_destino")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MovBanOrigen)
                    .HasColumnName("mov_ban_origen")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.ReferenciaDestino)
                    .HasColumnName("referencia_destino")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ReferenciaOrigen)
                    .HasColumnName("referencia_origen")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<VSaTraslado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_saTraslado");

                entity.Property(e => e.AlmDest)
                    .HasColumnName("alm_dest")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AlmOrig)
                    .IsRequired()
                    .HasColumnName("alm_orig")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AlmTmp)
                    .IsRequired()
                    .HasColumnName("alm_tmp")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Anulado).HasColumnName("anulado");

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoMone)
                    .IsRequired()
                    .HasColumnName("co_mone")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Confirma).HasColumnName("confirma");

                entity.Property(e => e.Expr1)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MontoDist)
                    .HasColumnName("monto_dist")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MotivoGlo)
                    .IsRequired()
                    .HasColumnName("motivo_glo")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SerialesE).HasColumnName("seriales_e");

                entity.Property(e => e.SerialesS).HasColumnName("seriales_s");

                entity.Property(e => e.Tasa)
                    .HasColumnName("tasa")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TrasNum)
                    .IsRequired()
                    .HasColumnName("tras_num")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VStgFactLoteGen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_stgFactLoteGen");

                entity.Property(e => e.ArchCod)
                    .HasColumnName("arch_cod")
                    .HasMaxLength(260)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Campo1)
                    .HasColumnName("campo1")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasColumnName("campo2")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasColumnName("campo3")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasColumnName("campo4")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasColumnName("campo5")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo6)
                    .HasColumnName("campo6")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo7)
                    .HasColumnName("campo7")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Campo8)
                    .HasColumnName("campo8")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CoCliD)
                    .HasColumnName("co_cli_d")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoCliH)
                    .HasColumnName("co_cli_h")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoFactLoteGen)
                    .IsRequired()
                    .HasColumnName("co_fact_lote_gen")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoPlanVta)
                    .HasColumnName("co_plan_vta")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerieFact)
                    .IsRequired()
                    .HasColumnName("co_serie_fact")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSerieNctrl)
                    .IsRequired()
                    .HasColumnName("co_serie_nctrl")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucu)
                    .HasColumnName("co_sucu")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuIn)
                    .HasColumnName("co_sucu_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSucuMo)
                    .HasColumnName("co_sucu_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsIn)
                    .IsRequired()
                    .HasColumnName("co_us_in")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsMo)
                    .IsRequired()
                    .HasColumnName("co_us_mo")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoUsuario)
                    .IsRequired()
                    .HasColumnName("co_usuario")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasColumnName("descrip")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeUsIn)
                    .HasColumnName("fe_us_in")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeUsMo)
                    .HasColumnName("fe_us_mo")
                    .HasColumnType("datetime");

                entity.Property(e => e.FecEmis)
                    .HasColumnName("fec_emis")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FecReg)
                    .HasColumnName("fec_reg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FecVenc)
                    .HasColumnName("fec_venc")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime");

                entity.Property(e => e.ManCondPl).HasColumnName("man_cond_pl");

                entity.Property(e => e.ManFecEmis).HasColumnName("man_fec_emis");

                entity.Property(e => e.ManFecReg).HasColumnName("man_fec_reg");

                entity.Property(e => e.ManFecVenc).HasColumnName("man_fec_venc");

                entity.Property(e => e.ManVenPl).HasColumnName("man_ven_pl");

                entity.Property(e => e.PrecVtaAct).HasColumnName("prec_vta_act");

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.Revisado)
                    .HasColumnName("revisado")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.SpUsuario)
                    .HasColumnName("sp_usuario")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trasnfe)
                    .HasColumnName("trasnfe")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validador)
                    .IsRequired()
                    .HasColumnName("validador")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<View1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_1");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CoLin01)
                    .IsRequired()
                    .HasColumnName("co_lin01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin02)
                    .HasColumnName("co_lin02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin03)
                    .HasColumnName("co_lin03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin04)
                    .HasColumnName("co_lin04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoLin05)
                    .HasColumnName("co_lin05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl01)
                    .IsRequired()
                    .HasColumnName("co_subl01")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl02)
                    .HasColumnName("co_subl02")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl03)
                    .HasColumnName("co_subl03")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl04)
                    .HasColumnName("co_subl04")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CoSubl05)
                    .HasColumnName("co_subl05")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.TipoDoc)
                    .IsRequired()
                    .HasColumnName("tipo_doc")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
